{
  "version": 3,
  "sources": ["../../base64-js/index.js", "../../@babel/runtime/helpers/regeneratorRuntime.js", "../../@babel/runtime/regenerator/index.js", "../../axios/lib/helpers/bind.js", "../../axios/lib/utils.js", "../../axios/lib/helpers/buildURL.js", "../../axios/lib/core/InterceptorManager.js", "../../axios/lib/helpers/normalizeHeaderName.js", "../../axios/lib/core/enhanceError.js", "../../axios/lib/core/createError.js", "../../axios/lib/core/settle.js", "../../axios/lib/helpers/cookies.js", "../../axios/lib/helpers/isAbsoluteURL.js", "../../axios/lib/helpers/combineURLs.js", "../../axios/lib/core/buildFullPath.js", "../../axios/lib/helpers/parseHeaders.js", "../../axios/lib/helpers/isURLSameOrigin.js", "../../axios/lib/cancel/Cancel.js", "../../axios/lib/adapters/xhr.js", "../../axios/lib/defaults.js", "../../axios/lib/core/transformData.js", "../../axios/lib/cancel/isCancel.js", "../../axios/lib/core/dispatchRequest.js", "../../axios/lib/core/mergeConfig.js", "../../axios/lib/env/data.js", "../../axios/lib/helpers/validator.js", "../../axios/lib/core/Axios.js", "../../axios/lib/cancel/CancelToken.js", "../../axios/lib/helpers/spread.js", "../../axios/lib/helpers/isAxiosError.js", "../../axios/lib/axios.js", "../../axios/index.js", "../../form-data/lib/browser.js", "../../isomorphic-ws/browser.js", "../../@babel/runtime/helpers/esm/extends.js", "../../@babel/runtime/helpers/esm/typeof.js", "../../@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js", "../../@babel/runtime/helpers/esm/objectWithoutProperties.js", "../../@babel/runtime/helpers/esm/arrayLikeToArray.js", "../../@babel/runtime/helpers/esm/arrayWithoutHoles.js", "../../@babel/runtime/helpers/esm/iterableToArray.js", "../../@babel/runtime/helpers/esm/unsupportedIterableToArray.js", "../../@babel/runtime/helpers/esm/nonIterableSpread.js", "../../@babel/runtime/helpers/esm/toConsumableArray.js", "../../@babel/runtime/helpers/esm/asyncToGenerator.js", "../../@babel/runtime/helpers/esm/classCallCheck.js", "../../@babel/runtime/helpers/esm/toPrimitive.js", "../../@babel/runtime/helpers/esm/toPropertyKey.js", "../../@babel/runtime/helpers/esm/createClass.js", "../../@babel/runtime/helpers/esm/defineProperty.js", "../../@babel/runtime/helpers/esm/arrayWithHoles.js", "../../@babel/runtime/helpers/esm/iterableToArrayLimit.js", "../../@babel/runtime/helpers/esm/nonIterableRest.js", "../../@babel/runtime/helpers/esm/slicedToArray.js", "../../@babel/runtime/helpers/esm/assertThisInitialized.js", "../../@babel/runtime/helpers/esm/setPrototypeOf.js", "../../@babel/runtime/helpers/esm/inherits.js", "../../@babel/runtime/helpers/esm/possibleConstructorReturn.js", "../../@babel/runtime/helpers/esm/getPrototypeOf.js", "../../@babel/runtime/helpers/esm/isNativeFunction.js", "../../@babel/runtime/helpers/esm/isNativeReflectConstruct.js", "../../@babel/runtime/helpers/esm/construct.js", "../../@babel/runtime/helpers/esm/wrapNativeSuper.js", "../../stream-chat/src/base64.ts", "../../stream-chat/https", "../../stream-chat/src/channel_state.ts", "../../stream-chat/src/utils.ts", "../../stream-chat/src/channel.ts", "../../stream-chat/src/client_state.ts", "../../stream-chat/src/insights.ts", "../../stream-chat/src/connection.ts", "../../stream-chat/jsonwebtoken", "../../stream-chat/crypto", "../../stream-chat/src/signing.ts", "../../stream-chat/src/token_manager.ts", "../../stream-chat/src/errors.ts", "../../stream-chat/src/connection_fallback.ts", "../../stream-chat/src/types.ts", "../../stream-chat/src/client.ts", "../../stream-chat/src/events.ts", "../../stream-chat/src/permissions.ts"],
  "sourcesContent": ["'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n", "var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) {\n              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            }\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {\n        \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n      }\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;", "// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n", "'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n", "'use strict';\n\nvar bind = require('./helpers/bind');\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n", "'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n", "'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n", "'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n", "'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n", "'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n", "'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n", "'use strict';\n\nvar isAbsoluteURL = require('../helpers/isAbsoluteURL');\nvar combineURLs = require('../helpers/combineURLs');\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n", "'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n", "'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n", "'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar cookies = require('./../helpers/cookies');\nvar buildURL = require('./../helpers/buildURL');\nvar buildFullPath = require('../core/buildFullPath');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n", "'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\nvar enhanceError = require('./core/enhanceError');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n", "'use strict';\n\nvar utils = require('./../utils');\nvar defaults = require('./../defaults');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n", "'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar Cancel = require('../cancel/Cancel');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n", "'use strict';\n\nvar utils = require('../utils');\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n", "module.exports = {\n  \"version\": \"0.22.0\"\n};", "'use strict';\n\nvar VERSION = require('../env/data').version;\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n", "'use strict';\n\nvar utils = require('./../utils');\nvar buildURL = require('../helpers/buildURL');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\nvar mergeConfig = require('./mergeConfig');\nvar validator = require('../helpers/validator');\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n", "'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n", "'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n", "'use strict';\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n", "'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\naxios.VERSION = require('./env/data').version;\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n", "module.exports = require('./lib/axios');", "/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n", "// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n", "export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}", "export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}", "export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}", "import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}", "export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}", "import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}", "export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}", "import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}", "export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}", "import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}", "function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}", "export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}", "import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}", "import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}", "import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}", "import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}", "export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}", "export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {\n        ;\n      }\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}", "export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}", "import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}", "export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}", "export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}", "import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}", "import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}", "export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}", "export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}", "export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}", "import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}", "import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}", "import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return !!callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(arrayOrString: string | T[], callback: MapGenericCallback<T, U> | MapStringCallback<U>): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (!isString(arrayOrString) && !isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n", "export default null;", "import { Channel } from './channel';\nimport {\n  ChannelMemberResponse,\n  ChannelMembership,\n  FormatMessageResponse,\n  Event,\n  ExtendableGenerics,\n  DefaultGenerics,\n  MessageSetType,\n  MessageResponse,\n  ReactionResponse,\n  UserResponse,\n  PendingMessageResponse,\n} from './types';\n\ntype ChannelReadStatus<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  { last_read: Date; unread_messages: number; user: UserResponse<StreamChatGenerics> }\n>;\n\n/**\n * ChannelState - A container class for the channel state.\n */\nexport class ChannelState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  _channel: Channel<StreamChatGenerics>;\n  watcher_count: number;\n  typing: Record<string, Event<StreamChatGenerics>>;\n  read: ChannelReadStatus<StreamChatGenerics>;\n  pinnedMessages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>;\n  pending_messages: Array<PendingMessageResponse<StreamChatGenerics>>;\n  threads: Record<string, Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>>;\n  mutedUsers: Array<UserResponse<StreamChatGenerics>>;\n  watchers: Record<string, UserResponse<StreamChatGenerics>>;\n  members: Record<string, ChannelMemberResponse<StreamChatGenerics>>;\n  unreadCount: number;\n  membership: ChannelMembership<StreamChatGenerics>;\n  last_message_at: Date | null;\n  /**\n   * Flag which indicates if channel state contain latest/recent messages or no.\n   * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   * When false, any new message (received by websocket event - message.new) will not\n   * be pushed on to message list.\n   */\n  isUpToDate: boolean;\n  /**\n   * Disjoint lists of messages\n   * Users can jump in the message list (with searching) and this can result in disjoint lists of messages\n   * The state manages these lists and merges them when lists overlap\n   * The messages array contains the currently active set\n   */\n  messageSets: {\n    isCurrent: boolean;\n    isLatest: boolean;\n    messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>;\n  }[] = [];\n  constructor(channel: Channel<StreamChatGenerics>) {\n    this._channel = channel;\n    this.watcher_count = 0;\n    this.typing = {};\n    this.read = {};\n    this.initMessages();\n    this.pinnedMessages = [];\n    this.pending_messages = [];\n    this.threads = {};\n    // a list of users to hide messages from\n    this.mutedUsers = [];\n    this.watchers = {};\n    this.members = {};\n    this.membership = {};\n    this.unreadCount = 0;\n    /**\n     * Flag which indicates if channel state contain latest/recent messages or no.\n     * This flag should be managed by UI sdks using a setter - setIsUpToDate.\n     * When false, any new message (received by websocket event - message.new) will not\n     * be pushed on to message list.\n     */\n    this.isUpToDate = true;\n    this.last_message_at = channel?.state?.last_message_at != null ? new Date(channel.state.last_message_at) : null;\n  }\n\n  get messages() {\n    return this.messageSets.find((s) => s.isCurrent)?.messages || [];\n  }\n\n  set messages(messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isCurrent);\n    this.messageSets[index].messages = messages;\n  }\n\n  /**\n   * The list of latest messages\n   * The messages array not always contains the latest messages (for example if a user searched for an earlier message, that is in a different message set)\n   */\n  get latestMessages() {\n    return this.messageSets.find((s) => s.isLatest)?.messages || [];\n  }\n\n  set latestMessages(messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>) {\n    const index = this.messageSets.findIndex((s) => s.isLatest);\n    this.messageSets[index].messages = messages;\n  }\n\n  /**\n   * addMessageSorted - Add a message to the state\n   *\n   * @param {MessageResponse<StreamChatGenerics>} newMessage A new message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if message is not in the list (only used if addIfDoesNotExist is true)\n   */\n  addMessageSorted(\n    newMessage: MessageResponse<StreamChatGenerics>,\n    timestampChanged = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    return this.addMessagesSorted(\n      [newMessage],\n      timestampChanged,\n      false,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n  }\n\n  /**\n   * formatMessage - Takes the message object. Parses the dates, sets __html\n   * and sets the status to received if missing. Returns a message object\n   *\n   * @param {MessageResponse<StreamChatGenerics>} message a message object\n   *\n   */\n  formatMessage(message: MessageResponse<StreamChatGenerics>): FormatMessageResponse<StreamChatGenerics> {\n    return {\n      ...message,\n      /**\n       * @deprecated please use `html`\n       */\n      __html: message.html,\n      // parse the date..\n      pinned_at: message.pinned_at ? new Date(message.pinned_at) : null,\n      created_at: message.created_at ? new Date(message.created_at) : new Date(),\n      updated_at: message.updated_at ? new Date(message.updated_at) : new Date(),\n      status: message.status || 'received',\n    };\n  }\n\n  /**\n   * addMessagesSorted - Add the list of messages to state and resorts the messages\n   *\n   * @param {Array<MessageResponse<StreamChatGenerics>>} newMessages A list of messages\n   * @param {boolean} timestampChanged Whether updating messages with changed created_at value.\n   * @param {boolean} initializing Whether channel is being initialized.\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist Which message set to add to if messages are not in the list (only used if addIfDoesNotExist is true)\n   *\n   */\n  addMessagesSorted(\n    newMessages: MessageResponse<StreamChatGenerics>[],\n    timestampChanged = false,\n    initializing = false,\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    const { messagesToAdd, targetMessageSetIndex } = this.findTargetMessageSet(\n      newMessages,\n      addIfDoesNotExist,\n      messageSetToAddToIfDoesNotExist,\n    );\n\n    for (let i = 0; i < messagesToAdd.length; i += 1) {\n      const isFromShadowBannedUser = messagesToAdd[i].shadowed;\n      if (isFromShadowBannedUser) {\n        continue;\n      }\n      // If message is already formatted we can skip the tasks below\n      // This will be true for messages that are already present at the state -> this happens when we perform merging of message sets\n      // This will be also true for message previews used by some SDKs\n      const isMessageFormatted = messagesToAdd[i].created_at instanceof Date;\n      let message: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n      if (isMessageFormatted) {\n        message = messagesToAdd[i] as ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n      } else {\n        message = this.formatMessage(messagesToAdd[i] as MessageResponse<StreamChatGenerics>);\n\n        if (message.user && this._channel?.cid) {\n          /**\n           * Store the reference to user for this channel, so that when we have to\n           * handle updates to user, we can use the reference map, to determine which\n           * channels need to be updated with updated user object.\n           */\n          this._channel.getClient().state.updateUserReference(message.user, this._channel.cid);\n        }\n\n        if (initializing && message.id && this.threads[message.id]) {\n          // If we are initializing the state of channel (e.g., in case of connection recovery),\n          // then in that case we remove thread related to this message from threads object.\n          // This way we can ensure that we don't have any stale data in thread object\n          // and consumer can refetch the replies.\n          delete this.threads[message.id];\n        }\n\n        if (!this.last_message_at) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n\n        if (message.created_at.getTime() > this.last_message_at.getTime()) {\n          this.last_message_at = new Date(message.created_at.getTime());\n        }\n      }\n\n      // update or append the messages...\n      const parentID = message.parent_id;\n\n      // add to the given message set\n      if ((!parentID || message.show_in_channel) && targetMessageSetIndex !== -1) {\n        this.messageSets[targetMessageSetIndex].messages = this._addToMessageList(\n          this.messageSets[targetMessageSetIndex].messages,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n      }\n\n      /**\n       * Add message to thread if applicable and the message\n       * was added when querying for replies, or the thread already exits.\n       * This is to prevent the thread state from getting out of sync if\n       * a thread message is shown in channel but older than the newest thread\n       * message. This situation can result in a thread state where a random\n       * message is \"oldest\" message, and newer messages are therefore not loaded.\n       * This can also occur if an old thread message is updated.\n       */\n      if (parentID && !initializing) {\n        const thread = this.threads[parentID] || [];\n        const threadMessages = this._addToMessageList(\n          thread,\n          message,\n          timestampChanged,\n          'created_at',\n          addIfDoesNotExist,\n        );\n        this.threads[parentID] = threadMessages;\n      }\n    }\n\n    return {\n      messageSet: this.messageSets[targetMessageSetIndex],\n    };\n  }\n\n  /**\n   * addPinnedMessages - adds messages in pinnedMessages property\n   *\n   * @param {Array<MessageResponse<StreamChatGenerics>>} pinnedMessages A list of pinned messages\n   *\n   */\n  addPinnedMessages(pinnedMessages: MessageResponse<StreamChatGenerics>[]) {\n    for (let i = 0; i < pinnedMessages.length; i += 1) {\n      this.addPinnedMessage(pinnedMessages[i]);\n    }\n  }\n\n  /**\n   * addPinnedMessage - adds message in pinnedMessages\n   *\n   * @param {MessageResponse<StreamChatGenerics>} pinnedMessage message to update\n   *\n   */\n  addPinnedMessage(pinnedMessage: MessageResponse<StreamChatGenerics>) {\n    this.pinnedMessages = this._addToMessageList(\n      this.pinnedMessages,\n      this.formatMessage(pinnedMessage),\n      false,\n      'pinned_at',\n    );\n  }\n\n  /**\n   * removePinnedMessage - removes pinned message from pinnedMessages\n   *\n   * @param {MessageResponse<StreamChatGenerics>} message message to remove\n   *\n   */\n  removePinnedMessage(message: MessageResponse<StreamChatGenerics>) {\n    const { result } = this.removeMessageFromArray(this.pinnedMessages, message);\n    this.pinnedMessages = result;\n  }\n\n  addReaction(\n    reaction: ReactionResponse<StreamChatGenerics>,\n    message?: MessageResponse<StreamChatGenerics>,\n    enforce_unique?: boolean,\n  ) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._addOwnReactionToMessage(msg.own_reactions, reaction, enforce_unique);\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  _addOwnReactionToMessage(\n    ownReactions: ReactionResponse<StreamChatGenerics>[] | null | undefined,\n    reaction: ReactionResponse<StreamChatGenerics>,\n    enforce_unique?: boolean,\n  ) {\n    if (enforce_unique) {\n      ownReactions = [];\n    } else {\n      ownReactions = this._removeOwnReactionFromMessage(ownReactions, reaction);\n    }\n\n    ownReactions = ownReactions || [];\n    if (this._channel.getClient().userID === reaction.user_id) {\n      ownReactions.push(reaction);\n    }\n\n    return ownReactions;\n  }\n\n  _removeOwnReactionFromMessage(\n    ownReactions: ReactionResponse<StreamChatGenerics>[] | null | undefined,\n    reaction: ReactionResponse<StreamChatGenerics>,\n  ) {\n    if (ownReactions) {\n      return ownReactions.filter((item) => item.user_id !== reaction.user_id || item.type !== reaction.type);\n    }\n    return ownReactions;\n  }\n\n  removeReaction(reaction: ReactionResponse<StreamChatGenerics>, message?: MessageResponse<StreamChatGenerics>) {\n    if (!message) return;\n    const messageWithReaction = message;\n    this._updateMessage(message, (msg) => {\n      messageWithReaction.own_reactions = this._removeOwnReactionFromMessage(msg.own_reactions, reaction);\n      return this.formatMessage(messageWithReaction);\n    });\n    return messageWithReaction;\n  }\n\n  removeQuotedMessageReferences(message: MessageResponse<StreamChatGenerics>) {\n    const parseMessage = (m: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>) =>\n      (({\n        ...m,\n        created_at: m.created_at.toString(),\n        pinned_at: m.pinned_at?.toString(),\n        updated_at: m.updated_at?.toString(),\n      } as unknown) as MessageResponse<StreamChatGenerics>);\n\n    this.messageSets.forEach((set) => {\n      const updatedMessages = set.messages\n        .filter((msg) => msg.quoted_message_id === message.id)\n        .map(parseMessage)\n        .map((msg) => ({ ...msg, quoted_message: { ...message, attachments: [] } }));\n\n      this.addMessagesSorted(updatedMessages, true);\n    });\n  }\n\n  /**\n   * Updates all instances of given message in channel state\n   * @param message\n   * @param updateFunc\n   */\n  _updateMessage(\n    message: {\n      id?: string;\n      parent_id?: string;\n      pinned?: boolean;\n      show_in_channel?: boolean;\n    },\n    updateFunc: (\n      msg: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n    ) => ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n  ) {\n    const { parent_id, show_in_channel, pinned } = message;\n\n    if (parent_id && this.threads[parent_id]) {\n      const thread = this.threads[parent_id];\n      const msgIndex = thread.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        thread[msgIndex] = updateFunc(thread[msgIndex]);\n        this.threads[parent_id] = thread;\n      }\n    }\n\n    if ((!show_in_channel && !parent_id) || show_in_channel) {\n      const messageSetIndex = this.findMessageSetIndex(message);\n      if (messageSetIndex !== -1) {\n        const msgIndex = this.messageSets[messageSetIndex].messages.findIndex((msg) => msg.id === message.id);\n        if (msgIndex !== -1) {\n          this.messageSets[messageSetIndex].messages[msgIndex] = updateFunc(\n            this.messageSets[messageSetIndex].messages[msgIndex],\n          );\n        }\n      }\n    }\n\n    if (pinned) {\n      const msgIndex = this.pinnedMessages.findIndex((msg) => msg.id === message.id);\n      if (msgIndex !== -1) {\n        this.pinnedMessages[msgIndex] = updateFunc(this.pinnedMessages[msgIndex]);\n      }\n    }\n  }\n\n  /**\n   * Setter for isUpToDate.\n   *\n   * @param isUpToDate  Flag which indicates if channel state contain latest/recent messages or no.\n   *                    This flag should be managed by UI sdks using a setter - setIsUpToDate.\n   *                    When false, any new message (received by websocket event - message.new) will not\n   *                    be pushed on to message list.\n   */\n  setIsUpToDate = (isUpToDate: boolean) => {\n    this.isUpToDate = isUpToDate;\n  };\n\n  /**\n   * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isn't found\n   *\n   * @param {Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>} messages A list of messages\n   * @param message\n   * @param {boolean} timestampChanged Whether updating a message with changed created_at value.\n   * @param {string} sortBy field name to use to sort the messages by\n   * @param {boolean} addIfDoesNotExist Add message if it is not in the list, used to prevent out of order updated messages from being added.\n   */\n  _addToMessageList(\n    messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n    message: ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>,\n    timestampChanged = false,\n    sortBy: 'pinned_at' | 'created_at' = 'created_at',\n    addIfDoesNotExist = true,\n  ) {\n    const addMessageToList = addIfDoesNotExist || timestampChanged;\n    let messageArr = messages;\n\n    // if created_at has changed, message should be filtered and re-inserted in correct order\n    // slow op but usually this only happens for a message inserted to state before actual response with correct timestamp\n    if (timestampChanged) {\n      messageArr = messageArr.filter((msg) => !(msg.id && message.id === msg.id));\n    }\n\n    // Get array length after filtering\n    const messageArrayLength = messageArr.length;\n\n    // for empty list just concat and return unless it's an update or deletion\n    if (messageArrayLength === 0 && addMessageToList) {\n      return messageArr.concat(message);\n    } else if (messageArrayLength === 0) {\n      return [...messageArr];\n    }\n\n    const messageTime = (message[sortBy] as Date).getTime();\n    const messageIsNewest = (messageArr[messageArrayLength - 1][sortBy] as Date).getTime() < messageTime;\n\n    // if message is newer than last item in the list concat and return unless it's an update or deletion\n    if (messageIsNewest && addMessageToList) {\n      return messageArr.concat(message);\n    } else if (messageIsNewest) {\n      return [...messageArr];\n    }\n\n    // find the closest index to push the new message\n    let left = 0;\n    let middle = 0;\n    let right = messageArrayLength - 1;\n    while (left <= right) {\n      middle = Math.floor((right + left) / 2);\n      if ((messageArr[middle][sortBy] as Date).getTime() <= messageTime) left = middle + 1;\n      else right = middle - 1;\n    }\n\n    // message already exists and not filtered due to timestampChanged, update and return\n    if (!timestampChanged && message.id) {\n      if (messageArr[left] && message.id === messageArr[left].id) {\n        messageArr[left] = message;\n        return [...messageArr];\n      }\n\n      if (messageArr[left - 1] && message.id === messageArr[left - 1].id) {\n        messageArr[left - 1] = message;\n        return [...messageArr];\n      }\n    }\n\n    // Do not add updated or deleted messages to the list if they do not already exist\n    // or have a timestamp change.\n    if (addMessageToList) {\n      messageArr.splice(left, 0, message);\n    }\n    return [...messageArr];\n  }\n\n  /**\n   * removeMessage - Description\n   *\n   * @param {{ id: string; parent_id?: string }} messageToRemove Object of the message to remove. Needs to have at id specified.\n   *\n   * @return {boolean} Returns if the message was removed\n   */\n  removeMessage(messageToRemove: { id: string; messageSetIndex?: number; parent_id?: string }) {\n    let isRemoved = false;\n    if (messageToRemove.parent_id && this.threads[messageToRemove.parent_id]) {\n      const { removed, result: threadMessages } = this.removeMessageFromArray(\n        this.threads[messageToRemove.parent_id],\n        messageToRemove,\n      );\n\n      this.threads[messageToRemove.parent_id] = threadMessages;\n      isRemoved = removed;\n    } else {\n      const messageSetIndex = messageToRemove.messageSetIndex ?? this.findMessageSetIndex(messageToRemove);\n      if (messageSetIndex !== -1) {\n        const { removed, result: messages } = this.removeMessageFromArray(\n          this.messageSets[messageSetIndex].messages,\n          messageToRemove,\n        );\n        this.messageSets[messageSetIndex].messages = messages;\n        isRemoved = removed;\n      }\n    }\n\n    return isRemoved;\n  }\n\n  removeMessageFromArray = (\n    msgArray: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n    msg: { id: string; parent_id?: string },\n  ) => {\n    const result = msgArray.filter((message) => !(!!message.id && !!msg.id && message.id === msg.id));\n\n    return { removed: result.length < msgArray.length, result };\n  };\n\n  /**\n   * Updates the message.user property with updated user object, for messages.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  updateUserMessages = (user: UserResponse<StreamChatGenerics>) => {\n    const _updateUserMessages = (\n      messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n      user: UserResponse<StreamChatGenerics>,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id === user.id) {\n          messages[i] = { ...m, user };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) => _updateUserMessages(set.messages, user));\n\n    for (const parentId in this.threads) {\n      _updateUserMessages(this.threads[parentId], user);\n    }\n\n    _updateUserMessages(this.pinnedMessages, user);\n  };\n\n  /**\n   * Marks the messages as deleted, from deleted user.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   * @param {boolean} hardDelete\n   */\n  deleteUserMessages = (user: UserResponse<StreamChatGenerics>, hardDelete = false) => {\n    const _deleteUserMessages = (\n      messages: Array<ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>>,\n      user: UserResponse<StreamChatGenerics>,\n      hardDelete = false,\n    ) => {\n      for (let i = 0; i < messages.length; i++) {\n        const m = messages[i];\n        if (m.user?.id !== user.id) {\n          continue;\n        }\n\n        if (hardDelete) {\n          /**\n           * In case of hard delete, we need to strip down all text, html,\n           * attachments and all the custom properties on message\n           */\n          messages[i] = ({\n            cid: m.cid,\n            created_at: m.created_at,\n            deleted_at: user.deleted_at,\n            id: m.id,\n            latest_reactions: [],\n            mentioned_users: [],\n            own_reactions: [],\n            parent_id: m.parent_id,\n            reply_count: m.reply_count,\n            status: m.status,\n            thread_participants: m.thread_participants,\n            type: 'deleted',\n            updated_at: m.updated_at,\n            user: m.user,\n          } as unknown) as ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>;\n        } else {\n          messages[i] = {\n            ...m,\n            type: 'deleted',\n            deleted_at: user.deleted_at,\n          };\n        }\n      }\n    };\n\n    this.messageSets.forEach((set) => _deleteUserMessages(set.messages, user, hardDelete));\n\n    for (const parentId in this.threads) {\n      _deleteUserMessages(this.threads[parentId], user, hardDelete);\n    }\n\n    _deleteUserMessages(this.pinnedMessages, user, hardDelete);\n  };\n\n  /**\n   * filterErrorMessages - Removes error messages from the channel state.\n   *\n   */\n  filterErrorMessages() {\n    const filteredMessages = this.latestMessages.filter((message) => message.type !== 'error');\n\n    this.latestMessages = filteredMessages;\n  }\n\n  /**\n   * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n   */\n  clean() {\n    const now = new Date();\n    // prevent old users from showing up as typing\n    for (const [userID, lastEvent] of Object.entries(this.typing)) {\n      const receivedAt =\n        typeof lastEvent.received_at === 'string'\n          ? new Date(lastEvent.received_at)\n          : lastEvent.received_at || new Date();\n      if (now.getTime() - receivedAt.getTime() > 7000) {\n        delete this.typing[userID];\n        this._channel.getClient().dispatchEvent({\n          cid: this._channel.cid,\n          type: 'typing.stop',\n          user: { id: userID },\n        } as Event<StreamChatGenerics>);\n      }\n    }\n  }\n\n  clearMessages() {\n    this.initMessages();\n    this.pinnedMessages = [];\n  }\n\n  initMessages() {\n    this.messageSets = [{ messages: [], isLatest: true, isCurrent: true }];\n  }\n\n  /**\n   * loadMessageIntoState - Loads a given message (and messages around it) into the state\n   *\n   * @param {string} messageId The id of the message, or 'latest' to indicate switching to the latest messages\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   */\n  async loadMessageIntoState(messageId: string | 'latest', parentMessageId?: string, limit = 25) {\n    let messageSetIndex: number;\n    let switchedToMessageSet = false;\n    let loadedMessageThread = false;\n    const messageIdToFind = parentMessageId || messageId;\n    if (messageId === 'latest') {\n      if (this.messages === this.latestMessages) {\n        return;\n      }\n      messageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n    } else {\n      messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    }\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n      switchedToMessageSet = true;\n    }\n    loadedMessageThread = !parentMessageId || !!this.threads[parentMessageId]?.find((m) => m.id === messageId);\n    if (switchedToMessageSet && loadedMessageThread) {\n      return;\n    }\n    if (!switchedToMessageSet) {\n      await this._channel.query({ messages: { id_around: messageIdToFind, limit } }, 'new');\n    }\n    if (!loadedMessageThread && parentMessageId) {\n      await this._channel.getReplies(parentMessageId, { id_around: messageId, limit });\n    }\n    messageSetIndex = this.findMessageSetIndex({ id: messageIdToFind });\n    if (messageSetIndex !== -1) {\n      this.switchToMessageSet(messageSetIndex);\n    }\n  }\n\n  /**\n   * findMessage - Finds a message inside the state\n   *\n   * @param {string} messageId The id of the message\n   * @param {string} parentMessageId The id of the parent message, if we want load a thread reply\n   *\n   * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>} Returns the message, or undefined if the message wasn't found\n   */\n  findMessage(messageId: string, parentMessageId?: string) {\n    if (parentMessageId) {\n      const messages = this.threads[parentMessageId];\n      if (!messages) {\n        return undefined;\n      }\n      return messages.find((m) => m.id === messageId);\n    }\n\n    const messageSetIndex = this.findMessageSetIndex({ id: messageId });\n    if (messageSetIndex === -1) {\n      return undefined;\n    }\n    return this.messageSets[messageSetIndex].messages.find((m) => m.id === messageId);\n  }\n\n  private switchToMessageSet(index: number) {\n    const currentMessages = this.messageSets.find((s) => s.isCurrent);\n    if (!currentMessages) {\n      return;\n    }\n    currentMessages.isCurrent = false;\n    this.messageSets[index].isCurrent = true;\n  }\n\n  private areMessageSetsOverlap(messages1: Array<{ id: string }>, messages2: Array<{ id: string }>) {\n    return messages1.some((m1) => messages2.find((m2) => m1.id === m2.id));\n  }\n\n  private findMessageSetIndex(message: { id?: string }) {\n    return this.messageSets.findIndex((set) => !!set.messages.find((m) => m.id === message.id));\n  }\n\n  private findTargetMessageSet(\n    newMessages: MessageResponse<StreamChatGenerics>[],\n    addIfDoesNotExist = true,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    let messagesToAdd: (\n      | MessageResponse<StreamChatGenerics>\n      | ReturnType<ChannelState<StreamChatGenerics>['formatMessage']>\n    )[] = newMessages;\n    let targetMessageSetIndex!: number;\n    if (addIfDoesNotExist) {\n      const overlappingMessageSetIndices = this.messageSets\n        .map((_, i) => i)\n        .filter((i) => this.areMessageSetsOverlap(this.messageSets[i].messages, newMessages));\n      switch (messageSetToAddToIfDoesNotExist) {\n        case 'new':\n          if (overlappingMessageSetIndices.length > 0) {\n            targetMessageSetIndex = overlappingMessageSetIndices[0];\n            // No new message set is created if newMessages only contains thread replies\n          } else if (newMessages.some((m) => !m.parent_id)) {\n            this.messageSets.push({ messages: [], isCurrent: false, isLatest: false });\n            targetMessageSetIndex = this.messageSets.length - 1;\n          }\n          break;\n        case 'current':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isCurrent);\n          break;\n        case 'latest':\n          targetMessageSetIndex = this.messageSets.findIndex((s) => s.isLatest);\n          break;\n        default:\n          targetMessageSetIndex = -1;\n      }\n      // when merging the target set will be the first one from the overlapping message sets\n      const mergeTargetMessageSetIndex = overlappingMessageSetIndices.splice(0, 1)[0];\n      const mergeSourceMessageSetIndices = [...overlappingMessageSetIndices];\n      if (mergeTargetMessageSetIndex !== undefined && mergeTargetMessageSetIndex !== targetMessageSetIndex) {\n        mergeSourceMessageSetIndices.push(targetMessageSetIndex);\n      }\n      // merge message sets\n      if (mergeSourceMessageSetIndices.length > 0) {\n        const target = this.messageSets[mergeTargetMessageSetIndex];\n        const sources = this.messageSets.filter((_, i) => mergeSourceMessageSetIndices.indexOf(i) !== -1);\n        sources.forEach((messageSet) => {\n          target.isLatest = target.isLatest || messageSet.isLatest;\n          target.isCurrent = target.isCurrent || messageSet.isCurrent;\n          messagesToAdd = [...messagesToAdd, ...messageSet.messages];\n        });\n        sources.forEach((s) => this.messageSets.splice(this.messageSets.indexOf(s), 1));\n        const overlappingMessageSetIndex = this.messageSets.findIndex((s) =>\n          this.areMessageSetsOverlap(s.messages, newMessages),\n        );\n        targetMessageSetIndex = overlappingMessageSetIndex;\n      }\n    } else {\n      // assumes that all new messages belong to the same set\n      targetMessageSetIndex = this.findMessageSetIndex(newMessages[0]);\n    }\n\n    return { targetMessageSetIndex, messagesToAdd };\n  }\n}\n", "import FormData from 'form-data';\nimport { AscDesc, ExtendableGenerics, DefaultGenerics, OwnUserBase, OwnUserResponse, UserResponse } from './types';\n\n/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {Promise<T>} promise The promise you want to run and log\n * @param {string} name    A descriptive name of what the promise does for log output\n *\n */\nexport function logChatPromiseExecution<T>(promise: Promise<T>, name: string) {\n  promise.then().catch((error) => {\n    console.warn(`failed to do ${name}, ran into error: `, error);\n  });\n}\n\nexport const sleep = (m: number): Promise<void> => new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\nexport const chatCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n};\n\nfunction isReadableStream(obj: unknown): obj is NodeJS.ReadStream {\n  return (\n    obj !== null &&\n    typeof obj === 'object' &&\n    ((obj as NodeJS.ReadStream).readable || typeof (obj as NodeJS.ReadStream)._read === 'function')\n  );\n}\n\nfunction isBuffer(obj: unknown): obj is Buffer {\n  return (\n    obj != null &&\n    (obj as Buffer).constructor != null &&\n    // @ts-expect-error\n    typeof obj.constructor.isBuffer === 'function' &&\n    // @ts-expect-error\n    obj.constructor.isBuffer(obj)\n  );\n}\n\nfunction isFileWebAPI(uri: unknown): uri is File {\n  return typeof window !== 'undefined' && 'File' in window && uri instanceof File;\n}\n\nexport function isOwnUser<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n  user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>,\n): user is OwnUserResponse<StreamChatGenerics> {\n  return (user as OwnUserResponse<StreamChatGenerics>)?.total_unread_count !== undefined;\n}\n\nfunction isBlobWebAPI(uri: unknown): uri is Blob {\n  return typeof window !== 'undefined' && 'Blob' in window && uri instanceof Blob;\n}\n\nexport function isOwnUserBaseProperty(property: string) {\n  const ownUserBaseProperties: {\n    [Property in keyof Required<OwnUserBase>]: boolean;\n  } = {\n    channel_mutes: true,\n    devices: true,\n    mutes: true,\n    total_unread_count: true,\n    unread_channels: true,\n    unread_count: true,\n    invisible: true,\n    roles: true,\n  };\n\n  return ownUserBaseProperties[property as keyof OwnUserBase];\n}\n\nexport function addFileToFormData(\n  uri: string | NodeJS.ReadableStream | Buffer | File,\n  name?: string,\n  contentType?: string,\n) {\n  const data = new FormData();\n\n  if (isReadableStream(uri) || isBuffer(uri) || isFileWebAPI(uri) || isBlobWebAPI(uri)) {\n    if (name) data.append('file', uri, name);\n    else data.append('file', uri);\n  } else {\n    data.append('file', {\n      uri,\n      name: name || (uri as string).split('/').reverse()[0],\n      contentType: contentType || undefined,\n      type: contentType || undefined,\n    });\n  }\n\n  return data;\n}\nexport function normalizeQuerySort<T extends Record<string, AscDesc | undefined>>(sort: T | T[]) {\n  const sortFields: Array<{ direction: AscDesc; field: keyof T }> = [];\n  const sortArr = Array.isArray(sort) ? sort : [sort];\n  for (const item of sortArr) {\n    const entries = Object.entries(item) as [keyof T, AscDesc][];\n    if (entries.length > 1) {\n      console.warn(\n        \"client._buildSort() - multiple fields in a single sort object detected. Object's field order is not guaranteed\",\n      );\n    }\n    for (const [field, direction] of entries) {\n      sortFields.push({ field, direction });\n    }\n  }\n  return sortFields;\n}\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number) {\n  // try to reconnect in 0.25-25 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 25000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 25000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function randomId() {\n  return generateUUIDv4();\n}\n\nfunction hex(bytes: Uint8Array): string {\n  let s = '';\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n}\n\n// https://tools.ietf.org/html/rfc4122\nexport function generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = (bytes[6] & 0x0f) | 0x40; // version\n  bytes[8] = (bytes[8] & 0xbf) | 0x80; // variant\n\n  return (\n    hex(bytes.subarray(0, 4)) +\n    '-' +\n    hex(bytes.subarray(4, 6)) +\n    '-' +\n    hex(bytes.subarray(6, 8)) +\n    '-' +\n    hex(bytes.subarray(8, 10)) +\n    '-' +\n    hex(bytes.subarray(10, 16))\n  );\n}\n\nfunction getRandomValuesWithMathRandom(bytes: Uint8Array): void {\n  const max = Math.pow(2, (8 * bytes.byteLength) / bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = Math.random() * max;\n  }\n}\ndeclare const msCrypto: Crypto;\n\nconst getRandomValues = (() => {\n  if (typeof crypto !== 'undefined' && typeof crypto?.getRandomValues !== 'undefined') {\n    return crypto.getRandomValues.bind(crypto);\n  } else if (typeof msCrypto !== 'undefined') {\n    return msCrypto.getRandomValues.bind(msCrypto);\n  } else {\n    return getRandomValuesWithMathRandom;\n  }\n})();\n\nfunction getRandomBytes(length: number): Uint8Array {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\n\nexport function convertErrorToJson(err: Error) {\n  const jsonObj = {} as Record<string, unknown>;\n\n  if (!err) return jsonObj;\n\n  try {\n    Object.getOwnPropertyNames(err).forEach((key) => {\n      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n    });\n  } catch (_) {\n    return {\n      error: 'failed to serialize the error',\n    };\n  }\n\n  return jsonObj;\n}\n\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */\nexport function isOnline() {\n  const nav =\n    typeof navigator !== 'undefined'\n      ? navigator\n      : typeof window !== 'undefined' && window.navigator\n      ? window.navigator\n      : undefined;\n\n  if (!nav) {\n    console.warn('isOnline failed to access window.navigator and assume browser is online');\n    return true;\n  }\n\n  // RN navigator has undefined for onLine\n  if (typeof nav.onLine !== 'boolean') {\n    return true;\n  }\n\n  return nav.onLine;\n}\n\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\nexport function addConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\n\nexport function removeConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\n", "import { ChannelState } from './channel_state';\nimport { logChatPromiseExecution, normalizeQuerySort } from './utils';\nimport { StreamChat } from './client';\nimport {\n  APIResponse,\n  BanUserOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMemberAPIResponse,\n  ChannelMemberResponse,\n  ChannelQueryOptions,\n  ChannelResponse,\n  ChannelUpdateOptions,\n  CreateCallOptions,\n  CreateCallResponse,\n  DefaultGenerics,\n  DeleteChannelAPIResponse,\n  Event,\n  EventAPIResponse,\n  EventHandler,\n  EventTypes,\n  ExtendableGenerics,\n  FormatMessageResponse,\n  GetMultipleMessagesAPIResponse,\n  GetReactionsAPIResponse,\n  GetRepliesAPIResponse,\n  InviteOptions,\n  MarkReadOptions,\n  MemberSort,\n  Message,\n  MessageFilters,\n  MessagePaginationOptions,\n  MessageResponse,\n  MessageSetType,\n  MuteChannelAPIResponse,\n  PartialUpdateChannel,\n  PartialUpdateChannelAPIResponse,\n  PinnedMessagePaginationOptions,\n  PinnedMessagesSort,\n  QueryMembersOptions,\n  Reaction,\n  ReactionAPIResponse,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  SendMessageAPIResponse,\n  TruncateChannelAPIResponse,\n  TruncateOptions,\n  UpdateChannelAPIResponse,\n  UserFilters,\n  UserResponse,\n  QueryChannelAPIResponse,\n} from './types';\nimport { Role } from './permissions';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  _client: StreamChat<StreamChatGenerics>;\n  type: string;\n  id: string | undefined;\n  data: ChannelData<StreamChatGenerics> | ChannelResponse<StreamChatGenerics> | undefined;\n  _data: ChannelData<StreamChatGenerics> | ChannelResponse<StreamChatGenerics>;\n  cid: string;\n  /**  */\n  listeners: { [key: string]: (string | EventHandler<StreamChatGenerics>)[] };\n  state: ChannelState<StreamChatGenerics>;\n  /**\n   * This boolean is a vague indication of weather the channel exists on chat backend.\n   *\n   * If the value is true, then that means the channel has been initialized by either calling\n   * channel.create() or channel.query() or channel.watch().\n   *\n   * If the value is false, then channel may or may not exist on the backend. The only way to ensure\n   * is by calling channel.create() or channel.query() or channel.watch().\n   */\n  initialized: boolean;\n  /**\n   * Indicates weather channel has been initialized by manually populating the state with some messages, members etc.\n   * Static state indicates that channel exists on backend, but is not being watched yet.\n   */\n  offlineMode: boolean;\n  lastKeyStroke?: Date;\n  lastTypingEvent: Date | null;\n  isTyping: boolean;\n  disconnected: boolean;\n\n  /**\n   * constructor - Create a channel\n   *\n   * @param {StreamChat<StreamChatGenerics>} client the chat client\n   * @param {string} type  the type of channel\n   * @param {string} [id]  the id of the chat\n   * @param {ChannelData<StreamChatGenerics>} data any additional custom params\n   *\n   * @return {Channel<StreamChatGenerics>} Returns a new uninitialized channel\n   */\n  constructor(\n    client: StreamChat<StreamChatGenerics>,\n    type: string,\n    id: string | undefined,\n    data: ChannelData<StreamChatGenerics>,\n  ) {\n    const validTypeRe = /^[\\w_-]+$/;\n    const validIDRe = /^[\\w!_-]+$/;\n\n    if (!validTypeRe.test(type)) {\n      throw new Error(`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`);\n    }\n    if (typeof id === 'string' && !validIDRe.test(id)) {\n      throw new Error(`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`);\n    }\n\n    this._client = client;\n    this.type = type;\n    this.id = id;\n    // used by the frontend, gets updated:\n    this.data = data;\n    // this._data is used for the requests...\n    this._data = { ...data };\n    this.cid = `${type}:${id}`;\n    this.listeners = {};\n    // perhaps the state variable should be private\n    this.state = new ChannelState<StreamChatGenerics>(this);\n    this.initialized = false;\n    this.offlineMode = false;\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    this.disconnected = false;\n  }\n\n  /**\n   * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n   *\n   * @return {StreamChat<StreamChatGenerics>}\n   */\n  getClient(): StreamChat<StreamChatGenerics> {\n    if (this.disconnected === true) {\n      throw Error(`You can't use a channel after client.disconnect() was called`);\n    }\n    return this._client;\n  }\n\n  /**\n   * getConfig - Get the config for this channel id (cid)\n   *\n   * @return {Record<string, unknown>}\n   */\n  getConfig() {\n    const client = this.getClient();\n    return client.configs[this.cid];\n  }\n\n  /**\n   * sendMessage - Send a message to this channel\n   *\n   * @param {Message<StreamChatGenerics>} message The Message object\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   * @param {boolean} [options.skip_push] Skip sending push notifications\n   * @param {boolean} [options.is_pending_message] Make this message pending\n   * @param {Record<string,string>} [options.pending_message_metadata] Metadata for the pending message\n   *\n   * @return {Promise<SendMessageAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendMessage(\n    message: Message<StreamChatGenerics>,\n    options?: {\n      is_pending_message?: boolean;\n      pending_message_metadata?: Record<string, string>;\n      skip_enrich_url?: boolean;\n      skip_push?: boolean;\n    },\n  ) {\n    const sendMessageResponse = await this.getClient().post<SendMessageAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + '/message',\n      {\n        message,\n        ...options,\n      },\n    );\n\n    // Reset unreadCount to 0.\n    this.state.unreadCount = 0;\n\n    return sendMessageResponse;\n  }\n\n  sendFile(\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    return this.getClient().sendFile(`${this._channelURL()}/file`, uri, name, contentType, user);\n  }\n\n  sendImage(\n    uri: string | NodeJS.ReadableStream | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    return this.getClient().sendFile(`${this._channelURL()}/image`, uri, name, contentType, user);\n  }\n\n  deleteFile(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/file`, { url });\n  }\n\n  deleteImage(url: string) {\n    return this.getClient().delete<APIResponse>(`${this._channelURL()}/image`, { url });\n  }\n\n  /**\n   * sendEvent - Send an event on this channel\n   *\n   * @param {Event<StreamChatGenerics>} event for example {type: 'message.read'}\n   *\n   * @return {Promise<EventAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendEvent(event: Event<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().post<EventAPIResponse<StreamChatGenerics>>(this._channelURL() + '/event', {\n      event,\n    });\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {MessageFilters<StreamChatGenerics> | string}  query search query or object MongoDB style filters\n   * @param {{client_id?: string; connection_id?: string; query?: string; message_filter_conditions?: MessageFilters<StreamChatGenerics>}} options Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n   */\n  async search(\n    query: MessageFilters<StreamChatGenerics> | string,\n    options: SearchOptions<StreamChatGenerics> & {\n      client_id?: string;\n      connection_id?: string;\n      message_filter_conditions?: MessageFilters<StreamChatGenerics>;\n      query?: string;\n    } = {},\n  ) {\n    if (options.offset && (options.sort || options.next)) {\n      throw Error(`Cannot specify offset with sort or next parameters`);\n    }\n    // Return a list of channels\n    const payload: SearchPayload<StreamChatGenerics> = {\n      filter_conditions: { cid: this.cid } as ChannelFilters<StreamChatGenerics>,\n      ...options,\n      sort: options.sort ? normalizeQuerySort<SearchMessageSortBase<StreamChatGenerics>>(options.sort) : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    return await this.getClient().get<SearchAPIResponse<StreamChatGenerics>>(this.getClient().baseURL + '/search', {\n      payload,\n    });\n  }\n\n  /**\n   * queryMembers - Query Members\n   *\n   * @param {UserFilters<StreamChatGenerics>}  filterConditions object MongoDB style filters\n   * @param {MemberSort<StreamChatGenerics>} [sort] Sort options, for instance [{created_at: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{name: -1}, {created_at: 1}]\n   * @param {{ limit?: number; offset?: number }} [options] Option object, {limit: 10, offset:10}\n   *\n   * @return {Promise<ChannelMemberAPIResponse<StreamChatGenerics>>} Query Members response\n   */\n  async queryMembers(\n    filterConditions: UserFilters<StreamChatGenerics>,\n    sort: MemberSort<StreamChatGenerics> = [],\n    options: QueryMembersOptions = {},\n  ) {\n    let id: string | undefined;\n    const type = this.type;\n    let members: string[] | ChannelMemberResponse<StreamChatGenerics>[] | undefined;\n    if (this.id) {\n      id = this.id;\n    } else if (this.data?.members && Array.isArray(this.data.members)) {\n      members = this.data.members;\n    }\n    // Return a list of members\n    return await this.getClient().get<ChannelMemberAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + '/members',\n      {\n        payload: {\n          type,\n          id,\n          members,\n          sort: normalizeQuerySort(sort),\n          filter_conditions: filterConditions,\n          ...options,\n        },\n      },\n    );\n  }\n\n  /**\n   * sendReaction - Send a reaction about a message\n   *\n   * @param {string} messageID the message id\n   * @param {Reaction<StreamChatGenerics>} reaction the reaction object for instance {type: 'love'}\n   * @param {{ enforce_unique?: boolean, skip_push?: boolean }} [options] Option object, {enforce_unique: true, skip_push: true} to override any existing reaction or skip sending push notifications\n   *\n   * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  async sendReaction(\n    messageID: string,\n    reaction: Reaction<StreamChatGenerics>,\n    options?: { enforce_unique?: boolean; skip_push?: boolean },\n  ) {\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    if (!reaction || Object.keys(reaction).length === 0) {\n      throw Error(`Reaction object is missing`);\n    }\n    return await this.getClient().post<ReactionAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${messageID}/reaction`,\n      {\n        reaction,\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * deleteReaction - Delete a reaction by user and type\n   *\n   * @param {string} messageID the id of the message from which te remove the reaction\n   * @param {string} reactionType the type of reaction that should be removed\n   * @param {string} [user_id] the id of the user (used only for server side request) default null\n   *\n   * @return {Promise<ReactionAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  deleteReaction(messageID: string, reactionType: string, user_id?: string) {\n    this._checkInitialized();\n    if (!reactionType || !messageID) {\n      throw Error('Deleting a reaction requires specifying both the message and reaction type');\n    }\n\n    const url = this.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n    //provided when server side request\n    if (user_id) {\n      return this.getClient().delete<ReactionAPIResponse<StreamChatGenerics>>(url, { user_id });\n    }\n\n    return this.getClient().delete<ReactionAPIResponse<StreamChatGenerics>>(url, {});\n  }\n\n  /**\n   * update - Edit the channel's custom properties\n   *\n   * @param {ChannelData<StreamChatGenerics>} channelData The object to update the custom properties of this channel with\n   * @param {Message<StreamChatGenerics>} [updateMessage] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async update(\n    channelData: Partial<ChannelData<StreamChatGenerics>> | Partial<ChannelResponse<StreamChatGenerics>> = {},\n    updateMessage?: Message<StreamChatGenerics>,\n    options?: ChannelUpdateOptions,\n  ) {\n    // Strip out reserved names that will result in API errors.\n    const reserved = [\n      'config',\n      'cid',\n      'created_by',\n      'id',\n      'member_count',\n      'type',\n      'created_at',\n      'updated_at',\n      'last_message_at',\n      'own_capabilities',\n    ];\n    reserved.forEach((key) => {\n      delete channelData[key];\n    });\n\n    return await this._update({\n      message: updateMessage,\n      data: channelData,\n      ...options,\n    });\n  }\n\n  /**\n   * updatePartial - partial update channel properties\n   *\n   * @param {PartialUpdateChannel<StreamChatGenerics>} partial update request\n   *\n   * @return {Promise<PartialUpdateChannelAPIResponse<StreamChatGenerics>>}\n   */\n  async updatePartial(update: PartialUpdateChannel<StreamChatGenerics>) {\n    const data = await this.getClient().patch<PartialUpdateChannelAPIResponse<StreamChatGenerics>>(\n      this._channelURL(),\n      update,\n    );\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * enableSlowMode - enable slow mode\n   *\n   * @param {number} coolDownInterval the cooldown interval in seconds\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async enableSlowMode(coolDownInterval: number) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      cooldown: coolDownInterval,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * disableSlowMode - disable slow mode\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async disableSlowMode() {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      cooldown: 0,\n    });\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * delete - Delete the channel. Messages are permanently removed.\n   *\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {Promise<DeleteChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async delete(options: { hard_delete?: boolean } = {}) {\n    return await this.getClient().delete<DeleteChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), {\n      ...options,\n    });\n  }\n\n  /**\n   * truncate - Removes all messages from the channel\n   * @param {TruncateOptions<StreamChatGenerics>} [options] Defines truncation options\n   * @return {Promise<TruncateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async truncate(options: TruncateOptions<StreamChatGenerics> = {}) {\n    return await this.getClient().post<TruncateChannelAPIResponse<StreamChatGenerics>>(\n      this._channelURL() + '/truncate',\n      options,\n    );\n  }\n\n  /**\n   * acceptInvite - accept invitation to the channel\n   *\n   * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async acceptInvite(options: InviteOptions<StreamChatGenerics> = {}) {\n    return await this._update({ accept_invite: true, ...options });\n  }\n\n  /**\n   * rejectInvite - reject invitation to the channel\n   *\n   * @param {InviteOptions<StreamChatGenerics>} [options] The object to update the custom properties of this channel with\n   *\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async rejectInvite(options: InviteOptions<StreamChatGenerics> = {}) {\n    return await this._update({ reject_invite: true, ...options });\n  }\n\n  /**\n   * addMembers - add members to the channel\n   *\n   * @param {{user_id: string, channel_role?: Role}[]} members An array of members to add to the channel\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async addMembers(\n    members: string[] | { user_id: string; channel_role?: Role }[],\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ add_members: members, message, ...options });\n  }\n\n  /**\n   * addModerators - add moderators to the channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async addModerators(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ add_moderators: members, message, ...options });\n  }\n\n  /**\n   * assignRoles - sets member roles in a channel\n   *\n   * @param {{channel_role: Role, user_id: string}[]} roles List of role assignments\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async assignRoles(\n    roles: { channel_role: Role; user_id: string }[],\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ assign_roles: roles, message, ...options });\n  }\n\n  /**\n   * inviteMembers - invite members to the channel\n   *\n   * @param {{user_id: string, channel_role?: Role}[]} members An array of members to invite to the channel\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async inviteMembers(\n    members: { user_id: string; channel_role?: Role }[] | string[],\n    message?: Message<StreamChatGenerics>,\n    options: ChannelUpdateOptions = {},\n  ) {\n    return await this._update({ invites: members, message, ...options });\n  }\n\n  /**\n   * removeMembers - remove members from channel\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async removeMembers(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ remove_members: members, message, ...options });\n  }\n\n  /**\n   * demoteModerators - remove moderator role from channel members\n   *\n   * @param {string[]} members An array of member identifiers\n   * @param {Message<StreamChatGenerics>} [message] Optional message object for channel members notification\n   * @param {ChannelUpdateOptions} [options] Option object, configuration to control the behavior while updating\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async demoteModerators(members: string[], message?: Message<StreamChatGenerics>, options: ChannelUpdateOptions = {}) {\n    return await this._update({ demote_moderators: members, message, ...options });\n  }\n\n  /**\n   * _update - executes channel update request\n   * @param payload Object Update Channel payload\n   * @return {Promise<UpdateChannelAPIResponse<StreamChatGenerics>>} The server response\n   * TODO: introduce new type instead of Object in the next major update\n   */\n  async _update(payload: Object) {\n    const data = await this.getClient().post<UpdateChannelAPIResponse<StreamChatGenerics>>(this._channelURL(), payload);\n    this.data = data.channel;\n    return data;\n  }\n\n  /**\n   * mute - mutes the current channel\n   * @param {{ user_id?: string, expiration?: string }} opts expiration in minutes or user_id\n   * @return {Promise<MuteChannelAPIResponse<StreamChatGenerics>>} The server response\n   *\n   * example with expiration:\n   * await channel.mute({expiration: moment.duration(2, 'weeks')});\n   *\n   * example server side:\n   * await channel.mute({user_id: userId});\n   *\n   */\n  async mute(opts: { expiration?: number; user_id?: string } = {}) {\n    return await this.getClient().post<MuteChannelAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + '/moderation/mute/channel',\n      { channel_cid: this.cid, ...opts },\n    );\n  }\n\n  /**\n   * unmute - mutes the current channel\n   * @param {{ user_id?: string}} opts user_id\n   * @return {Promise<APIResponse>} The server response\n   *\n   * example server side:\n   * await channel.unmute({user_id: userId});\n   */\n  async unmute(opts: { user_id?: string } = {}) {\n    return await this.getClient().post<APIResponse>(this.getClient().baseURL + '/moderation/unmute/channel', {\n      channel_cid: this.cid,\n      ...opts,\n    });\n  }\n\n  /**\n   * muteStatus - returns the mute status for the current channel\n   * @return {{ muted: boolean; createdAt: Date | null; expiresAt: Date | null }} { muted: true | false, createdAt: Date | null, expiresAt: Date | null}\n   */\n  muteStatus(): {\n    createdAt: Date | null;\n    expiresAt: Date | null;\n    muted: boolean;\n  } {\n    this._checkInitialized();\n    return this.getClient()._muteStatus(this.cid);\n  }\n\n  sendAction(messageID: string, formData: Record<string, string>) {\n    this._checkInitialized();\n    if (!messageID) {\n      throw Error(`Message id is missing`);\n    }\n    return this.getClient().post<SendMessageAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${messageID}/action`,\n      {\n        message_id: messageID,\n        form_data: formData,\n        id: this.id,\n        type: this.type,\n      },\n    );\n  }\n\n  /**\n   * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n   * Call this on every keystroke\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async keystroke(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    const now = new Date();\n    const diff = this.lastTypingEvent && now.getTime() - this.lastTypingEvent.getTime();\n    this.lastKeyStroke = now;\n    this.isTyping = true;\n    // send a typing.start every 2 seconds\n    if (diff === null || diff > 2000) {\n      this.lastTypingEvent = new Date();\n      await this.sendEvent({\n        type: 'typing.start',\n        parent_id,\n      } as Event<StreamChatGenerics>);\n    }\n  }\n\n  /**\n   * stopTyping - Sets last typing to null and sends the typing.stop event\n   * @see {@link https://getstream.io/chat/docs/typing_indicators/?language=js|Docs}\n   * @param {string} [parent_id] set this field to `message.id` to indicate that typing event is happening in a thread\n   */\n  async stopTyping(parent_id?: string) {\n    if (!this.getConfig()?.typing_events) {\n      return;\n    }\n    this.lastTypingEvent = null;\n    this.isTyping = false;\n    await this.sendEvent({\n      type: 'typing.stop',\n      parent_id,\n    } as Event<StreamChatGenerics>);\n  }\n\n  /**\n   * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n   *\n   * @return {ReturnType<ChannelState<StreamChatGenerics>['formatMessage']> | undefined} Description\n   */\n  lastMessage() {\n    // get last 5 messages, sort, return the latest\n    // get a slice of the last 5\n    let min = this.state.latestMessages.length - 5;\n    if (min < 0) {\n      min = 0;\n    }\n    const max = this.state.latestMessages.length + 1;\n    const messageSlice = this.state.latestMessages.slice(min, max);\n\n    // sort by pk desc\n    messageSlice.sort((a, b) => b.created_at.getTime() - a.created_at.getTime());\n\n    return messageSlice[0];\n  }\n\n  /**\n   * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n   *\n   * @param {MarkReadOptions<StreamChatGenerics>} data\n   * @return {Promise<EventAPIResponse<StreamChatGenerics> | null>} Description\n   */\n  async markRead(data: MarkReadOptions<StreamChatGenerics> = {}) {\n    this._checkInitialized();\n\n    if (!this.getConfig()?.read_events) {\n      return Promise.resolve(null);\n    }\n\n    return await this.getClient().post<EventAPIResponse<StreamChatGenerics>>(this._channelURL() + '/read', {\n      ...data,\n    });\n  }\n\n  /**\n   * clean - Cleans the channel state and fires stop typing if needed\n   */\n  clean() {\n    if (this.lastKeyStroke) {\n      const now = new Date();\n      const diff = now.getTime() - this.lastKeyStroke.getTime();\n      if (diff > 1000 && this.isTyping) {\n        logChatPromiseExecution(this.stopTyping(), 'stop typing event');\n      }\n    }\n\n    this.state.clean();\n  }\n\n  /**\n   * watch - Loads the initial channel state and watches for changes\n   *\n   * @param {ChannelQueryOptions<StreamChatGenerics>} options additional options for the query endpoint\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The server response\n   */\n  async watch(options?: ChannelQueryOptions<StreamChatGenerics>) {\n    const defaultOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    if (!this.getClient()._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    const combined = { ...defaultOptions, ...options };\n    const state = await this.query(combined, 'latest');\n    this.initialized = true;\n    this.data = state.channel;\n\n    this._client.logger('info', `channel:watch() - started watching channel ${this.cid}`, {\n      tags: ['channel'],\n      channel: this,\n    });\n    return state;\n  }\n\n  /**\n   * stopWatching - Stops watching the channel\n   *\n   * @return {Promise<APIResponse>} The server response\n   */\n  async stopWatching() {\n    const response = await this.getClient().post<APIResponse>(this._channelURL() + '/stop-watching', {});\n\n    this._client.logger('info', `channel:watch() - stopped watching channel ${this.cid}`, {\n      tags: ['channel'],\n      channel: this,\n    });\n\n    return response;\n  }\n\n  /**\n   * getReplies - List the message replies for a parent message\n   *\n   * @param {string} parent_id The message parent id, ie the top of the thread\n   * @param {MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   *\n   * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n   */\n  async getReplies(\n    parent_id: string,\n    options: MessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string },\n  ) {\n    const data = await this.getClient().get<GetRepliesAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${parent_id}/replies`,\n      {\n        ...options,\n      },\n    );\n\n    // add any messages to our thread state\n    if (data.messages) {\n      this.state.addMessagesSorted(data.messages);\n    }\n\n    return data;\n  }\n\n  /**\n   * getPinnedMessages - List list pinned messages of the channel\n   *\n   * @param {PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string }} options Pagination params, ie {limit:10, id_lte: 10}\n   * @param {PinnedMessagesSort} sort defines sorting direction of pinned messages\n   *\n   * @return {Promise<GetRepliesAPIResponse<StreamChatGenerics>>} A response with a list of messages\n   */\n  async getPinnedMessages(\n    options: PinnedMessagePaginationOptions & { user?: UserResponse<StreamChatGenerics>; user_id?: string },\n    sort: PinnedMessagesSort = [],\n  ) {\n    return await this.getClient().get<GetRepliesAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/channels/${this.type}/${this.id}/pinned_messages`,\n      {\n        payload: {\n          ...options,\n          sort: normalizeQuerySort(sort),\n        },\n      },\n    );\n  }\n\n  /**\n   * getReactions - List the reactions, supports pagination\n   *\n   * @param {string} message_id The message id\n   * @param {{ limit?: number; offset?: number }} options The pagination options\n   *\n   * @return {Promise<GetReactionsAPIResponse<StreamChatGenerics>>} Server response\n   */\n  getReactions(message_id: string, options: { limit?: number; offset?: number }) {\n    return this.getClient().get<GetReactionsAPIResponse<StreamChatGenerics>>(\n      this.getClient().baseURL + `/messages/${message_id}/reactions`,\n      {\n        ...options,\n      },\n    );\n  }\n\n  /**\n   * getMessagesById - Retrieves a list of messages by ID\n   *\n   * @param {string[]} messageIds The ids of the messages to retrieve from this channel\n   *\n   * @return {Promise<GetMultipleMessagesAPIResponse<StreamChatGenerics>>} Server response\n   */\n  getMessagesById(messageIds: string[]) {\n    return this.getClient().get<GetMultipleMessagesAPIResponse<StreamChatGenerics>>(this._channelURL() + '/messages', {\n      ids: messageIds.join(','),\n    });\n  }\n\n  /**\n   * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n   * @return {Date | null | undefined}\n   */\n  lastRead() {\n    this._checkInitialized();\n    const { userID } = this.getClient();\n    if (userID) {\n      return this.state.read[userID] ? this.state.read[userID].last_read : null;\n    }\n  }\n\n  _countMessageAsUnread(message: FormatMessageResponse<StreamChatGenerics> | MessageResponse<StreamChatGenerics>) {\n    if (message.shadowed) return false;\n    if (message.silent) return false;\n    if (message.parent_id && !message.show_in_channel) return false;\n    if (message.user?.id === this.getClient().userID) return false;\n    if (message.user?.id && this.getClient().userMuteStatus(message.user.id)) return false;\n    if (message.type === 'system') return false;\n\n    // Return false if channel doesn't allow read events.\n    if (Array.isArray(this.data?.own_capabilities) && !this.data?.own_capabilities.includes('read-events'))\n      return false;\n\n    if (this.muteStatus().muted) return false;\n\n    return true;\n  }\n\n  /**\n   * countUnread - Count of unread messages\n   *\n   * @param {Date | null} [lastRead] lastRead the time that the user read a message, defaults to current user's read state\n   *\n   * @return {number} Unread count\n   */\n  countUnread(lastRead?: Date | null) {\n    if (!lastRead) return this.state.unreadCount;\n\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (message.created_at > lastRead && this._countMessageAsUnread(message)) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * countUnreadMentions - Count the number of unread messages mentioning the current user\n   *\n   * @return {number} Unread mentions count\n   */\n  countUnreadMentions() {\n    const lastRead = this.lastRead();\n    const userID = this.getClient().userID;\n\n    let count = 0;\n    for (let i = 0; i < this.state.latestMessages.length; i += 1) {\n      const message = this.state.latestMessages[i];\n      if (\n        this._countMessageAsUnread(message) &&\n        (!lastRead || message.created_at > lastRead) &&\n        message.mentioned_users?.some((user) => user.id === userID)\n      ) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * create - Creates a new channel\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} The Server Response\n   */\n  create = async () => {\n    const options = {\n      watch: false,\n      state: false,\n      presence: false,\n    };\n    return await this.query(options, 'latest');\n  };\n\n  /**\n   * query - Query the API, get messages, members or other channel fields\n   *\n   * @param {ChannelQueryOptions<StreamChatGenerics>} options The query options\n   * @param {MessageSetType} messageSetToAddToIfDoesNotExist It's possible to load disjunct sets of a channel's messages into state, use `current` to load the initial channel state or if you want to extend the currently displayed messages, use `latest` if you want to load/extend the latest messages, `new` is used for loading a specific message and it's surroundings\n   *\n   * @return {Promise<QueryChannelAPIResponse<StreamChatGenerics>>} Returns a query response\n   */\n  async query(\n    options: ChannelQueryOptions<StreamChatGenerics>,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'current',\n  ) {\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.getClient().wsPromise;\n\n    let queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n    if (this.id) {\n      queryURL += `/${this.id}`;\n    }\n\n    const state = await this.getClient().post<QueryChannelAPIResponse<StreamChatGenerics>>(queryURL + '/query', {\n      data: this._data,\n      state: true,\n      ...options,\n    });\n\n    // update the channel id if it was missing\n    if (!this.id) {\n      this.id = state.channel.id;\n      this.cid = state.channel.cid;\n      // set the channel as active...\n\n      const membersStr = state.members\n        .map((member) => member.user_id || member.user?.id)\n        .sort()\n        .join(',');\n      const tempChannelCid = `${this.type}:!members-${membersStr}`;\n\n      if (tempChannelCid in this.getClient().activeChannels) {\n        // This gets set in `client.channel()` function, when channel is created\n        // using members, not id.\n        delete this.getClient().activeChannels[tempChannelCid];\n      }\n\n      if (!(this.cid in this.getClient().activeChannels)) {\n        this.getClient().activeChannels[this.cid] = this;\n      }\n    }\n\n    this.getClient()._addChannelConfig(state.channel);\n\n    // add any messages to our channel state\n    const { messageSet } = this._initializeState(state, messageSetToAddToIfDoesNotExist);\n\n    this.data = state.channel;\n\n    this.getClient().dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels: [state],\n        isLatestMessageSet: messageSet.isLatest,\n      },\n    });\n\n    return state;\n  }\n\n  /**\n   * banUser - Bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options: BanUserOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().banUser(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * hides the channel from queryChannels for the user until a message is added\n   * If clearHistory is set to true - all messages will be removed for the user\n   *\n   * @param {string | null} userId\n   * @param {boolean} clearHistory\n   * @returns {Promise<APIResponse>}\n   */\n  async hide(userId: string | null = null, clearHistory = false) {\n    this._checkInitialized();\n\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/hide`, {\n      user_id: userId,\n      clear_history: clearHistory,\n    });\n  }\n\n  /**\n   * removes the hidden status for a channel\n   *\n   * @param {string | null} userId\n   * @returns {Promise<APIResponse>}\n   */\n  async show(userId: string | null = null) {\n    this._checkInitialized();\n    return await this.getClient().post<APIResponse>(`${this._channelURL()}/show`, {\n      user_id: userId,\n    });\n  }\n\n  /**\n   * unbanUser - Removes the bans for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().unbanUser(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * shadowBan - Shadow bans a user from a channel\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} options\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options: BanUserOptions<StreamChatGenerics>) {\n    this._checkInitialized();\n    return await this.getClient().shadowBan(targetUserID, {\n      ...options,\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * removeShadowBan - Removes the shadow ban for a user on a channel\n   *\n   * @param {string} targetUserID\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string) {\n    this._checkInitialized();\n    return await this.getClient().removeShadowBan(targetUserID, {\n      type: this.type,\n      id: this.id,\n    });\n  }\n\n  /**\n   * createCall - creates a call for the current channel\n   *\n   * @param {CreateCallOptions} options\n   * @returns {Promise<CreateCallResponse>}\n   */\n  async createCall(options: CreateCallOptions) {\n    return await this.getClient().post<CreateCallResponse>(this._channelURL() + '/call', options);\n  }\n\n  /**\n   * on - Listen to events on this channel.\n   *\n   * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * channel.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<StreamChatGenerics> | EventTypes} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n   */\n  on(eventType: EventTypes, callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler<StreamChatGenerics> | EventTypes,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this._client.logger('info', `Attaching listener for ${key} event on channel ${this.cid}`, {\n      tags: ['event', 'channel'],\n      channel: this,\n    });\n\n    this.listeners[key].push(callback);\n\n    return {\n      unsubscribe: () => {\n        this._client.logger('info', `Removing listener for ${key} event from channel ${this.cid}`, {\n          tags: ['event', 'channel'],\n          channel: this,\n        });\n\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(eventType: EventTypes, callback: EventHandler<StreamChatGenerics>): void;\n  off(callback: EventHandler<StreamChatGenerics>): void;\n  off(\n    callbackOrString: EventHandler<StreamChatGenerics> | EventTypes,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): void {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this._client.logger('info', `Removing listener for ${key} event from channel ${this.cid}`, {\n      tags: ['event', 'channel'],\n      channel: this,\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _handleChannelEvent(event: Event<StreamChatGenerics>) {\n    const channel = this;\n    this._client.logger(\n      'info',\n      `channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n      {\n        tags: ['event', 'channel'],\n        channel: this,\n      },\n    );\n\n    const channelState = channel.state;\n    switch (event.type) {\n      case 'typing.start':\n        if (event.user?.id) {\n          channelState.typing[event.user.id] = event;\n        }\n        break;\n      case 'typing.stop':\n        if (event.user?.id) {\n          delete channelState.typing[event.user.id];\n        }\n        break;\n      case 'message.read':\n        if (event.user?.id && event.created_at) {\n          channelState.read[event.user.id] = {\n            // because in client.ts the handleEvent call that flows to this sets this `event.received_at = new Date();`\n            last_read: new Date(event.created_at),\n            user: event.user,\n            unread_messages: 0,\n          };\n\n          if (event.user?.id === this.getClient().user?.id) {\n            channelState.unreadCount = 0;\n          }\n        }\n        break;\n      case 'user.watching.start':\n      case 'user.updated':\n        if (event.user?.id) {\n          channelState.watchers[event.user.id] = event.user;\n        }\n        break;\n      case 'user.watching.stop':\n        if (event.user?.id) {\n          delete channelState.watchers[event.user.id];\n        }\n        break;\n      case 'message.deleted':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          if (event.hard_delete) channelState.removeMessage(event.message);\n          else channelState.addMessageSorted(event.message, false, false);\n\n          channelState.removeQuotedMessageReferences(event.message);\n\n          if (event.message.pinned) {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'message.new':\n        if (event.message) {\n          /* if message belongs to current user, always assume timestamp is changed to filter it out and add again to avoid duplication */\n          const ownMessage = event.user?.id === this.getClient().user?.id;\n          const isThreadMessage = event.message.parent_id && !event.message.show_in_channel;\n\n          if (this.state.isUpToDate || isThreadMessage) {\n            channelState.addMessageSorted(event.message, ownMessage);\n          }\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n\n          if (event.user?.id) {\n            for (const userId in channelState.read) {\n              if (userId === event.user.id) {\n                channelState.read[event.user.id] = {\n                  last_read: new Date(event.created_at as string),\n                  user: event.user,\n                  unread_messages: 0,\n                };\n              } else {\n                channelState.read[userId].unread_messages += 1;\n              }\n            }\n          }\n\n          if (ownMessage) {\n            channelState.unreadCount = 0;\n          } else if (this._countMessageAsUnread(event.message)) {\n            channelState.unreadCount = channelState.unreadCount + 1;\n          }\n        }\n        break;\n      case 'message.updated':\n        if (event.message) {\n          this._extendEventWithOwnReactions(event);\n          channelState.addMessageSorted(event.message, false, false);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          } else {\n            channelState.removePinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'channel.truncated':\n        if (event.channel?.truncated_at) {\n          const truncatedAt = +new Date(event.channel.truncated_at);\n\n          channelState.messageSets.forEach((messageSet, messageSetIndex) => {\n            messageSet.messages.forEach(({ created_at: createdAt, id }) => {\n              if (truncatedAt > +createdAt) channelState.removeMessage({ id, messageSetIndex });\n            });\n          });\n\n          channelState.pinnedMessages.forEach(({ id, created_at: createdAt }) => {\n            if (truncatedAt > +createdAt)\n              channelState.removePinnedMessage({ id } as MessageResponse<StreamChatGenerics>);\n          });\n        } else {\n          channelState.clearMessages();\n        }\n\n        channelState.unreadCount = 0;\n        // system messages don't increment unread counts\n        if (event.message) {\n          channelState.addMessageSorted(event.message);\n          if (event.message.pinned) {\n            channelState.addPinnedMessage(event.message);\n          }\n        }\n        break;\n      case 'member.added':\n      case 'member.updated':\n        if (event.member?.user_id) {\n          channelState.members[event.member.user_id] = event.member;\n        }\n        break;\n      case 'member.removed':\n        if (event.user?.id) {\n          delete channelState.members[event.user.id];\n        }\n        break;\n      case 'channel.updated':\n        if (event.channel) {\n          channel.data = {\n            ...event.channel,\n            hidden: event.channel?.hidden ?? channel.data?.hidden,\n            own_capabilities: event.channel?.own_capabilities ?? channel.data?.own_capabilities,\n          };\n        }\n        break;\n      case 'reaction.new':\n        if (event.message && event.reaction) {\n          event.message = channelState.addReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.deleted':\n        if (event.reaction) {\n          event.message = channelState.removeReaction(event.reaction, event.message);\n        }\n        break;\n      case 'reaction.updated':\n        if (event.reaction) {\n          // assuming reaction.updated is only called if enforce_unique is true\n          event.message = channelState.addReaction(event.reaction, event.message, true);\n        }\n        break;\n      case 'channel.hidden':\n        if (event.clear_history) {\n          channelState.clearMessages();\n        }\n        break;\n      default:\n    }\n\n    // any event can send over the online count\n    if (event.watcher_count !== undefined) {\n      channel.state.watcher_count = event.watcher_count;\n    }\n  }\n\n  _callChannelListeners = (event: Event<StreamChatGenerics>) => {\n    const channel = this;\n    // gather and call the listeners\n    const listeners = [];\n    if (channel.listeners.all) {\n      listeners.push(...channel.listeners.all);\n    }\n    if (channel.listeners[event.type]) {\n      listeners.push(...channel.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      if (typeof listener !== 'string') {\n        listener(event);\n      }\n    }\n  };\n\n  /**\n   * _channelURL - Returns the channel url\n   *\n   * @return {string} The channel url\n   */\n  _channelURL = () => {\n    if (!this.id) {\n      throw new Error('channel id is not defined');\n    }\n    return `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n  };\n\n  _checkInitialized() {\n    if (!this.initialized && !this.offlineMode && !this.getClient()._isUsingServerAuth()) {\n      throw Error(\n        `Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n      );\n    }\n  }\n\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  _initializeState(\n    state: ChannelAPIResponse<StreamChatGenerics>,\n    messageSetToAddToIfDoesNotExist: MessageSetType = 'latest',\n  ) {\n    const { state: clientState, user, userID } = this.getClient();\n\n    // add the Users\n    if (state.members) {\n      for (const member of state.members) {\n        if (member.user) {\n          clientState.updateUserReference(member.user, this.cid);\n        }\n      }\n    }\n\n    this.state.membership = state.membership || {};\n\n    const messages = state.messages || [];\n    if (!this.state.messages) {\n      this.state.initMessages();\n    }\n    const { messageSet } = this.state.addMessagesSorted(messages, false, true, true, messageSetToAddToIfDoesNotExist);\n\n    if (!this.state.pinnedMessages) {\n      this.state.pinnedMessages = [];\n    }\n    this.state.addPinnedMessages(state.pinned_messages || []);\n    if (state.pending_messages) {\n      this.state.pending_messages = state.pending_messages;\n    }\n    this.state.watcher_count = state.watcher_count || 0;\n    // convert the arrays into objects for easier syncing...\n    if (state.watchers) {\n      for (const watcher of state.watchers) {\n        if (watcher) {\n          clientState.updateUserReference(watcher, this.cid);\n          this.state.watchers[watcher.id] = watcher;\n        }\n      }\n    }\n\n    // initialize read state to last message or current time if the channel is empty\n    // if the user is a member, this value will be overwritten later on otherwise this ensures\n    // that everything up to this point is not marked as unread\n    if (userID != null) {\n      const last_read = this.state.last_message_at || new Date();\n      if (user) {\n        this.state.read[user.id] = {\n          user,\n          last_read,\n          unread_messages: 0,\n        };\n      }\n    }\n\n    // apply read state if part of the state\n    if (state.read) {\n      for (const read of state.read) {\n        this.state.read[read.user.id] = {\n          last_read: new Date(read.last_read),\n          unread_messages: read.unread_messages ?? 0,\n          user: read.user,\n        };\n\n        if (read.user.id === user?.id) {\n          this.state.unreadCount = this.state.read[read.user.id].unread_messages;\n        }\n      }\n    }\n\n    if (state.members) {\n      this.state.members = state.members.reduce((acc, member) => {\n        if (member.user) {\n          acc[member.user.id] = member;\n        }\n        return acc;\n      }, {} as ChannelState<StreamChatGenerics>['members']);\n    }\n\n    return {\n      messageSet,\n    };\n  }\n\n  _extendEventWithOwnReactions(event: Event<StreamChatGenerics>) {\n    if (!event.message) {\n      return;\n    }\n    const message = this.state.findMessage(event.message.id, event.message.parent_id);\n    if (message) {\n      event.message.own_reactions = message.own_reactions;\n    }\n  }\n\n  _disconnect() {\n    this._client.logger('info', `channel:disconnect() - Disconnecting the channel ${this.cid}`, {\n      tags: ['connection', 'channel'],\n      channel: this,\n    });\n\n    this.disconnected = true;\n    this.state.setIsUpToDate(false);\n  }\n}\n", "import { UserResponse, ExtendableGenerics, DefaultGenerics } from './types';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  users: {\n    [key: string]: UserResponse<StreamChatGenerics>;\n  };\n  userChannelReferences: { [key: string]: { [key: string]: boolean } };\n  constructor() {\n    // show the status for a certain user...\n    // ie online, offline etc\n    this.users = {};\n    // store which channels contain references to the specified user...\n    this.userChannelReferences = {};\n  }\n\n  updateUsers(users: UserResponse<StreamChatGenerics>[]) {\n    for (const user of users) {\n      this.updateUser(user);\n    }\n  }\n\n  updateUser(user?: UserResponse<StreamChatGenerics>) {\n    if (user != null) {\n      this.users[user.id] = user;\n    }\n  }\n\n  updateUserReference(user: UserResponse<StreamChatGenerics>, channelID: string) {\n    if (user == null) {\n      return;\n    }\n    this.updateUser(user);\n    if (!this.userChannelReferences[user.id]) {\n      this.userChannelReferences[user.id] = {};\n    }\n    this.userChannelReferences[user.id][channelID] = true;\n  }\n\n  deleteAllChannelReference(channelID: string) {\n    for (const userID in this.userChannelReferences) {\n      delete this.userChannelReferences[userID][channelID];\n    }\n  }\n}\n", "import axios from 'axios';\nimport { StableWSConnection } from './connection';\nimport { randomId, sleep } from './utils';\n\nexport type InsightTypes = 'ws_fatal' | 'ws_success_after_failure' | 'http_hi_failed';\nexport class InsightMetrics {\n  connectionStartTimestamp: number | null;\n  wsConsecutiveFailures: number;\n  wsTotalFailures: number;\n  instanceClientId: string;\n\n  constructor() {\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n  }\n}\n\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */\nexport const postInsights = async (insightType: InsightTypes, insights: Record<string, unknown>) => {\n  const maxAttempts = 3;\n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      await axios.post(`https://chat-insights.getstream.io/insights/${insightType}`, insights);\n    } catch (e) {\n      await sleep((i + 1) * 3000);\n      continue;\n    }\n    break;\n  }\n};\n\nexport function buildWsFatalInsight(connection: StableWSConnection, event: Record<string, unknown>) {\n  return {\n    ...event,\n    ...buildWsBaseInsight(connection),\n  };\n}\n\nfunction buildWsBaseInsight(connection: StableWSConnection) {\n  const { client } = connection;\n  return {\n    ready_state: connection.ws?.readyState,\n    url: connection._buildUrl(),\n    api_key: client.key,\n    start_ts: client.insightMetrics.connectionStartTimestamp,\n    end_ts: new Date().getTime(),\n    auth_type: client.getAuthType(),\n    token: client.tokenManager.token,\n    user_id: client.userID,\n    user_details: client._user,\n    device: client.options.device,\n    client_id: connection.connectionID,\n    ws_details: connection.ws,\n    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n    ws_total_failures: client.insightMetrics.wsTotalFailures,\n    request_id: connection.requestID,\n    online: typeof navigator !== 'undefined' ? navigator?.onLine : null,\n    user_agent: typeof navigator !== 'undefined' ? navigator?.userAgent : null,\n    instance_client_id: client.insightMetrics.instanceClientId,\n  };\n}\n\nexport function buildWsSuccessAfterFailureInsight(connection: StableWSConnection) {\n  return buildWsBaseInsight(connection);\n}\n", "import WebSocket from 'isomorphic-ws';\nimport {\n  chatCodes,\n  convertErrorToJson,\n  sleep,\n  retryInterval,\n  randomId,\n  removeConnectionEventListeners,\n  addConnectionEventListeners,\n} from './utils';\nimport { buildWsFatalInsight, buildWsSuccessAfterFailureInsight, postInsights } from './insights';\nimport { ConnectAPIResponse, ConnectionOpen, ExtendableGenerics, DefaultGenerics, UR, LogLevel } from './types';\nimport { StreamChat } from './client';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent): res is WebSocket.CloseEvent =>\n  (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent): res is WebSocket.ErrorEvent =>\n  (res as WebSocket.ErrorEvent).error !== undefined;\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  // global from constructor\n  client: StreamChat<StreamChatGenerics>;\n\n  // local vars\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse<StreamChatGenerics>;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isDisconnected: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & { code?: string | number; isWSFailure?: boolean; StatusCode?: string | number },\n  ) => void;\n  requestID: string | undefined;\n  resolvePromise?: (value: ConnectionOpen<StreamChatGenerics>) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    /** StreamChat client */\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** To avoid reconnect if client is disconnected */\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n    this.isResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'connection:' + msg, { tags: ['connection'], ...extra });\n  }\n\n  setClient(client: StreamChat<StreamChatGenerics>) {\n    this.client = client;\n  }\n\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15000) {\n    if (this.isConnecting) {\n      throw Error(`You've called connect twice, can only attempt 1 connection at the time`);\n    }\n\n    this.isDisconnected = false;\n\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n\n      this._log(`connect() - Established ws connection with healthcheck: ${healthCheck}`);\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('connect() - WS failure due to expired token, so going to try to reload token and reconnect');\n        this._reconnect({ refreshToken: true });\n      } else if (!error.isWSFailure) {\n        // API rejected the connection and we should not retry\n        throw new Error(\n          JSON.stringify({\n            code: error.code,\n            StatusCode: error.StatusCode,\n            message: error.message,\n            isWSFailure: error.isWSFailure,\n          }),\n        );\n      }\n    }\n\n    return await this._waitForHealthy(timeout);\n  }\n\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  async _waitForHealthy(timeout = 15000) {\n    return Promise.race([\n      (async () => {\n        const interval = 50; // ms\n        for (let i = 0; i <= timeout; i += interval) {\n          try {\n            return await this.connectionOpen;\n          } catch (error) {\n            if (i === timeout) {\n              throw new Error(\n                JSON.stringify({\n                  code: error.code,\n                  StatusCode: error.StatusCode,\n                  message: error.message,\n                  isWSFailure: error.isWSFailure,\n                }),\n              );\n            }\n            await sleep(interval);\n          }\n        }\n      })(),\n      (async () => {\n        await sleep(timeout);\n        this.isConnecting = false;\n        throw new Error(\n          JSON.stringify({\n            code: '',\n            StatusCode: '',\n            message: 'initial WS connection could not be established',\n            isWSFailure: true,\n          }),\n        );\n      })(),\n    ]);\n  }\n\n  /**\n   * Builds and returns the url for websocket.\n   * @private\n   * @returns url string\n   */\n  _buildUrl = () => {\n    const qs = encodeURIComponent(this.client._buildWSPayload(this.requestID));\n    const token = this.client.tokenManager.getToken();\n\n    return `${this.client.wsBaseURL}/connect?json=${qs}&api_key=${\n      this.client.key\n    }&authorization=${token}&stream-auth-type=${this.client.getAuthType()}&X-Stream-Client=${this.client.getUserAgent()}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this._log(`disconnect() - Closing the websocket connection for wsID ${this.wsID}`);\n\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    removeConnectionEventListeners(this.onlineStatusChanged);\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this._log(`disconnect() - resolving isClosedPromise ${event ? 'with' : 'without'} close frame`, { event });\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 seconds.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this._log(`disconnect() - Manually closed connection by calling client.disconnect()`);\n\n      ws.close(chatCodes.WS_CLOSED_SUCCESS, 'Manually closed connection by calling client.disconnect()');\n    } else {\n      this._log(`disconnect() - ws connection doesn't exist or it is already closed.`);\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ChannelType, CommandType, UserType>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (this.isConnecting || (this.isDisconnected && this.client.options.enableWSFallback)) return; // simply ignore _connect if it's currently trying to connect\n    this.isConnecting = true;\n    this.requestID = randomId();\n    this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch (e) {\n      // token provider has failed before, so try again\n    }\n\n    try {\n      if (!isTokenReady) {\n        this._log(`_connect() - tokenProvider failed before, so going to retry`);\n        await this.client.tokenManager.loadToken();\n      }\n\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`, { wsURL, requestID: this.requestID });\n      this.ws = new WebSocket(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n\n      if (response) {\n        this.connectionID = response.connection_id;\n        if (this.client.insightMetrics.wsConsecutiveFailures > 0 && this.client.options.enableInsights) {\n          postInsights(\n            'ws_success_after_failure',\n            buildWsSuccessAfterFailureInsight((this as unknown) as StableWSConnection),\n          );\n          this.client.insightMetrics.wsConsecutiveFailures = 0;\n        }\n        return response;\n      }\n    } catch (err) {\n      this.isConnecting = false;\n      this._log(`_connect() - Error - `, err);\n      if (this.client.options.enableInsights) {\n        this.client.insightMetrics.wsConsecutiveFailures++;\n        this.client.insightMetrics.wsTotalFailures++;\n\n        const insights = buildWsFatalInsight((this as unknown) as StableWSConnection, convertErrorToJson(err as Error));\n        postInsights?.('ws_fatal', insights);\n      }\n      throw err;\n    }\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(options: { interval?: number; refreshToken?: boolean } = {}): Promise<void> {\n    this._log('_reconnect() - Initiating the reconnect');\n\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (1) since already connecting or healthy');\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (2) since already connecting or healthy');\n      return;\n    }\n\n    if (this.isDisconnected && this.client.options.enableWSFallback) {\n      this._log('_reconnect() - Abort (3) since disconnect() is called');\n      return;\n    }\n\n    this._log('_reconnect() - Destroying current WS connection');\n\n    // cleanup the old connection\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n\n    try {\n      await this._connect();\n      this._log('_reconnect() - Waiting for recoverCallBack');\n      await this.client.recoverState();\n      this._log('_reconnect() - Finished recoverCallBack');\n\n      this.consecutiveFailures = 0;\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (error.code === chatCodes.TOKEN_EXPIRED && !this.client.tokenManager.isStatic()) {\n        this._log('_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect');\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this._log('_reconnect() - WS failure, so going to try to reconnect');\n\n        this._reconnect();\n      }\n    }\n    this._log('_reconnect() - == END ==');\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this._log('onlineStatusChanged() - Status changing to offline');\n      this._setHealth(false);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this._log(`onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`);\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onopen() - onopen callback', { wsID });\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onmessage() - onmessage callback', { event, wsID });\n    const data = typeof event.data === 'string' ? JSON.parse(event.data) : null;\n\n    // we wait till the first message before we consider the connection open..\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose..\n    if (!this.isResolved && data) {\n      this.isResolved = true;\n      if (data.error) {\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      }\n\n      this.resolvePromise?.(data);\n      this._setHealth(true);\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n\n    if (data && data.type === 'health.check') {\n      this.scheduleNextPing();\n    }\n\n    this.client.handleEvent(event);\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onclose() - onclose callback - ' + event.code, { event, wsID });\n\n    if (event.code === chatCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(`WS connection reject with error ${event.reason}`) as Error & WebSocket.CloseEvent;\n\n      error.reason = event.reason;\n      error.code = event.code;\n      error.wasClean = event.wasClean;\n      error.target = event.target;\n\n      this.rejectPromise?.(error);\n      this._log(`onclose() - WS connection reject with error ${event.reason}`, { event });\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this._log(`onclose() - WS connection closed. Calling reconnect ...`, { event });\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n    this.isConnecting = false;\n\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this._log(`onerror() - WS connection resulted into error`, { event });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   *\n   */\n  _setHealth = (healthy: boolean) => {\n    if (healthy === this.isHealthy) return;\n\n    this.isHealthy = healthy;\n\n    if (this.isHealthy) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n      return;\n    }\n\n    // we're offline, wait few seconds and fire and event if still offline\n    setTimeout(() => {\n      if (this.isHealthy) return;\n      this.client.dispatchEvent({ type: 'connection.changed', online: this.isHealthy });\n    }, 5000);\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent, isWSFailure = true) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this._log(`_errorFromWSEvent() - WS failed with code ${code}`, { event }, 'warn');\n\n    const error = new Error(`WS failed with code ${code} and reason - ${message}`) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      this?.ws?.removeAllListeners();\n      this?.ws?.close();\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<ConnectionOpen<StreamChatGenerics>>((resolve, reject) => {\n      this.resolvePromise = resolve;\n      this.rejectPromise = reject;\n    });\n  };\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    if (this.healthCheckTimeoutRef) {\n      clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = setTimeout(() => {\n      // send the healthcheck.., server replies with a health check event\n      const data = [{ type: 'health.check', client_id: this.client.clientID }];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    if (this.connectionCheckTimeoutRef) {\n      clearTimeout(this.connectionCheckTimeoutRef);\n    }\n\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (this.lastEvent && now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout) {\n        this._log('scheduleConnectionCheck - going to reconnect');\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n", "export default null;", "export default null;", "import jwt, { Secret, SignOptions } from 'jsonwebtoken';\nimport crypto from 'crypto';\nimport { encodeBase64, decodeBase64 } from './base64';\nimport { UR } from './types';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserToken\n * @memberof signing\n * @private\n * @param {Secret} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {UR} [extraData] - Extra that should be part of the JWT token\n * @param {SignOptions} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret: Secret, userId: string, extraData: UR = {}, jwtOptions: SignOptions = {}) {\n  if (typeof userId !== 'string') {\n    throw new TypeError('userId should be a string');\n  }\n\n  const payload: { user_id: string } & UR = {\n    user_id: userId,\n    ...extraData,\n  };\n\n  // make sure we return a clear error when jwt is shimmed (ie. browser build)\n  if (jwt == null || jwt.sign == null) {\n    throw Error(\n      `Unable to find jwt crypto, if you are getting this error is probably because you are trying to generate tokens on browser or React Native (or other environment where crypto functions are not available). Please Note: token should only be generated server-side.`,\n    );\n  }\n\n  const opts: SignOptions = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\n  if (payload.iat) {\n    opts.noTimestamp = false;\n  }\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret: Secret, jwtOptions: SignOptions = {}) {\n  const payload = {\n    server: true,\n  };\n\n  const opts: SignOptions = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n  return jwt.sign(payload, apiSecret, opts);\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\n/**\n *\n * @param {string} body the signed message\n * @param {string} secret the shared secret used to generate the signature (Stream API secret)\n * @param {string} signature the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body: string, secret: string, signature: string) {\n  const key = Buffer.from(secret, 'ascii');\n  const hash = crypto.createHmac('sha256', key).update(body).digest('hex');\n  return hash === signature;\n}\n", "import { Secret } from 'jsonwebtoken';\nimport { UserFromToken, JWTServerToken, JWTUserToken } from './signing';\nimport { isFunction } from './utils';\nimport { TokenOrProvider, ExtendableGenerics, DefaultGenerics, UserResponse } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: Secret;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserResponse<StreamChatGenerics>;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: Secret) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n\n    if (this.secret) {\n      this.token = JWTServerToken(this.secret);\n    }\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  setTokenOrProvider = async (tokenOrProvider: TokenOrProvider, user: UserResponse<StreamChatGenerics>) => {\n    this.validateToken(tokenOrProvider, user);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    if (!tokenOrProvider && this.user && this.secret) {\n      this.token = JWTUserToken(this.secret, user.id, {}, {});\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (tokenOrProvider: TokenOrProvider, user: UserResponse<StreamChatGenerics>) => {\n    // allow empty token for anon user\n    if (user && user.anon && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('User token can not be empty');\n    }\n\n    if (tokenOrProvider && typeof tokenOrProvider !== 'string' && !isFunction(tokenOrProvider)) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (user.anon && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (tokenOrProvider != null && (tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)) {\n        throw new Error('userToken does not have a user_id or is not matching with user.id');\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve, reject) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        try {\n          this.token = await this.tokenProvider();\n        } catch (e) {\n          return reject(new Error(`Call to tokenProvider failed with message: ${e}`));\n        }\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && this.user.anon && !this.token) {\n      return this.token;\n    }\n\n    if (this.secret) {\n      return JWTServerToken(this.secret);\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n", "import { AxiosResponse } from 'axios';\nimport { APIErrorResponse } from './types';\n\nexport const APIErrorCodes: Record<string, { name: string; retryable: boolean }> = {\n  '-1': { name: 'InternalSystemError', retryable: true },\n  '2': { name: 'AccessKeyError', retryable: false },\n  '3': { name: 'AuthenticationFailedError', retryable: true },\n  '4': { name: 'InputError', retryable: false },\n  '6': { name: 'DuplicateUsernameError', retryable: false },\n  '9': { name: 'RateLimitError', retryable: true },\n  '16': { name: 'DoesNotExistError', retryable: false },\n  '17': { name: 'NotAllowedError', retryable: false },\n  '18': { name: 'EventNotSupportedError', retryable: false },\n  '19': { name: 'ChannelFeatureNotSupportedError', retryable: false },\n  '20': { name: 'MessageTooLongError', retryable: false },\n  '21': { name: 'MultipleNestingLevelError', retryable: false },\n  '22': { name: 'PayloadTooBigError', retryable: false },\n  '23': { name: 'RequestTimeoutError', retryable: true },\n  '24': { name: 'MaxHeaderSizeExceededError', retryable: false },\n  '40': { name: 'AuthErrorTokenExpired', retryable: false },\n  '41': { name: 'AuthErrorTokenNotValidYet', retryable: false },\n  '42': { name: 'AuthErrorTokenUsedBeforeIssuedAt', retryable: false },\n  '43': { name: 'AuthErrorTokenSignatureInvalid', retryable: false },\n  '44': { name: 'CustomCommandEndpointMissingError', retryable: false },\n  '45': { name: 'CustomCommandEndpointCallError', retryable: true },\n  '46': { name: 'ConnectionIDNotFoundError', retryable: false },\n  '60': { name: 'CoolDownError', retryable: true },\n  '69': { name: 'ErrWrongRegion', retryable: false },\n  '70': { name: 'ErrQueryChannelPermissions', retryable: false },\n  '71': { name: 'ErrTooManyConnections', retryable: true },\n  '99': { name: 'AppSuspendedError', retryable: false },\n};\n\ntype APIError = Error & { code: number; isWSFailure?: boolean };\n\nexport function isAPIError(error: Error): error is APIError {\n  return (error as APIError).code !== undefined;\n}\n\nexport function isErrorRetryable(error: APIError) {\n  if (!error.code) return false;\n  const err = APIErrorCodes[`${error.code}`];\n  if (!err) return false;\n  return err.retryable;\n}\n\nexport function isConnectionIDError(error: APIError) {\n  return error.code === 46; // ConnectionIDNotFoundError\n}\n\nexport function isWSFailure(err: APIError): boolean {\n  if (typeof err.isWSFailure === 'boolean') {\n    return err.isWSFailure;\n  }\n\n  try {\n    return JSON.parse(err.message).isWSFailure;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function isErrorResponse(res: AxiosResponse<unknown>): res is AxiosResponse<APIErrorResponse> {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n", "import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';\nimport { StreamChat } from './client';\nimport { addConnectionEventListeners, removeConnectionEventListeners, retryInterval, sleep } from './utils';\nimport { isAPIError, isConnectionIDError, isErrorRetryable } from './errors';\nimport { ConnectionOpen, Event, UR, ExtendableGenerics, DefaultGenerics, LogLevel } from './types';\n\nexport enum ConnectionState {\n  Closed = 'CLOSED',\n  Connected = 'CONNECTED',\n  Connecting = 'CONNECTING',\n  Disconnected = 'DISCONNECTED',\n  Init = 'INIT',\n}\n\nexport class WSConnectionFallback<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  client: StreamChat<StreamChatGenerics>;\n  state: ConnectionState;\n  consecutiveFailures: number;\n  connectionID?: string;\n  cancelToken?: CancelTokenSource;\n\n  constructor({ client }: { client: StreamChat<StreamChatGenerics> }) {\n    this.client = client;\n    this.state = ConnectionState.Init;\n    this.consecutiveFailures = 0;\n\n    addConnectionEventListeners(this._onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'WSConnectionFallback:' + msg, { tags: ['connection_fallback', 'connection'], ...extra });\n  }\n\n  _setState(state: ConnectionState) {\n    this._log(`_setState() - ${state}`);\n\n    // transition from connecting => connected\n    if (this.state === ConnectionState.Connecting && state === ConnectionState.Connected) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: true });\n    }\n\n    if (state === ConnectionState.Closed || state === ConnectionState.Disconnected) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: false });\n    }\n\n    this.state = state;\n  }\n\n  /** @private */\n  _onlineStatusChanged = (event: { type: string }) => {\n    this._log(`_onlineStatusChanged() - ${event.type}`);\n\n    if (event.type === 'offline') {\n      this._setState(ConnectionState.Closed);\n      this.cancelToken?.cancel('disconnect() is called');\n      this.cancelToken = undefined;\n      return;\n    }\n\n    if (event.type === 'online' && this.state === ConnectionState.Closed) {\n      this.connect(true);\n    }\n  };\n\n  /** @private */\n  _req = async <T = UR>(params: UR, config: AxiosRequestConfig, retry: boolean): Promise<T> => {\n    if (!this.cancelToken && !params.close) {\n      this.cancelToken = axios.CancelToken.source();\n    }\n\n    try {\n      const res = await this.client.doAxiosRequest<T>(\n        'get',\n        (this.client.baseURL as string).replace(':3030', ':8900') + '/longpoll', // replace port if present for testing with local API\n        undefined,\n        {\n          config: { ...config, cancelToken: this.cancelToken?.token },\n          params,\n        },\n      );\n\n      this.consecutiveFailures = 0; // always reset in case of no error\n      return res;\n    } catch (err) {\n      this.consecutiveFailures += 1;\n\n      if (retry && isErrorRetryable(err)) {\n        this._log(`_req() - Retryable error, retrying request`);\n        await sleep(retryInterval(this.consecutiveFailures));\n        return this._req<T>(params, config, retry);\n      }\n\n      throw err;\n    }\n  };\n\n  /** @private */\n  _poll = async () => {\n    while (this.state === ConnectionState.Connected) {\n      try {\n        const data = await this._req<{\n          events: Event<StreamChatGenerics>[];\n        }>({}, { timeout: 30000 }, true); // 30s => API responds in 20s if there is no event\n\n        if (data.events?.length) {\n          for (let i = 0; i < data.events.length; i++) {\n            this.client.dispatchEvent(data.events[i]);\n          }\n        }\n      } catch (err) {\n        if (axios.isCancel(err)) {\n          this._log(`_poll() - axios canceled request`);\n          return;\n        }\n\n        /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */\n\n        if (isConnectionIDError(err)) {\n          this._log(`_poll() - ConnectionID error, connecting without ID...`);\n          this._setState(ConnectionState.Disconnected);\n          this.connect(true);\n          return;\n        }\n\n        if (isAPIError(err) && !isErrorRetryable(err)) {\n          this._setState(ConnectionState.Closed);\n          return;\n        }\n\n        await sleep(retryInterval(this.consecutiveFailures));\n      }\n    }\n  };\n\n  /**\n   * connect try to open a longpoll request\n   * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n   */\n  connect = async (reconnect = false) => {\n    if (this.state === ConnectionState.Connecting) {\n      this._log('connect() - connecting already in progress', { reconnect }, 'warn');\n      return;\n    }\n    if (this.state === ConnectionState.Connected) {\n      this._log('connect() - already connected and polling', { reconnect }, 'warn');\n      return;\n    }\n\n    this._setState(ConnectionState.Connecting);\n    this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n    try {\n      const { event } = await this._req<{ event: ConnectionOpen<StreamChatGenerics> }>(\n        { json: this.client._buildWSPayload() },\n        { timeout: 8000 }, // 8s\n        reconnect,\n      );\n\n      this._setState(ConnectionState.Connected);\n      this.connectionID = event.connection_id;\n      // @ts-expect-error\n      this.client.dispatchEvent(event);\n      this._poll();\n      if (reconnect) {\n        this.client.recoverState();\n      }\n      return event;\n    } catch (err) {\n      this._setState(ConnectionState.Closed);\n      throw err;\n    }\n  };\n\n  /**\n   * isHealthy checks if there is a connectionID and connection is in Connected state\n   */\n  isHealthy = () => {\n    return !!this.connectionID && this.state === ConnectionState.Connected;\n  };\n\n  disconnect = async (timeout = 2000) => {\n    removeConnectionEventListeners(this._onlineStatusChanged);\n\n    this._setState(ConnectionState.Disconnected);\n    this.cancelToken?.cancel('disconnect() is called');\n    this.cancelToken = undefined;\n\n    const connection_id = this.connectionID;\n    this.connectionID = undefined;\n\n    try {\n      await this._req({ close: true, connection_id }, { timeout }, false);\n      this._log(`disconnect() - Closed connectionID`);\n    } catch (err) {\n      this._log(`disconnect() - Failed`, { err }, 'error');\n    }\n  };\n}\n", "import { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { StableWSConnection } from './connection';\nimport { EVENT_MAP } from './events';\nimport { Role } from './permissions';\n\n/**\n * Utility Types\n */\n\nexport type ArrayOneOrMore<T> = {\n  0: T;\n} & Array<T>;\n\nexport type ArrayTwoOrMore<T> = {\n  0: T;\n  1: T;\n} & Array<T>;\n\nexport type KnownKeys<T> = {\n  [K in keyof T]: string extends K ? never : number extends K ? never : K;\n} extends { [_ in keyof T]: infer U }\n  ? U\n  : never;\n\nexport type RequireAtLeastOne<T> = {\n  [K in keyof T]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<keyof T, K>>>;\n}[keyof T];\n\nexport type RequireOnlyOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Record<Exclude<Keys, K>, undefined>>;\n  }[Keys];\n\n/* Unknown Record */\nexport type UR = Record<string, unknown>;\nexport type UnknownType = UR; //alias to avoid breaking change\n\nexport type DefaultGenerics = {\n  attachmentType: UR;\n  channelType: UR;\n  commandType: LiteralStringForUnion;\n  eventType: UR;\n  messageType: UR;\n  reactionType: UR;\n  userType: UR;\n};\n\nexport type ExtendableGenerics = {\n  attachmentType: UR;\n  channelType: UR;\n  commandType: string;\n  eventType: UR;\n  messageType: UR;\n  reactionType: UR;\n  userType: UR;\n};\n\nexport type Unpacked<T> = T extends (infer U)[]\n  ? U // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  : T extends (...args: any[]) => infer U\n  ? U\n  : T extends Promise<infer U>\n  ? U\n  : T;\n\n/**\n * Response Types\n */\n\nexport type APIResponse = {\n  duration: string;\n};\n\nexport type AppSettingsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  app?: {\n    channel_configs: Record<\n      string,\n      {\n        reminders: boolean;\n        automod?: ChannelConfigAutomod;\n        automod_behavior?: ChannelConfigAutomodBehavior;\n        automod_thresholds?: ChannelConfigAutomodThresholds;\n        blocklist_behavior?: ChannelConfigAutomodBehavior;\n        commands?: CommandVariants<StreamChatGenerics>[];\n        connect_events?: boolean;\n        created_at?: string;\n        custom_events?: boolean;\n        max_message_length?: number;\n        message_retention?: string;\n        mutes?: boolean;\n        name?: string;\n        push_notifications?: boolean;\n        quotes?: boolean;\n        reactions?: boolean;\n        read_events?: boolean;\n        replies?: boolean;\n        search?: boolean;\n        typing_events?: boolean;\n        updated_at?: string;\n        uploads?: boolean;\n        url_enrichment?: boolean;\n      }\n    >;\n    reminders_interval: number;\n    agora_options?: AgoraOptions | null;\n    async_moderation_config?: AsyncModerationOptions;\n    async_url_enrich_enabled?: boolean;\n    auto_translation_enabled?: boolean;\n    before_message_send_hook_url?: string;\n    campaign_enabled?: boolean;\n    cdn_expiration_seconds?: number;\n    custom_action_handler_url?: string;\n    disable_auth_checks?: boolean;\n    disable_permissions_checks?: boolean;\n    enforce_unique_usernames?: 'no' | 'app' | 'team';\n    file_upload_config?: FileUploadConfig;\n    grants?: Record<string, string[]>;\n    hms_options?: HMSOptions | null;\n    image_moderation_enabled?: boolean;\n    image_upload_config?: FileUploadConfig;\n    multi_tenant_enabled?: boolean;\n    name?: string;\n    organization?: string;\n    permission_version?: string;\n    policies?: Record<string, Policy[]>;\n    push_notifications?: {\n      offline_only: boolean;\n      version: string;\n      apn?: APNConfig;\n      firebase?: FirebaseConfig;\n      huawei?: HuaweiConfig;\n      providers?: PushProviderConfig[];\n      xiaomi?: XiaomiConfig;\n    };\n    revoke_tokens_issued_before?: string | null;\n    search_backend?: 'disabled' | 'elasticsearch' | 'postgres';\n    sqs_key?: string;\n    sqs_secret?: string;\n    sqs_url?: string;\n    suspended?: boolean;\n    suspended_explanation?: string;\n    user_search_disallowed_roles?: string[] | null;\n    video_provider?: string;\n    webhook_events?: Array<string>;\n    webhook_url?: string;\n  };\n};\n\nexport type ModerationResult = {\n  action: string;\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n  user_bad_karma: boolean;\n  user_karma: number;\n  blocked_word?: string;\n  blocklist_name?: string;\n  moderated_by?: string;\n};\n\nexport type AutomodDetails = {\n  action?: string;\n  image_labels?: Array<string>;\n  original_message_type?: string;\n  result?: ModerationResult;\n};\n\nexport type FlagDetails = {\n  automod?: AutomodDetails;\n};\n\nexport type Flag<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  created_by_automod: boolean;\n  updated_at: string;\n  details?: FlagDetails;\n  target_message?: MessageResponse<StreamChatGenerics>;\n  target_user?: UserResponse<StreamChatGenerics>;\n  user?: UserResponse<StreamChatGenerics>;\n};\n\nexport type FlagsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flags?: Array<Flag<StreamChatGenerics>>;\n};\n\nexport type MessageFlagsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flags?: Array<{\n    message: MessageResponse<StreamChatGenerics>;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    created_at?: string;\n    created_by_automod?: boolean;\n    moderation_result?: ModerationResult;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: UserResponse<StreamChatGenerics>;\n    updated_at?: string;\n  }>;\n};\n\nexport type FlagReport<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  flags_count: number;\n  id: string;\n  message: MessageResponse<StreamChatGenerics>;\n  user: UserResponse<StreamChatGenerics>;\n  created_at?: string;\n  details?: FlagDetails;\n  first_reporter?: UserResponse<StreamChatGenerics>;\n  review_result?: string;\n  reviewed_at?: string;\n  reviewed_by?: UserResponse<StreamChatGenerics>;\n  updated_at?: string;\n};\n\nexport type FlagReportsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag_reports: Array<FlagReport<StreamChatGenerics>>;\n};\n\nexport type ReviewFlagReportResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag_report: FlagReport<StreamChatGenerics>;\n};\n\nexport type BannedUsersResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  bans?: Array<{\n    user: UserResponse<StreamChatGenerics>;\n    banned_by?: UserResponse<StreamChatGenerics>;\n    channel?: ChannelResponse<StreamChatGenerics>;\n    expires?: string;\n    ip_ban?: boolean;\n    reason?: string;\n    timeout?: number;\n  }>;\n};\n\nexport type BlockListResponse = BlockList & {\n  created_at?: string;\n  updated_at?: string;\n};\n\nexport type ChannelResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['channelType'] & {\n  cid: string;\n  disabled: boolean;\n  frozen: boolean;\n  id: string;\n  type: string;\n  auto_translation_enabled?: boolean;\n  auto_translation_language?: TranslationLanguages | '';\n  config?: ChannelConfigWithInfo<StreamChatGenerics>;\n  cooldown?: number;\n  created_at?: string;\n  created_by?: UserResponse<StreamChatGenerics> | null;\n  created_by_id?: string;\n  deleted_at?: string;\n  hidden?: boolean;\n  invites?: string[];\n  joined?: boolean;\n  last_message_at?: string;\n  member_count?: number;\n  members?: ChannelMemberResponse<StreamChatGenerics>[];\n  muted?: boolean;\n  name?: string;\n  own_capabilities?: string[];\n  team?: string;\n  truncated_at?: string;\n  truncated_by?: UserResponse<StreamChatGenerics>;\n  truncated_by_id?: string;\n  updated_at?: string;\n};\n\nexport type QueryChannelsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channels: Omit<ChannelAPIResponse<StreamChatGenerics>, keyof APIResponse>[];\n};\n\nexport type QueryChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  ChannelAPIResponse<StreamChatGenerics>;\n\nexport type ChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n  messages: MessageResponse<StreamChatGenerics>[];\n  pinned_messages: MessageResponse<StreamChatGenerics>[];\n  hidden?: boolean;\n  membership?: ChannelMembership<StreamChatGenerics> | null;\n  pending_messages?: PendingMessageResponse<StreamChatGenerics>[];\n  read?: ReadResponse<StreamChatGenerics>[];\n  watcher_count?: number;\n  watchers?: UserResponse<StreamChatGenerics>[];\n};\n\nexport type ChannelUpdateOptions = {\n  hide_history?: boolean;\n  skip_push?: boolean;\n};\n\nexport type ChannelMemberAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n};\n\nexport type ChannelMemberResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  banned?: boolean;\n  channel_role?: Role;\n  created_at?: string;\n  invite_accepted_at?: string;\n  invite_rejected_at?: string;\n  invited?: boolean;\n  is_moderator?: boolean;\n  role?: string;\n  shadow_banned?: boolean;\n  updated_at?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type CheckPushResponse = APIResponse & {\n  device_errors?: {\n    [deviceID: string]: {\n      error_message?: string;\n      provider?: PushProvider;\n      provider_name?: string;\n    };\n  };\n  general_errors?: string[];\n  rendered_apn_template?: string;\n  rendered_firebase_template?: string;\n  rendered_message?: {};\n  skip_devices?: boolean;\n};\n\nexport type CheckSQSResponse = APIResponse & {\n  status: string;\n  data?: {};\n  error?: string;\n};\n\nexport type CommandResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Partial<CreatedAtUpdatedAt> & {\n  args?: string;\n  description?: string;\n  name?: CommandVariants<StreamChatGenerics>;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type ConnectAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Promise<void | ConnectionOpen<StreamChatGenerics>>;\n\nexport type CreateChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n    grants?: Record<string, string[]>;\n  };\n\nexport type CreateCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  command: CreateCommandOptions<StreamChatGenerics> & CreatedAtUpdatedAt;\n};\n\nexport type DeleteChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n};\n\nexport type DeleteCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  name?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type EventAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  event: Event<StreamChatGenerics>;\n};\n\nexport type ExportChannelResponse = {\n  task_id: string;\n};\n\nexport type ExportUsersResponse = {\n  task_id: string;\n};\n\nexport type ExportChannelStatusResponse = {\n  created_at?: string;\n  error?: {};\n  result?: {};\n  updated_at?: string;\n};\n\nexport type FlagMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_message_id: string;\n    updated_at: string;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    channel_cid?: string;\n    details?: Object; // Any JSON\n    message_user_id?: string;\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n};\n\nexport type FlagUserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  flag: {\n    created_at: string;\n    created_by_automod: boolean;\n    target_user: UserResponse<StreamChatGenerics>;\n    updated_at: string;\n    user: UserResponse<StreamChatGenerics>;\n    approved_at?: string;\n    details?: Object; // Any JSON\n    rejected_at?: string;\n    reviewed_at?: string;\n    reviewed_by?: string;\n  };\n};\n\nexport type FormatMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<{\n    attachmentType: StreamChatGenerics['attachmentType'];\n    channelType: StreamChatGenerics['channelType'];\n    commandType: StreamChatGenerics['commandType'];\n    eventType: StreamChatGenerics['eventType'];\n    messageType: {};\n    reactionType: StreamChatGenerics['reactionType'];\n    userType: StreamChatGenerics['userType'];\n  }>,\n  'created_at' | 'pinned_at' | 'updated_at' | 'status'\n> &\n  StreamChatGenerics['messageType'] & {\n    created_at: Date;\n    pinned_at: Date | null;\n    status: string;\n    updated_at: Date;\n  };\n\nexport type GetChannelTypeResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id' | 'commands'> & {\n    created_at: string;\n    updated_at: string;\n    commands?: CommandResponse<StreamChatGenerics>[];\n    grants?: Record<string, string[]>;\n  };\n\nexport type GetCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  CreateCommandOptions<StreamChatGenerics> &\n  CreatedAtUpdatedAt;\n\nexport type GetMessageAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = SendMessageAPIResponse<StreamChatGenerics>;\n\nexport type GetMultipleMessagesAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  messages: MessageResponse<StreamChatGenerics>[];\n};\n\nexport type GetRateLimitsResponse = APIResponse & {\n  android?: RateLimitsMap;\n  ios?: RateLimitsMap;\n  server_side?: RateLimitsMap;\n  web?: RateLimitsMap;\n};\n\nexport type GetReactionsAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  reactions: ReactionResponse<StreamChatGenerics>[];\n};\n\nexport type GetRepliesAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  messages: MessageResponse<StreamChatGenerics>[];\n};\n\nexport type ListChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel_types: Record<\n    string,\n    Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id' | 'commands'> & {\n      commands: CommandResponse<StreamChatGenerics>[];\n      created_at: string;\n      updated_at: string;\n      grants?: Record<string, string[]>;\n    }\n  >;\n};\n\nexport type ListChannelTypesAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ListChannelResponse<StreamChatGenerics>;\n\nexport type ListCommandsResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  commands: Array<CreateCommandOptions<StreamChatGenerics> & Partial<CreatedAtUpdatedAt>>;\n};\n\nexport type MuteChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel_mute: ChannelMute<StreamChatGenerics>;\n  own_user: OwnUserResponse<StreamChatGenerics>;\n  channel_mutes?: ChannelMute<StreamChatGenerics>[];\n  mute?: MuteResponse<StreamChatGenerics>;\n};\n\nexport type MessageResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MessageResponseBase<StreamChatGenerics> & {\n  quoted_message?: MessageResponseBase<StreamChatGenerics>;\n};\n\nexport type MessageResponseBase<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MessageBase<StreamChatGenerics> & {\n  type: MessageLabel;\n  args?: string;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  cid?: string;\n  command?: string;\n  command_info?: { name?: string };\n  created_at?: string;\n  deleted_at?: string;\n  i18n?: RequireAtLeastOne<Record<`${TranslationLanguages}_text`, string>> & {\n    language: TranslationLanguages;\n  };\n  latest_reactions?: ReactionResponse<StreamChatGenerics>[];\n  mentioned_users?: UserResponse<StreamChatGenerics>[];\n  own_reactions?: ReactionResponse<StreamChatGenerics>[] | null;\n  pin_expires?: string | null;\n  pinned_at?: string | null;\n  pinned_by?: UserResponse<StreamChatGenerics> | null;\n  reaction_counts?: { [key: string]: number } | null;\n  reaction_scores?: { [key: string]: number } | null;\n  reply_count?: number;\n  shadowed?: boolean;\n  silent?: boolean;\n  status?: string;\n  thread_participants?: UserResponse<StreamChatGenerics>[];\n  updated_at?: string;\n};\n\nexport type MuteResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  created_at?: string;\n  expires?: string;\n  target?: UserResponse<StreamChatGenerics>;\n  updated_at?: string;\n};\n\nexport type MuteUserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  mute?: MuteResponse<StreamChatGenerics>;\n  mutes?: Array<Mute<StreamChatGenerics>>;\n  own_user?: OwnUserResponse<StreamChatGenerics>;\n};\n\nexport type OwnUserBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  channel_mutes: ChannelMute<StreamChatGenerics>[];\n  devices: Device<StreamChatGenerics>[];\n  mutes: Mute<StreamChatGenerics>[];\n  total_unread_count: number;\n  unread_channels: number;\n  unread_count: number;\n  invisible?: boolean;\n  roles?: string[];\n};\n\nexport type OwnUserResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = UserResponse<StreamChatGenerics> & OwnUserBase<StreamChatGenerics>;\n\nexport type PartialUpdateChannelAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n};\n\nexport type PermissionAPIResponse = APIResponse & {\n  permission?: PermissionAPIObject;\n};\n\nexport type PermissionsAPIResponse = APIResponse & {\n  permissions?: PermissionAPIObject[];\n};\n\nexport type ReactionAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n  reaction: ReactionResponse<StreamChatGenerics>;\n};\n\nexport type ReactionResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = Reaction<StreamChatGenerics> & {\n  created_at: string;\n  message_id: string;\n  updated_at: string;\n};\n\nexport type ReadResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  last_read: string;\n  user: UserResponse<StreamChatGenerics>;\n  unread_messages?: number;\n};\n\nexport type SearchAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  results: {\n    message: MessageResponse<StreamChatGenerics>;\n  }[];\n  next?: string;\n  previous?: string;\n  results_warning?: SearchWarning | null;\n};\n\nexport type SearchWarning = {\n  channel_search_cids: string[];\n  channel_search_count: number;\n  warning_code: number;\n  warning_description: string;\n};\n\n// Thumb URL(thumb_url) is added considering video attachments as the backend will return the thumbnail in the response.\nexport type SendFileAPIResponse = APIResponse & { file: string; thumb_url?: string };\n\nexport type SendMessageAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n  pending_message_metadata?: Record<string, string> | null;\n};\n\nexport type SyncResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  events: Event<StreamChatGenerics>[];\n  inaccessible_cids?: string[];\n};\n\nexport type TruncateChannelAPIResponse<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  message?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UpdateChannelAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  channel: ChannelResponse<StreamChatGenerics>;\n  members: ChannelMemberResponse<StreamChatGenerics>[];\n  message?: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UpdateChannelResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse &\n  Omit<CreateChannelOptions<StreamChatGenerics>, 'client_id' | 'connection_id'> & {\n    created_at: string;\n    updated_at: string;\n  };\n\nexport type UpdateCommandResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  command: UpdateCommandOptions<StreamChatGenerics> &\n    CreatedAtUpdatedAt & {\n      name: CommandVariants<StreamChatGenerics>;\n    };\n};\n\nexport type UpdateMessageAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  message: MessageResponse<StreamChatGenerics>;\n};\n\nexport type UsersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  users: Array<UserResponse<StreamChatGenerics>>;\n};\n\nexport type UpdateUsersAPIResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = APIResponse & {\n  users: { [key: string]: UserResponse<StreamChatGenerics> };\n};\n\nexport type UserResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = User<StreamChatGenerics> & {\n  banned?: boolean;\n  created_at?: string;\n  deactivated_at?: string;\n  deleted_at?: string;\n  language?: TranslationLanguages | '';\n  last_active?: string;\n  online?: boolean;\n  push_notifications?: PushNotificationSettings;\n  revoke_tokens_issued_before?: string;\n  shadow_banned?: boolean;\n  updated_at?: string;\n};\n\nexport type PushNotificationSettings = {\n  disabled?: boolean;\n  disabled_until?: string | null;\n};\n\n/**\n * Option Types\n */\n\nexport type MessageFlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type FlagReportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ReviewFlagReportOptions = {\n  review_details?: Object;\n  user_id?: string;\n};\n\nexport type BannedUsersPaginationOptions = Omit<PaginationOptions, 'id_gt' | 'id_gte' | 'id_lt' | 'id_lte'>;\n\nexport type BanUserOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = UnBanUserOptions & {\n  banned_by?: UserResponse<StreamChatGenerics>;\n  banned_by_id?: string;\n  ip_ban?: boolean;\n  reason?: string;\n  timeout?: number;\n};\n\nexport type ChannelOptions = {\n  limit?: number;\n  member_limit?: number;\n  message_limit?: number;\n  offset?: number;\n  presence?: boolean;\n  state?: boolean;\n  user_id?: string;\n  watch?: boolean;\n};\n\nexport type ChannelQueryOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  data?: ChannelResponse<StreamChatGenerics>;\n  members?: PaginationOptions;\n  messages?: MessagePaginationOptions;\n  presence?: boolean;\n  state?: boolean;\n  watch?: boolean;\n  watchers?: PaginationOptions;\n};\n\nexport type ChannelStateOptions = {\n  offlineMode?: boolean;\n  skipInitialization?: string[];\n};\n\nexport type CreateChannelOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist?: string;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  client_id?: string;\n  commands?: CommandVariants<StreamChatGenerics>[];\n  connect_events?: boolean;\n  connection_id?: string;\n  custom_events?: boolean;\n  grants?: Record<string, string[]>;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  permissions?: PermissionObject[];\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  reminders?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n};\n\nexport type CreateCommandOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  description: string;\n  name: CommandVariants<StreamChatGenerics>;\n  args?: string;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type CustomPermissionOptions = {\n  action: string;\n  condition: object;\n  id: string;\n  name: string;\n  description?: string;\n  owner?: boolean;\n  same_team?: boolean;\n};\n\n// TODO: rename to UpdateChannelOptions in the next major update and use it in channel._update and/or channel.update\nexport type InviteOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  accept_invite?: boolean;\n  add_members?: string[];\n  add_moderators?: string[];\n  client_id?: string;\n  connection_id?: string;\n  data?: Omit<ChannelResponse<StreamChatGenerics>, 'id' | 'cid'>;\n  demote_moderators?: string[];\n  invites?: string[];\n  message?: MessageResponse<StreamChatGenerics>;\n  reject_invite?: boolean;\n  remove_members?: string[];\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\n/** @deprecated use MarkChannelsReadOptions instead */\nexport type MarkAllReadOptions<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = MarkChannelsReadOptions<StreamChatGenerics>;\n\nexport type MarkChannelsReadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  read_by_channel?: Record<string, string>;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MarkReadOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type MuteUserOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  reason?: string;\n  target_user_id?: string;\n  timeout?: number;\n  type?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PaginationOptions = {\n  created_at_after?: string | Date;\n  created_at_after_or_equal?: string | Date;\n  created_at_before?: string | Date;\n  created_at_before_or_equal?: string | Date;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number;\n};\n\nexport type MessagePaginationOptions = PaginationOptions & {\n  created_at_around?: string | Date;\n  id_around?: string;\n};\n\nexport type PinnedMessagePaginationOptions = {\n  id_around?: string;\n  id_gt?: string;\n  id_gte?: string;\n  id_lt?: string;\n  id_lte?: string;\n  limit?: number;\n  offset?: number;\n  pinned_at_after?: string | Date;\n  pinned_at_after_or_equal?: string | Date;\n  pinned_at_around?: string | Date;\n  pinned_at_before?: string | Date;\n  pinned_at_before_or_equal?: string | Date;\n};\n\nexport type QueryMembersOptions = {\n  limit?: number;\n  offset?: number;\n  user_id_gt?: string;\n  user_id_gte?: string;\n  user_id_lt?: string;\n  user_id_lte?: string;\n};\n\nexport type SearchOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  limit?: number;\n  next?: string;\n  offset?: number;\n  sort?: SearchMessageSort<StreamChatGenerics>;\n};\n\nexport type StreamChatOptions = AxiosRequestConfig & {\n  /**\n   * Used to disable warnings that are triggered by using connectUser or connectAnonymousUser server-side.\n   */\n  allowServerSideConnect?: boolean;\n  /**\n   * Base url to use for API\n   * such as https://chat-proxy-dublin.stream-io-api.com\n   */\n  baseURL?: string;\n  browser?: boolean;\n  device?: BaseDeviceFields;\n  enableInsights?: boolean;\n  /** experimental feature, please contact support if you want this feature enabled for you */\n  enableWSFallback?: boolean;\n  logger?: Logger;\n  /**\n   * When true, user will be persisted on client. Otherwise if `connectUser` call fails, then you need to\n   * call `connectUser` again to retry.\n   * This is mainly useful for chat application working in offline mode, where you will need client.user to\n   * persist even if connectUser call fails.\n   */\n  persistUserOnConnectionFailure?: boolean;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  warmUp?: boolean;\n  // Set the instance of StableWSConnection on chat client. Its purely for testing purpose and should\n  // not be used in production apps.\n  wsConnection?: StableWSConnection;\n};\n\nexport type SyncOptions = {\n  /**\n   * This will behave as queryChannels option.\n   */\n  watch?: boolean;\n  /**\n   * Return channels from request that user does not have access to in a separate\n   * field in the response called 'inaccessible_cids' instead of\n   * adding them as 'notification.removed_from_channel' events.\n   */\n  with_inaccessible_cids?: boolean;\n};\n\nexport type UnBanUserOptions = {\n  client_id?: string;\n  connection_id?: string;\n  id?: string;\n  shadow?: boolean;\n  target_user_id?: string;\n  type?: string;\n};\n\n// TODO: rename to UpdateChannelTypeOptions in the next major update\nexport type UpdateChannelOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  CreateChannelOptions<StreamChatGenerics>,\n  'name'\n> & {\n  created_at?: string;\n  updated_at?: string;\n};\n\nexport type UpdateCommandOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  description: string;\n  args?: string;\n  set?: CommandVariants<StreamChatGenerics>;\n};\n\nexport type UserOptions = {\n  limit?: number;\n  offset?: number;\n  presence?: boolean;\n};\n\n/**\n * Event Types\n */\n\nexport type ConnectionChangeEvent = {\n  type: EventTypes;\n  online?: boolean;\n};\n\nexport type Event<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = StreamChatGenerics['eventType'] & {\n  type: EventTypes;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  channel_id?: string;\n  channel_type?: string;\n  cid?: string;\n  clear_history?: boolean;\n  connection_id?: string;\n  created_at?: string;\n  hard_delete?: boolean;\n  mark_messages_deleted?: boolean;\n  me?: OwnUserResponse<StreamChatGenerics>;\n  member?: ChannelMemberResponse<StreamChatGenerics>;\n  message?: MessageResponse<StreamChatGenerics>;\n  mode?: string;\n  online?: boolean;\n  parent_id?: string;\n  queriedChannels?: {\n    channels: ChannelAPIResponse<StreamChatGenerics>[];\n    isLatestMessageSet?: boolean;\n  };\n  reaction?: ReactionResponse<StreamChatGenerics>;\n  received_at?: string | Date;\n  team?: string;\n  total_unread_count?: number;\n  unread_channels?: number;\n  unread_count?: number;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n  watcher_count?: number;\n};\n\nexport type UserCustomEvent<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['eventType'] & {\n  type: string;\n};\n\nexport type EventHandler<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = (\n  event: Event<StreamChatGenerics>,\n) => void;\n\nexport type EventTypes = 'all' | keyof typeof EVENT_MAP;\n\n/**\n * Filter Types\n */\n\nexport type AscDesc = 1 | -1;\n\nexport type MessageFlagsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  team?: string;\n  user_id?: string;\n};\n\nexport type MessageFlagsFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['team']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<MessageFlagsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<MessageFlagsFiltersOptions['user_id']>;\n  } & {\n      [Key in keyof Omit<MessageFlagsFiltersOptions, 'channel_cid' | 'user_id' | 'is_reviewed'>]:\n        | RequireOnlyOne<QueryFilter<MessageFlagsFiltersOptions[Key]>>\n        | PrimitiveFilter<MessageFlagsFiltersOptions[Key]>;\n    }\n>;\n\nexport type FlagsFiltersOptions = {\n  channel_cid?: string;\n  message_id?: string;\n  message_user_id?: string;\n  reporter_id?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagsFilters = QueryFilters<\n  {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['message_user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['channel_cid']>;\n  } & {\n    reporter_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['reporter_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['reporter_id']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagsFiltersOptions['team']>;\n  }\n>;\n\nexport type FlagReportsFiltersOptions = {\n  channel_cid?: string;\n  is_reviewed?: boolean;\n  message_id?: string;\n  message_user_id?: string;\n  report_id?: string;\n  review_result?: string;\n  reviewed_by?: string;\n  team?: string;\n  user_id?: string;\n};\n\nexport type FlagReportsFilters = QueryFilters<\n  {\n    report_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['report_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['report_id']>;\n  } & {\n    review_result?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['review_result']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['review_result']>;\n  } & {\n    reviewed_by?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['reviewed_by']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['reviewed_by']>;\n  } & {\n    user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['user_id']>;\n  } & {\n    message_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['message_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_id']>;\n  } & {\n    message_user_id?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['message_user_id']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['message_user_id']>;\n  } & {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['channel_cid']>;\n  } & {\n    team?:\n      | RequireOnlyOne<Pick<QueryFilter<FlagReportsFiltersOptions['team']>, '$eq' | '$in'>>\n      | PrimitiveFilter<FlagReportsFiltersOptions['team']>;\n  } & {\n      [Key in keyof Omit<\n        FlagReportsFiltersOptions,\n        'report_id' | 'user_id' | 'message_id' | 'review_result' | 'reviewed_by'\n      >]: RequireOnlyOne<QueryFilter<FlagReportsFiltersOptions[Key]>> | PrimitiveFilter<FlagReportsFiltersOptions[Key]>;\n    }\n>;\n\nexport type BannedUsersFilterOptions = {\n  banned_by_id?: string;\n  channel_cid?: string;\n  created_at?: string;\n  reason?: string;\n  user_id?: string;\n};\n\nexport type BannedUsersFilters = QueryFilters<\n  {\n    channel_cid?:\n      | RequireOnlyOne<Pick<QueryFilter<BannedUsersFilterOptions['channel_cid']>, '$eq' | '$in'>>\n      | PrimitiveFilter<BannedUsersFilterOptions['channel_cid']>;\n  } & {\n    reason?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: BannedUsersFilterOptions['reason'];\n          } & QueryFilter<BannedUsersFilterOptions['reason']>\n        >\n      | PrimitiveFilter<BannedUsersFilterOptions['reason']>;\n  } & {\n      [Key in keyof Omit<BannedUsersFilterOptions, 'channel_cid' | 'reason'>]:\n        | RequireOnlyOne<QueryFilter<BannedUsersFilterOptions[Key]>>\n        | PrimitiveFilter<BannedUsersFilterOptions[Key]>;\n    }\n>;\n\nexport type ChannelFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['channelType']> & {\n    members?:\n      | RequireOnlyOne<Pick<QueryFilter<string>, '$in' | '$nin'>>\n      | RequireOnlyOne<Pick<QueryFilter<string[]>, '$eq'>>\n      | PrimitiveFilter<string[]>;\n  } & {\n    name?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: ChannelResponse<StreamChatGenerics>['name'];\n          } & QueryFilter<ChannelResponse<StreamChatGenerics>['name']>\n        >\n      | PrimitiveFilter<ChannelResponse<StreamChatGenerics>['name']>;\n  } & {\n      [Key in keyof Omit<\n        ChannelResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: {};\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          messageType: StreamChatGenerics['messageType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: StreamChatGenerics['userType'];\n        }>,\n        'name' | 'members'\n      >]:\n        | RequireOnlyOne<\n            QueryFilter<\n              ChannelResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: {};\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                messageType: StreamChatGenerics['messageType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: StreamChatGenerics['userType'];\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            ChannelResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: {};\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              messageType: StreamChatGenerics['messageType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: StreamChatGenerics['userType'];\n            }>[Key]\n          >;\n    }\n>;\n\nexport type ContainsOperator<CustomType = {}> = {\n  [Key in keyof CustomType]?: CustomType[Key] extends (infer ContainType)[]\n    ?\n        | RequireOnlyOne<\n            {\n              $contains?: ContainType extends object\n                ? PrimitiveFilter<RequireAtLeastOne<ContainType>>\n                : PrimitiveFilter<ContainType>;\n            } & QueryFilter<PrimitiveFilter<ContainType>[]>\n          >\n        | PrimitiveFilter<PrimitiveFilter<ContainType>[]>\n    : RequireOnlyOne<QueryFilter<CustomType[Key]>> | PrimitiveFilter<CustomType[Key]>;\n};\n\nexport type MessageFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['messageType']> & {\n    text?:\n      | RequireOnlyOne<\n          {\n            $autocomplete?: MessageResponse<StreamChatGenerics>['text'];\n            $q?: MessageResponse<StreamChatGenerics>['text'];\n          } & QueryFilter<MessageResponse<StreamChatGenerics>['text']>\n        >\n      | PrimitiveFilter<MessageResponse<StreamChatGenerics>['text']>;\n  } & {\n      [Key in keyof Omit<\n        MessageResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: StreamChatGenerics['channelType'];\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          messageType: {};\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: StreamChatGenerics['userType'];\n        }>,\n        'text'\n      >]?:\n        | RequireOnlyOne<\n            QueryFilter<\n              MessageResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: StreamChatGenerics['channelType'];\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                messageType: {};\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: StreamChatGenerics['userType'];\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            MessageResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: StreamChatGenerics['channelType'];\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              messageType: {};\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: StreamChatGenerics['userType'];\n            }>[Key]\n          >;\n    }\n>;\n\nexport type PrimitiveFilter<ObjectType> = ObjectType | null;\n\nexport type QueryFilter<ObjectType = string> = NonNullable<ObjectType> extends string | number | boolean\n  ? {\n      $eq?: PrimitiveFilter<ObjectType>;\n      $exists?: boolean;\n      $gt?: PrimitiveFilter<ObjectType>;\n      $gte?: PrimitiveFilter<ObjectType>;\n      $in?: PrimitiveFilter<ObjectType>[];\n      $lt?: PrimitiveFilter<ObjectType>;\n      $lte?: PrimitiveFilter<ObjectType>;\n      $ne?: PrimitiveFilter<ObjectType>;\n      $nin?: PrimitiveFilter<ObjectType>[];\n    }\n  : {\n      $eq?: PrimitiveFilter<ObjectType>;\n      $exists?: boolean;\n      $in?: PrimitiveFilter<ObjectType>[];\n      $ne?: PrimitiveFilter<ObjectType>;\n      $nin?: PrimitiveFilter<ObjectType>[];\n    };\n\nexport type QueryFilters<Operators = {}> = {\n  [Key in keyof Operators]?: Operators[Key];\n} &\n  QueryLogicalOperators<Operators>;\n\nexport type QueryLogicalOperators<Operators> = {\n  $and?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $nor?: ArrayOneOrMore<QueryFilters<Operators>>;\n  $or?: ArrayTwoOrMore<QueryFilters<Operators>>;\n};\n\nexport type UserFilters<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = QueryFilters<\n  ContainsOperator<StreamChatGenerics['userType']> & {\n    id?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['id'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['id']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['id']>;\n    name?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['name'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['name']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['name']>;\n    teams?:\n      | RequireOnlyOne<{\n          $contains?: PrimitiveFilter<string>;\n          $eq?: PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n        }>\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['teams']>;\n    username?:\n      | RequireOnlyOne<\n          { $autocomplete?: UserResponse<StreamChatGenerics>['username'] } & QueryFilter<\n            UserResponse<StreamChatGenerics>['username']\n          >\n        >\n      | PrimitiveFilter<UserResponse<StreamChatGenerics>['username']>;\n  } & {\n      [Key in keyof Omit<\n        UserResponse<{\n          attachmentType: StreamChatGenerics['attachmentType'];\n          channelType: StreamChatGenerics['channelType'];\n          commandType: StreamChatGenerics['commandType'];\n          eventType: StreamChatGenerics['eventType'];\n          messageType: StreamChatGenerics['messageType'];\n          reactionType: StreamChatGenerics['reactionType'];\n          userType: {};\n        }>,\n        'id' | 'name' | 'teams' | 'username'\n      >]?:\n        | RequireOnlyOne<\n            QueryFilter<\n              UserResponse<{\n                attachmentType: StreamChatGenerics['attachmentType'];\n                channelType: StreamChatGenerics['channelType'];\n                commandType: StreamChatGenerics['commandType'];\n                eventType: StreamChatGenerics['eventType'];\n                messageType: StreamChatGenerics['messageType'];\n                reactionType: StreamChatGenerics['reactionType'];\n                userType: {};\n              }>[Key]\n            >\n          >\n        | PrimitiveFilter<\n            UserResponse<{\n              attachmentType: StreamChatGenerics['attachmentType'];\n              channelType: StreamChatGenerics['channelType'];\n              commandType: StreamChatGenerics['commandType'];\n              eventType: StreamChatGenerics['eventType'];\n              messageType: StreamChatGenerics['messageType'];\n              reactionType: StreamChatGenerics['reactionType'];\n              userType: {};\n            }>[Key]\n          >;\n    }\n>;\n\n/**\n * Sort Types\n */\n\nexport type BannedUsersSort = BannedUsersSortBase | Array<BannedUsersSortBase>;\n\nexport type BannedUsersSortBase = { created_at?: AscDesc };\n\nexport type ChannelSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | ChannelSortBase<StreamChatGenerics>\n  | Array<ChannelSortBase<StreamChatGenerics>>;\n\nexport type ChannelSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['channelType']\n> & {\n  created_at?: AscDesc;\n  has_unread?: AscDesc;\n  last_message_at?: AscDesc;\n  last_updated?: AscDesc;\n  member_count?: AscDesc;\n  unread_count?: AscDesc;\n  updated_at?: AscDesc;\n};\n\nexport type PinnedMessagesSort = PinnedMessagesSortBase | Array<PinnedMessagesSortBase>;\nexport type PinnedMessagesSortBase = { pinned_at?: AscDesc };\n\nexport type Sort<T> = {\n  [P in keyof T]?: AscDesc;\n};\n\nexport type UserSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | Sort<UserResponse<StreamChatGenerics>>\n  | Array<Sort<UserResponse<StreamChatGenerics>>>;\n\nexport type MemberSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | Sort<Pick<UserResponse<StreamChatGenerics>, 'id' | 'created_at' | 'name'>>\n  | Array<Sort<Pick<UserResponse<StreamChatGenerics>, 'id' | 'created_at' | 'name'>>>;\n\nexport type SearchMessageSortBase<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Sort<\n  StreamChatGenerics['messageType']\n> & {\n  attachments?: AscDesc;\n  'attachments.type'?: AscDesc;\n  created_at?: AscDesc;\n  id?: AscDesc;\n  'mentioned_users.id'?: AscDesc;\n  parent_id?: AscDesc;\n  pinned?: AscDesc;\n  relevance?: AscDesc;\n  reply_count?: AscDesc;\n  text?: AscDesc;\n  type?: AscDesc;\n  updated_at?: AscDesc;\n  'user.id'?: AscDesc;\n};\n\nexport type SearchMessageSort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | SearchMessageSortBase<StreamChatGenerics>\n  | Array<SearchMessageSortBase<StreamChatGenerics>>;\n\nexport type QuerySort<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | BannedUsersSort\n  | ChannelSort<StreamChatGenerics>\n  | SearchMessageSort<StreamChatGenerics>\n  | UserSort<StreamChatGenerics>;\n\n/**\n * Base Types\n */\n\nexport type Action = {\n  name?: string;\n  style?: string;\n  text?: string;\n  type?: string;\n  value?: string;\n};\n\nexport type AnonUserType = {};\n\nexport type APNConfig = {\n  auth_key?: string;\n  auth_type?: string;\n  bundle_id?: string;\n  development?: boolean;\n  enabled?: boolean;\n  host?: string;\n  key_id?: string;\n  notification_template?: string;\n  p12_cert?: string;\n  team_id?: string;\n};\n\nexport type AgoraOptions = {\n  app_certificate: string;\n  app_id: string;\n  role_map?: Record<string, string>;\n};\n\nexport type HMSOptions = {\n  app_access_key: string;\n  app_secret: string;\n  default_role: string;\n  default_room_template: string;\n  default_region?: string;\n  role_map?: Record<string, string>;\n};\n\nexport type AsyncModerationOptions = {\n  callback?: {\n    mode?: 'CALLBACK_MODE_NONE' | 'CALLBACK_MODE_REST' | 'CALLBACK_MODE_TWIRP';\n    server_url?: string;\n  };\n  timeout_ms?: number;\n};\n\nexport type AppSettings = {\n  agora_options?: AgoraOptions | null;\n  apn_config?: {\n    auth_key?: string;\n    auth_type?: string;\n    bundle_id?: string;\n    development?: boolean;\n    host?: string;\n    key_id?: string;\n    notification_template?: string;\n    p12_cert?: string;\n    team_id?: string;\n  };\n  async_moderation_config?: AsyncModerationOptions;\n  async_url_enrich_enabled?: boolean;\n  auto_translation_enabled?: boolean;\n  before_message_send_hook_url?: string;\n  cdn_expiration_seconds?: number;\n  custom_action_handler_url?: string;\n  disable_auth_checks?: boolean;\n  disable_permissions_checks?: boolean;\n  enforce_unique_usernames?: 'no' | 'app' | 'team';\n  // all possible file mime types are https://www.iana.org/assignments/media-types/media-types.xhtml\n  file_upload_config?: FileUploadConfig;\n  firebase_config?: {\n    apn_template?: string;\n    credentials_json?: string;\n    data_template?: string;\n    notification_template?: string;\n    server_key?: string;\n  };\n  grants?: Record<string, string[]>;\n  hms_options?: HMSOptions | null;\n  huawei_config?: {\n    id: string;\n    secret: string;\n  };\n  image_moderation_enabled?: boolean;\n  image_upload_config?: FileUploadConfig;\n  migrate_permissions_to_v2?: boolean;\n  multi_tenant_enabled?: boolean;\n  permission_version?: 'v1' | 'v2';\n  push_config?: {\n    offline_only?: boolean;\n    version?: string;\n  };\n  reminders_interval?: number;\n  revoke_tokens_issued_before?: string | null;\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n  video_provider?: string;\n  webhook_events?: Array<string> | null;\n  webhook_url?: string;\n  xiaomi_config?: {\n    package_name: string;\n    secret: string;\n  };\n};\n\nexport type Attachment<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['attachmentType'] & {\n  actions?: Action[];\n  asset_url?: string;\n  author_icon?: string;\n  author_link?: string;\n  author_name?: string;\n  color?: string;\n  fallback?: string;\n  fields?: Field[];\n  file_size?: number | string;\n  footer?: string;\n  footer_icon?: string;\n  giphy?: GiphyData;\n  image_url?: string;\n  mime_type?: string;\n  og_scrape_url?: string;\n  original_height?: number;\n  original_width?: number;\n  pretext?: string;\n  text?: string;\n  thumb_url?: string;\n  title?: string;\n  title_link?: string;\n  type?: string;\n};\n\nexport type OGAttachment = {\n  og_scrape_url: string;\n  asset_url?: string; // og:video | og:audio\n  author_link?: string; // og:site\n  author_name?: string; // og:site_name\n  image_url?: string; // og:image\n  text?: string; // og:description\n  thumb_url?: string; // og:image\n  title?: string; // og:title\n  title_link?: string; // og:url\n  type?: string | 'video' | 'audio' | 'image';\n};\n\nexport type BlockList = {\n  name: string;\n  words: string[];\n};\n\nexport type ChannelConfig<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandVariants<StreamChatGenerics>[];\n  };\n\nexport type ChannelConfigAutomod = '' | 'AI' | 'disabled' | 'simple';\n\nexport type ChannelConfigAutomodBehavior = '' | 'block' | 'flag';\n\nexport type ChannelConfigAutomodThresholds = null | {\n  explicit?: { block?: number; flag?: number };\n  spam?: { block?: number; flag?: number };\n  toxic?: { block?: number; flag?: number };\n};\n\nexport type ChannelConfigFields = {\n  reminders: boolean;\n  automod?: ChannelConfigAutomod;\n  automod_behavior?: ChannelConfigAutomodBehavior;\n  automod_thresholds?: ChannelConfigAutomodThresholds;\n  blocklist_behavior?: ChannelConfigAutomodBehavior;\n  connect_events?: boolean;\n  custom_events?: boolean;\n  max_message_length?: number;\n  message_retention?: string;\n  mutes?: boolean;\n  name?: string;\n  push_notifications?: boolean;\n  quotes?: boolean;\n  reactions?: boolean;\n  read_events?: boolean;\n  replies?: boolean;\n  search?: boolean;\n  typing_events?: boolean;\n  uploads?: boolean;\n  url_enrichment?: boolean;\n};\n\nexport type ChannelConfigWithInfo<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = ChannelConfigFields &\n  CreatedAtUpdatedAt & {\n    commands?: CommandResponse<StreamChatGenerics>[];\n  };\n\nexport type ChannelData<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['channelType'] & {\n  members?: string[];\n  name?: string;\n};\n\nexport type ChannelMembership<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  banned?: boolean;\n  channel_role?: Role;\n  created_at?: string;\n  is_moderator?: boolean;\n  role?: string;\n  shadow_banned?: boolean;\n  updated_at?: string;\n  user?: UserResponse<StreamChatGenerics>;\n};\n\nexport type ChannelMute<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  user: UserResponse<StreamChatGenerics>;\n  channel?: ChannelResponse<StreamChatGenerics>;\n  created_at?: string;\n  expires?: string;\n  updated_at?: string;\n};\n\nexport type ChannelRole = {\n  custom?: boolean;\n  name?: string;\n  owner?: boolean;\n  resource?: string;\n  same_team?: boolean;\n};\n\nexport type CheckPushInput<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  apn_template?: string;\n  client_id?: string;\n  connection_id?: string;\n  firebase_data_template?: string;\n  firebase_template?: string;\n  message_id?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type PushProvider = 'apn' | 'firebase' | 'huawei' | 'xiaomi';\n\nexport type PushProviderConfig = PushProviderCommon &\n  PushProviderID &\n  PushProviderAPN &\n  PushProviderFirebase &\n  PushProviderHuawei &\n  PushProviderXiaomi;\n\nexport type PushProviderID = {\n  name: string;\n  type: PushProvider;\n};\n\nexport type PushProviderCommon = {\n  created_at: string;\n  updated_at: string;\n  description?: string;\n  disabled_at?: string;\n  disabled_reason?: string;\n};\n\nexport type PushProviderAPN = {\n  apn_auth_key?: string;\n  apn_auth_type?: 'token' | 'certificate';\n  apn_development?: boolean;\n  apn_host?: string;\n  apn_key_id?: string;\n  apn_notification_template?: string;\n  apn_p12_cert?: string;\n  apn_team_id?: string;\n  apn_topic?: string;\n};\n\nexport type PushProviderFirebase = {\n  firebase_apn_template?: string;\n  firebase_credentials?: string;\n  firebase_data_template?: string;\n  firebase_notification_template?: string;\n  firebase_server_key?: string;\n};\n\nexport type PushProviderHuawei = {\n  huawei_app_id?: string;\n  huawei_app_secret?: string;\n};\n\nexport type PushProviderXiaomi = {\n  xiaomi_package_name?: string;\n  xiaomi_secret?: string;\n};\n\nexport type CommandVariants<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> =\n  | 'all'\n  | 'ban'\n  | 'fun_set'\n  | 'giphy'\n  | 'moderation_set'\n  | 'mute'\n  | 'unban'\n  | 'unmute'\n  | StreamChatGenerics['commandType'];\n\nexport type Configs<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Record<\n  string,\n  ChannelConfigWithInfo<StreamChatGenerics> | undefined\n>;\n\nexport type ConnectionOpen<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  connection_id: string;\n  cid?: string;\n  created_at?: string;\n  me?: OwnUserResponse<StreamChatGenerics>;\n  type?: string;\n};\n\nexport type CreatedAtUpdatedAt = {\n  created_at: string;\n  updated_at: string;\n};\n\nexport type Device<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = DeviceFields & {\n  provider?: string;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type BaseDeviceFields = {\n  id: string;\n  push_provider: PushProvider;\n  push_provider_name?: string;\n};\n\nexport type DeviceFields = BaseDeviceFields & {\n  created_at: string;\n  disabled?: boolean;\n  disabled_reason?: string;\n};\n\nexport type EndpointName =\n  | 'Connect'\n  | 'LongPoll'\n  | 'DeleteFile'\n  | 'DeleteImage'\n  | 'DeleteMessage'\n  | 'DeleteUser'\n  | 'DeleteUsers'\n  | 'DeactivateUser'\n  | 'ExportUser'\n  | 'DeleteReaction'\n  | 'UpdateChannel'\n  | 'UpdateChannelPartial'\n  | 'UpdateMessage'\n  | 'UpdateMessagePartial'\n  | 'GetMessage'\n  | 'GetManyMessages'\n  | 'UpdateUsers'\n  | 'UpdateUsersPartial'\n  | 'CreateGuest'\n  | 'GetOrCreateChannel'\n  | 'StopWatchingChannel'\n  | 'QueryChannels'\n  | 'Search'\n  | 'QueryUsers'\n  | 'QueryMembers'\n  | 'QueryBannedUsers'\n  | 'QueryFlags'\n  | 'QueryMessageFlags'\n  | 'GetReactions'\n  | 'GetReplies'\n  | 'GetPinnedMessages'\n  | 'Ban'\n  | 'Unban'\n  | 'MuteUser'\n  | 'MuteChannel'\n  | 'UnmuteChannel'\n  | 'UnmuteUser'\n  | 'RunMessageAction'\n  | 'SendEvent'\n  | 'SendUserCustomEvent'\n  | 'MarkRead'\n  | 'MarkChannelsRead'\n  | 'SendMessage'\n  | 'ImportChannelMessages'\n  | 'UploadFile'\n  | 'UploadImage'\n  | 'UpdateApp'\n  | 'GetApp'\n  | 'CreateDevice'\n  | 'DeleteDevice'\n  | 'SendReaction'\n  | 'Flag'\n  | 'Unflag'\n  | 'Unblock'\n  | 'QueryFlagReports'\n  | 'FlagReportReview'\n  | 'CreateChannelType'\n  | 'DeleteChannel'\n  | 'DeleteChannels'\n  | 'DeleteChannelType'\n  | 'GetChannelType'\n  | 'ListChannelTypes'\n  | 'ListDevices'\n  | 'TruncateChannel'\n  | 'UpdateChannelType'\n  | 'CheckPush'\n  | 'PrivateSubmitModeration'\n  | 'ReactivateUser'\n  | 'HideChannel'\n  | 'ShowChannel'\n  | 'CreatePermission'\n  | 'UpdatePermission'\n  | 'GetPermission'\n  | 'DeletePermission'\n  | 'ListPermissions'\n  | 'CreateRole'\n  | 'DeleteRole'\n  | 'ListRoles'\n  | 'ListCustomRoles'\n  | 'Sync'\n  | 'TranslateMessage'\n  | 'CreateCommand'\n  | 'GetCommand'\n  | 'UpdateCommand'\n  | 'DeleteCommand'\n  | 'ListCommands'\n  | 'CreateBlockList'\n  | 'UpdateBlockList'\n  | 'GetBlockList'\n  | 'ListBlockLists'\n  | 'DeleteBlockList'\n  | 'ExportChannels'\n  | 'GetExportChannelsStatus'\n  | 'CheckSQS'\n  | 'GetRateLimits'\n  | 'CreateSegment'\n  | 'GetSegment'\n  | 'QuerySegments'\n  | 'UpdateSegment'\n  | 'DeleteSegment'\n  | 'CreateCampaign'\n  | 'GetCampaign'\n  | 'ListCampaigns'\n  | 'UpdateCampaign'\n  | 'DeleteCampaign'\n  | 'ScheduleCampaign'\n  | 'StopCampaign'\n  | 'ResumeCampaign'\n  | 'TestCampaign'\n  | 'GetOG'\n  | 'GetTask'\n  | 'ExportUsers'\n  | 'CreateImport'\n  | 'CreateImportURL'\n  | 'GetImport'\n  | 'ListImports'\n  | 'UpsertPushProvider'\n  | 'DeletePushProvider'\n  | 'ListPushProviders';\n\nexport type ExportChannelRequest = {\n  id: string;\n  type: string;\n  cid?: string;\n  messages_since?: Date;\n  messages_until?: Date;\n};\n\nexport type ExportChannelOptions = {\n  clear_deleted_message_text?: boolean;\n  export_users?: boolean;\n  include_truncated_messages?: boolean;\n  version?: string;\n};\n\nexport type ExportUsersRequest = {\n  user_ids: string[];\n};\n\nexport type Field = {\n  short?: boolean;\n  title?: string;\n  value?: string;\n};\n\nexport type FileUploadConfig = {\n  allowed_file_extensions?: string[] | null;\n  allowed_mime_types?: string[] | null;\n  blocked_file_extensions?: string[] | null;\n  blocked_mime_types?: string[] | null;\n};\n\nexport type FirebaseConfig = {\n  apn_template?: string;\n  credentials_json?: string;\n  data_template?: string;\n  enabled?: boolean;\n  notification_template?: string;\n  server_key?: string;\n};\n\ntype GiphyVersionInfo = {\n  height: string;\n  url: string;\n  width: string;\n};\n\ntype GiphyVersions =\n  | 'original'\n  | 'fixed_height'\n  | 'fixed_height_still'\n  | 'fixed_height_downsampled'\n  | 'fixed_width'\n  | 'fixed_width_still'\n  | 'fixed_width_downsampled';\n\ntype GiphyData = {\n  [key in GiphyVersions]: GiphyVersionInfo;\n};\n\nexport type HuaweiConfig = {\n  enabled?: boolean;\n  id?: string;\n  secret?: string;\n};\n\nexport type XiaomiConfig = {\n  enabled?: boolean;\n  package_name?: string;\n  secret?: string;\n};\n\nexport type LiteralStringForUnion = string & {};\n\nexport type LogLevel = 'info' | 'error' | 'warn';\n\nexport type Logger = (logLevel: LogLevel, message: string, extraData?: Record<string, unknown>) => void;\n\nexport type Message<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Partial<\n  MessageBase<StreamChatGenerics>\n> & {\n  mentioned_users?: string[];\n};\n\nexport type MessageBase<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['messageType'] & {\n  id: string;\n  attachments?: Attachment<StreamChatGenerics>[];\n  html?: string;\n  mml?: string;\n  parent_id?: string;\n  pin_expires?: string | null;\n  pinned?: boolean;\n  pinned_at?: string | null;\n  quoted_message_id?: string;\n  show_in_channel?: boolean;\n  text?: string;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type MessageLabel = 'deleted' | 'ephemeral' | 'error' | 'regular' | 'reply' | 'system';\n\nexport type Mute<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  created_at: string;\n  target: UserResponse<StreamChatGenerics>;\n  updated_at: string;\n  user: UserResponse<StreamChatGenerics>;\n};\n\nexport type PartialUpdateChannel<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<ChannelResponse<StreamChatGenerics>>;\n  unset?: Array<keyof ChannelResponse<StreamChatGenerics>>;\n};\n\nexport type PartialUserUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  id: string;\n  set?: Partial<UserResponse<StreamChatGenerics>>;\n  unset?: Array<keyof UserResponse<StreamChatGenerics>>;\n};\n\nexport type MessageUpdatableFields<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<StreamChatGenerics>,\n  'cid' | 'created_at' | 'updated_at' | 'deleted_at' | 'user' | 'user_id'\n>;\n\nexport type PartialMessageUpdate<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  set?: Partial<MessageUpdatableFields<StreamChatGenerics>>;\n  unset?: Array<keyof MessageUpdatableFields<StreamChatGenerics>>;\n};\n\nexport type PendingMessageResponse<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  message: MessageResponse<StreamChatGenerics>;\n  pending_message_metadata?: Record<string, string>;\n};\n\nexport type PermissionAPIObject = {\n  action?: string;\n  condition?: object;\n  custom?: boolean;\n  description?: string;\n  id?: string;\n  level?: string;\n  name?: string;\n  owner?: boolean;\n  same_team?: boolean;\n  tags?: string[];\n};\n\nexport type PermissionObject = {\n  action?: 'Deny' | 'Allow';\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[];\n};\n\nexport type Policy = {\n  action?: 0 | 1;\n  created_at?: string;\n  name?: string;\n  owner?: boolean;\n  priority?: number;\n  resources?: string[];\n  roles?: string[] | null;\n  updated_at?: string;\n};\n\nexport type RateLimitsInfo = {\n  limit: number;\n  remaining: number;\n  reset: number;\n};\n\nexport type RateLimitsMap = Record<EndpointName, RateLimitsInfo>;\n\nexport type Reaction<\n  StreamChatGenerics extends ExtendableGenerics = DefaultGenerics\n> = StreamChatGenerics['reactionType'] & {\n  type: string;\n  message_id?: string;\n  score?: number;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type Resource =\n  | 'AddLinks'\n  | 'BanUser'\n  | 'CreateChannel'\n  | 'CreateMessage'\n  | 'CreateReaction'\n  | 'DeleteAttachment'\n  | 'DeleteChannel'\n  | 'DeleteMessage'\n  | 'DeleteReaction'\n  | 'EditUser'\n  | 'MuteUser'\n  | 'ReadChannel'\n  | 'RunMessageAction'\n  | 'UpdateChannel'\n  | 'UpdateChannelMembers'\n  | 'UpdateMessage'\n  | 'UpdateUser'\n  | 'UploadAttachment';\n\nexport type SearchPayload<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  SearchOptions<StreamChatGenerics>,\n  'sort'\n> & {\n  client_id?: string;\n  connection_id?: string;\n  filter_conditions?: ChannelFilters<StreamChatGenerics>;\n  message_filter_conditions?: MessageFilters<StreamChatGenerics>;\n  query?: string;\n  sort?: Array<{\n    direction: AscDesc;\n    field: keyof SearchMessageSortBase<StreamChatGenerics>;\n  }>;\n};\n\nexport type TestPushDataInput = {\n  apnTemplate?: string;\n  firebaseDataTemplate?: string;\n  firebaseTemplate?: string;\n  messageID?: string;\n  pushProviderName?: string;\n  pushProviderType?: PushProvider;\n  skipDevices?: boolean;\n};\n\nexport type TestSQSDataInput = {\n  sqs_key?: string;\n  sqs_secret?: string;\n  sqs_url?: string;\n};\n\nexport type TokenOrProvider = null | string | TokenProvider | undefined;\n\nexport type TokenProvider = () => Promise<string>;\n\nexport type TranslationLanguages =\n  | ''\n  | 'af'\n  | 'am'\n  | 'ar'\n  | 'az'\n  | 'bg'\n  | 'bn'\n  | 'bs'\n  | 'cs'\n  | 'da'\n  | 'de'\n  | 'el'\n  | 'en'\n  | 'es'\n  | 'es-MX'\n  | 'et'\n  | 'fa'\n  | 'fa-AF'\n  | 'fi'\n  | 'fr'\n  | 'fr-CA'\n  | 'ha'\n  | 'he'\n  | 'hi'\n  | 'hr'\n  | 'hu'\n  | 'id'\n  | 'it'\n  | 'ja'\n  | 'ka'\n  | 'ko'\n  | 'lv'\n  | 'ms'\n  | 'nl'\n  | 'no'\n  | 'pl'\n  | 'ps'\n  | 'pt'\n  | 'ro'\n  | 'ru'\n  | 'sk'\n  | 'sl'\n  | 'so'\n  | 'sq'\n  | 'sr'\n  | 'sv'\n  | 'sw'\n  | 'ta'\n  | 'th'\n  | 'tl'\n  | 'tr'\n  | 'uk'\n  | 'ur'\n  | 'vi'\n  | 'zh'\n  | 'zh-TW';\n\nexport type TypingStartEvent = Event;\n\nexport type ReservedMessageFields =\n  | 'command'\n  | 'created_at'\n  | 'html'\n  | 'latest_reactions'\n  | 'own_reactions'\n  | 'quoted_message'\n  | 'reaction_counts'\n  | 'reply_count'\n  | 'type'\n  | 'updated_at'\n  | 'user'\n  | '__html';\n\nexport type UpdatedMessage<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = Omit<\n  MessageResponse<StreamChatGenerics>,\n  'mentioned_users'\n> & { mentioned_users?: string[] };\n\nexport type User<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = StreamChatGenerics['userType'] & {\n  id: string;\n  anon?: boolean;\n  name?: string;\n  role?: string;\n  teams?: string[];\n  username?: string;\n};\n\nexport type TaskResponse = {\n  task_id: string;\n};\n\nexport type DeleteChannelsResponse = {\n  result: Record<string, string>;\n} & Partial<TaskResponse>;\n\nexport type DeleteType = 'soft' | 'hard';\n\n/*\n  DeleteUserOptions specifies a collection of one or more `user_ids` to be deleted.\n\n  `user` soft|hard determines if the user needs to be hard- or soft-deleted, where hard-delete\n  implies that all related objects (messages, flags, etc) will be hard-deleted as well.\n  `conversations` soft|hard will delete any 1to1 channels that the user was a member of.\n  `messages` soft-hard will delete any messages that the user has sent.\n  `new_channel_owner_id` any channels owned by the hard-deleted user will be transferred to this user ID\n */\nexport type DeleteUserOptions = {\n  user: DeleteType;\n  conversations?: DeleteType;\n  messages?: DeleteType;\n  new_channel_owner_id?: string;\n};\n\nexport type SegmentData = {\n  description: string;\n  filter: {};\n  name: string;\n  type: 'channel' | 'user';\n};\n\nexport type Segment = {\n  created_at: string;\n  id: string;\n  in_use: boolean;\n  size: number;\n  status: 'computing' | 'ready';\n  updated_at: string;\n} & SegmentData;\n\nexport type CampaignSortField = {\n  field: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any;\n};\n\nexport type CampaignSort = {\n  fields: CampaignSortField[];\n  direction?: 'asc' | 'desc';\n};\n\nexport type CampaignQueryOptions = {\n  limit?: number;\n  sort?: CampaignSort;\n};\n\nexport type SegmentQueryOptions = CampaignQueryOptions;\nexport type RecipientQueryOptions = CampaignQueryOptions;\n\n// TODO: add better typing\nexport type SegmentFilters = {};\nexport type CampaignFilters = {};\nexport type RecipientFilters = {};\n\nexport type CampaignData = {\n  attachments: Attachment[];\n  channel_type: string;\n  defaults: Record<string, string>;\n  name: string;\n  segment_id: string;\n  text: string;\n  description?: string;\n  sender_id?: string;\n};\n\nexport type CampaignStatusName = 'draft' | 'stopped' | 'scheduled' | 'completed' | 'failed' | 'in_progress';\n\nexport type CampaignStatus = {\n  status: CampaignStatusName;\n  completed_at?: string;\n  errored_messages?: number;\n  failed_at?: string;\n  resumed_at?: string;\n  scheduled_at?: string;\n  scheduled_for?: string;\n  sent_messages?: number;\n  stopped_at?: string;\n  task_id?: string;\n};\n\nexport type Campaign = {\n  created_at: string;\n  id: string;\n  updated_at: string;\n} & CampaignData &\n  CampaignStatus;\n\nexport type TestCampaignResponse = {\n  status: CampaignStatusName;\n  details?: string;\n  results?: Record<string, string>;\n};\n\nexport type DeleteCampaignOptions = {\n  recipients?: boolean;\n};\n\nexport type Recipient = {\n  campaign_id: string;\n  channel_cid: string;\n  created_at: string;\n  status: 'pending' | 'sent' | 'failed';\n  updated_at: string;\n  details?: string;\n  message_id?: string;\n  receiver_id?: string;\n};\n\nexport type TaskStatus = {\n  created_at: string;\n  status: string;\n  task_id: string;\n  updated_at: string;\n  error?: {\n    description: string;\n    type: string;\n  };\n  result?: UR;\n};\n\nexport type TruncateOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  hard_delete?: boolean;\n  message?: Message<StreamChatGenerics>;\n  skip_push?: boolean;\n  truncated_at?: Date;\n  user?: UserResponse<StreamChatGenerics>;\n  user_id?: string;\n};\n\nexport type CreateImportURLResponse = {\n  path: string;\n  upload_url: string;\n};\n\nexport type CreateImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type GetImportResponse = {\n  import_task: ImportTask;\n};\n\nexport type CreateImportOptions = {\n  mode: 'insert' | 'upsert';\n};\n\nexport type ListImportsPaginationOptions = {\n  limit?: number;\n  offset?: number;\n};\n\nexport type ListImportsResponse = {\n  import_tasks: ImportTask[];\n};\n\nexport type ImportTaskHistory = {\n  created_at: string;\n  next_state: string;\n  prev_state: string;\n};\n\nexport type ImportTask = {\n  created_at: string;\n  history: ImportTaskHistory[];\n  id: string;\n  path: string;\n  state: string;\n  updated_at: string;\n  result?: UR;\n  size?: number;\n};\n\nexport type MessageSetType = 'latest' | 'current' | 'new';\n\nexport type PushProviderUpsertResponse = {\n  push_provider: PushProvider;\n};\n\nexport type PushProviderListResponse = {\n  push_providers: PushProvider[];\n};\n\nexport type CreateCallOptions<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> = {\n  id: string;\n  type: string;\n  options?: UR;\n  user?: UserResponse<StreamChatGenerics> | null;\n  user_id?: string;\n};\n\nexport type HMSCall = {\n  room: string;\n};\n\nexport type AgoraCall = {\n  channel: string;\n};\n\nexport type Call = {\n  id: string;\n  provider: string;\n  agora?: AgoraCall;\n  hms?: HMSCall;\n};\n\nexport type CreateCallResponse = APIResponse & {\n  call: Call;\n  token: string;\n  agora_app_id?: string;\n  agora_uid?: number;\n};\n\nexport type GetCallTokenResponse = APIResponse & {\n  token: string;\n  agora_app_id?: string;\n  agora_uid?: number;\n};\n\ntype ErrorResponseDetails = {\n  code: number;\n  messages: string[];\n};\n\nexport type APIErrorResponse = {\n  code: number;\n  duration: string;\n  message: string;\n  more_info: string;\n  StatusCode: number;\n  details?: ErrorResponseDetails;\n};\n\nexport class ErrorFromResponse<T> extends Error {\n  code?: number;\n  response?: AxiosResponse<T>;\n  status?: number;\n}\n", "/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport https from 'https';\nimport WebSocket from 'isomorphic-ws';\n\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\nimport { CheckSignature, DevToken, JWTUserToken } from './signing';\nimport { TokenManager } from './token_manager';\nimport { WSConnectionFallback } from './connection_fallback';\nimport { isErrorResponse, isWSFailure } from './errors';\nimport {\n  addFileToFormData,\n  chatCodes,\n  isFunction,\n  isOnline,\n  isOwnUserBaseProperty,\n  normalizeQuerySort,\n  randomId,\n  retryInterval,\n  sleep,\n} from './utils';\n\nimport {\n  APIErrorResponse,\n  APIResponse,\n  AppSettings,\n  AppSettingsAPIResponse,\n  BannedUsersFilters,\n  BannedUsersPaginationOptions,\n  BannedUsersResponse,\n  BannedUsersSort,\n  BanUserOptions,\n  BaseDeviceFields,\n  BlockList,\n  BlockListResponse,\n  Campaign,\n  CampaignData,\n  CampaignFilters,\n  CampaignQueryOptions,\n  ChannelAPIResponse,\n  ChannelData,\n  ChannelFilters,\n  ChannelMute,\n  ChannelOptions,\n  ChannelResponse,\n  ChannelSort,\n  ChannelStateOptions,\n  CheckPushResponse,\n  CheckSQSResponse,\n  Configs,\n  ConnectAPIResponse,\n  CreateChannelOptions,\n  CreateChannelResponse,\n  CreateCommandOptions,\n  CreateCommandResponse,\n  CreateImportOptions,\n  CreateImportResponse,\n  CreateImportURLResponse,\n  CustomPermissionOptions,\n  DefaultGenerics,\n  DeleteCampaignOptions,\n  DeleteChannelsResponse,\n  DeleteCommandResponse,\n  DeleteUserOptions,\n  Device,\n  EndpointName,\n  ErrorFromResponse,\n  Event,\n  EventHandler,\n  ExportChannelOptions,\n  ExportChannelRequest,\n  ExportChannelResponse,\n  ExportChannelStatusResponse,\n  ExportUsersRequest,\n  ExportUsersResponse,\n  ExtendableGenerics,\n  FlagMessageResponse,\n  FlagReportsFilters,\n  FlagReportsPaginationOptions,\n  FlagReportsResponse,\n  FlagsFilters,\n  FlagsPaginationOptions,\n  FlagsResponse,\n  FlagUserResponse,\n  GetCallTokenResponse,\n  GetChannelTypeResponse,\n  GetCommandResponse,\n  GetImportResponse,\n  GetMessageAPIResponse,\n  GetRateLimitsResponse,\n  ListChannelResponse,\n  ListCommandsResponse,\n  ListImportsPaginationOptions,\n  ListImportsResponse,\n  Logger,\n  MarkChannelsReadOptions,\n  Message,\n  MessageFilters,\n  MessageFlagsFilters,\n  MessageFlagsPaginationOptions,\n  MessageFlagsResponse,\n  MessageResponse,\n  Mute,\n  MuteUserOptions,\n  MuteUserResponse,\n  OGAttachment,\n  OwnUserResponse,\n  PartialMessageUpdate,\n  PartialUserUpdate,\n  PermissionAPIResponse,\n  PermissionsAPIResponse,\n  PushProvider,\n  PushProviderConfig,\n  PushProviderID,\n  PushProviderListResponse,\n  PushProviderUpsertResponse,\n  QueryChannelsAPIResponse,\n  ReactionResponse,\n  Recipient,\n  RecipientFilters,\n  RecipientQueryOptions,\n  ReservedMessageFields,\n  ReviewFlagReportOptions,\n  ReviewFlagReportResponse,\n  SearchAPIResponse,\n  SearchMessageSortBase,\n  SearchOptions,\n  SearchPayload,\n  Segment,\n  SegmentData,\n  SegmentFilters,\n  SegmentQueryOptions,\n  SendFileAPIResponse,\n  StreamChatOptions,\n  SyncOptions,\n  SyncResponse,\n  TaskResponse,\n  TaskStatus,\n  TestCampaignResponse,\n  TestPushDataInput,\n  TestSQSDataInput,\n  TokenOrProvider,\n  UnBanUserOptions,\n  UpdateChannelOptions,\n  UpdateChannelResponse,\n  UpdateCommandOptions,\n  UpdateCommandResponse,\n  UpdatedMessage,\n  UpdateMessageAPIResponse,\n  UserCustomEvent,\n  UserFilters,\n  UserOptions,\n  UserResponse,\n  UserSort,\n} from './types';\nimport { InsightMetrics, postInsights } from './insights';\n\nfunction isString(x: unknown): x is string {\n  return typeof x === 'string' || x instanceof String;\n}\n\nexport class StreamChat<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics> {\n  private static _instance?: unknown | StreamChat; // type is undefined|StreamChat, unknown is due to TS limitations with statics\n\n  _user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>;\n  activeChannels: {\n    [key: string]: Channel<StreamChatGenerics>;\n  };\n  anonymous: boolean;\n  persistUserOnConnectionFailure?: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  configs: Configs<StreamChatGenerics>;\n  key: string;\n  listeners: Record<string, Array<(event: Event<StreamChatGenerics>) => void>>;\n  logger: Logger;\n  /**\n   * When network is recovered, we re-query the active channels on client. But in single query, you can recover\n   * only 30 channels. So its not guaranteed that all the channels in activeChannels object have updated state.\n   * Thus in UI sdks, state recovery is managed by components themselves, they don't rely on js client for this.\n   *\n   * `recoverStateOnReconnect` parameter can be used in such cases, to disable state recovery within js client.\n   * When false, user/consumer of this client will need to make sure all the channels present on UI by\n   * manually calling queryChannels endpoint.\n   */\n  recoverStateOnReconnect?: boolean;\n  mutedChannels: ChannelMute<StreamChatGenerics>[];\n  mutedUsers: Mute<StreamChatGenerics>[];\n  node: boolean;\n  options: StreamChatOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse<StreamChatGenerics> | null;\n  state: ClientState<StreamChatGenerics>;\n  tokenManager: TokenManager<StreamChatGenerics>;\n  user?: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection<StreamChatGenerics> | null;\n  wsFallback?: WSConnectionFallback<StreamChatGenerics>;\n  wsPromise: ConnectAPIResponse<StreamChatGenerics> | null;\n  consecutiveFailures: number;\n  insightMetrics: InsightMetrics;\n  defaultWSTimeoutWithFallback: number;\n  defaultWSTimeout: number;\n  private nextRequestAbortController: AbortController | null = null;\n\n  /**\n   * Initialize a client\n   *\n   * **Only use constructor for advanced usages. It is strongly advised to use `StreamChat.getInstance()` instead of `new StreamChat()` to reduce integration issues due to multiple WebSocket connections**\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * new StreamChat('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * new StreamChat('api_key', { warmUp:true, timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * new StreamChat('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  constructor(key: string, options?: StreamChatOptions);\n  constructor(key: string, secret?: string, options?: StreamChatOptions);\n  constructor(key: string, secretOrOptions?: StreamChatOptions | string, options?: StreamChatOptions) {\n    // set the key\n    this.key = key;\n    this.listeners = {};\n    this.state = new ClientState<StreamChatGenerics>();\n    // a list of channels to hide ws events from\n    this.mutedChannels = [];\n    this.mutedUsers = [];\n\n    // set the secret\n    if (secretOrOptions && isString(secretOrOptions)) {\n      this.secret = secretOrOptions;\n    }\n\n    // set the options... and figure out defaults...\n    const inputOptions = options ? options : secretOrOptions && !isString(secretOrOptions) ? secretOrOptions : {};\n\n    this.browser = typeof inputOptions.browser !== 'undefined' ? inputOptions.browser : typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    this.options = {\n      timeout: 3000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      recoverStateOnReconnect: true,\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.axiosInstance = axios.create(this.options);\n\n    this.setBaseURL(this.options.baseURL || 'https://chat.stream-io-api.com');\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030');\n    }\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL('http://' + process.env.STREAM_LOCAL_TEST_HOST);\n    }\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n    // keeps a reference to all the channels that are in use\n    this.activeChannels = {};\n    // mapping between channel groups and configs\n    this.configs = {};\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure = this.options?.persistUserOnConnectionFailure;\n\n    // If its a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.insightMetrics = new InsightMetrics();\n\n    this.defaultWSTimeoutWithFallback = 6000;\n    this.defaultWSTimeout = 15000;\n\n    /**\n     * logger function should accept 3 parameters:\n     * @param logLevel string\n     * @param message   string\n     * @param extraData object\n     *\n     * e.g.,\n     * const client = new StreamChat('api_key', {}, {\n     * \t\tlogger = (logLevel, message, extraData) => {\n     * \t\t\tconsole.log(message);\n     * \t\t}\n     * })\n     *\n     * extraData contains tags array attached to log message. Tags can have one/many of following values:\n     * 1. api\n     * 2. api_request\n     * 3. api_response\n     * 4. client\n     * 5. channel\n     * 6. connection\n     * 7. event\n     *\n     * It may also contains some extra data, some examples have been mentioned below:\n     * 1. {\n     * \t\ttags: ['api', 'api_request', 'client'],\n     * \t\turl: string,\n     * \t\tpayload: object,\n     * \t\tconfig: object\n     * }\n     * 2. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\tresponse: object\n     * }\n     * 3. {\n     * \t\ttags: ['api', 'api_response', 'client'],\n     * \t\turl: string,\n     * \t\terror: object\n     * }\n     * 4. {\n     * \t\ttags: ['event', 'client'],\n     * \t\tevent: object\n     * }\n     * 5. {\n     * \t\ttags: ['channel'],\n     * \t\tchannel: object\n     * }\n     */\n    this.logger = isFunction(inputOptions.logger) ? inputOptions.logger : () => null;\n    this.recoverStateOnReconnect = this.options.recoverStateOnReconnect;\n  }\n\n  /**\n   * Get a client instance\n   *\n   * This function always returns the same Client instance to avoid issues raised by multiple Client and WS connections\n   *\n   * **After the first call, the client configuration will not change if the key or options parameters change**\n   *\n   * @param {string} key - the api key\n   * @param {string} [secret] - the api secret\n   * @param {StreamChatOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   * @example <caption>initialize the client in user mode</caption>\n   * StreamChat.getInstance('api_key')\n   * @example <caption>initialize the client in user mode with options</caption>\n   * StreamChat.getInstance('api_key', { timeout:5000 })\n   * @example <caption>secret is optional and only used in server side mode</caption>\n   * StreamChat.getInstance('api_key', \"secret\", { httpsAgent: customAgent })\n   */\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics>;\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    secret?: string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics>;\n  public static getInstance<StreamChatGenerics extends ExtendableGenerics = DefaultGenerics>(\n    key: string,\n    secretOrOptions?: StreamChatOptions | string,\n    options?: StreamChatOptions,\n  ): StreamChat<StreamChatGenerics> {\n    if (!StreamChat._instance) {\n      if (typeof secretOrOptions === 'string') {\n        StreamChat._instance = new StreamChat<StreamChatGenerics>(key, secretOrOptions, options);\n      } else {\n        StreamChat._instance = new StreamChat<StreamChatGenerics>(key, secretOrOptions);\n      }\n    }\n\n    return StreamChat._instance as StreamChat<StreamChatGenerics>;\n  }\n\n  devToken(userID: string) {\n    return DevToken(userID);\n  }\n\n  getAuthType() {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  }\n\n  setBaseURL(baseURL: string) {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL.replace('http', 'ws').replace(':3030', ':8800');\n  }\n\n  _getConnectionID = () => this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n\n  _hasConnectionID = () => Boolean(this._getConnectionID());\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = async (\n    user: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>,\n    userTokenOrProvider: TokenOrProvider,\n  ) => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.setUserPromise) {\n      console.warn(\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.setUserPromise;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n\n    const setTokenPromise = this._setToken(user, userTokenOrProvider);\n    this._setUser(user);\n\n    const wsPromise = this.openConnection();\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(\n      (result) => result[1], // We only return connection promise;\n    );\n\n    try {\n      return await this.setUserPromise;\n    } catch (err) {\n      if (this.persistUserOnConnectionFailure) {\n        // cleanup client to allow the user to retry connectUser again\n        this.closeConnection();\n      } else {\n        this.disconnectUser();\n      }\n      throw err;\n    }\n  };\n\n  /**\n   * @deprecated Please use connectUser() function instead. Its naming is more consistent with its functionality.\n   *\n   * setUser - Set the current user and open a WebSocket connection\n   *\n   * @param {OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  setUser = this.connectUser;\n\n  _setToken = (user: UserResponse<StreamChatGenerics>, userTokenOrProvider: TokenOrProvider) =>\n    this.tokenManager.setTokenOrProvider(userTokenOrProvider, user);\n\n  _setUser(user: OwnUserResponse<StreamChatGenerics> | UserResponse<StreamChatGenerics>) {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    this.userID = user.id;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  }\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = async (timeout?: number) => {\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    await Promise.all([this.wsConnection?.disconnect(timeout), this.wsFallback?.disconnect(timeout)]);\n    return Promise.resolve();\n  };\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = async () => {\n    if (!this.userID) {\n      throw Error('User is not set on client, use client.connectUser or client.connectAnonymousUser instead');\n    }\n\n    if (this.wsConnection?.isConnecting && this.wsPromise) {\n      this.logger('info', 'client:openConnection() - connection already in progress', {\n        tags: ['connection', 'client'],\n      });\n      return this.wsPromise;\n    }\n\n    if ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID()) {\n      this.logger('info', 'client:openConnection() - openConnection called twice, healthy connection already exists', {\n        tags: ['connection', 'client'],\n      });\n\n      return Promise.resolve();\n    }\n\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    this._startCleaning();\n    return this.wsPromise;\n  };\n\n  /**\n   * @deprecated Please use client.openConnction instead.\n   * @private\n   *\n   * Creates a new websocket connection with current user.\n   */\n  _setupConnection = this.openConnection;\n\n  /**\n   * updateAppSettings - updates application settings\n   *\n   * @param {AppSettings} options App settings.\n   * IE: {\n      'apn_config': {\n        'auth_type': 'token',\n        'auth_key\": fs.readFileSync(\n          './apn-push-auth-key.p8',\n          'utf-8',\n        ),\n        'key_id': 'keyid',\n        'team_id': 'teamid',\n        'notification_template\": 'notification handlebars template',\n        'bundle_id': 'com.apple.your.app',\n        'development': true\n      },\n      'firebase_config': {\n        'server_key': 'server key from fcm',\n        'notification_template': 'notification handlebars template',\n        'data_template': 'data handlebars template',\n        'apn_template': 'apn notification handlebars template under v2'\n      },\n      'webhook_url': 'https://acme.com/my/awesome/webhook/'\n    }\n   */\n  async updateAppSettings(options: AppSettings) {\n    const apn_config = options.apn_config;\n    if (apn_config?.p12_cert) {\n      options = {\n        ...options,\n        apn_config: {\n          ...apn_config,\n          p12_cert: Buffer.from(apn_config.p12_cert).toString('base64'),\n        },\n      };\n    }\n    return await this.patch<APIResponse>(this.baseURL + '/app', options);\n  }\n\n  _normalizeDate = (before: Date | string | null): string | null => {\n    if (before instanceof Date) {\n      before = before.toISOString();\n    }\n\n    if (before === '') {\n      throw new Error(\"Don't pass blank string for since, use null instead if resetting the token revoke\");\n    }\n\n    return before;\n  };\n\n  /**\n   * Revokes all tokens on application level issued before given time\n   */\n  async revokeTokens(before: Date | string | null) {\n    return await this.updateAppSettings({\n      revoke_tokens_issued_before: this._normalizeDate(before),\n    });\n  }\n\n  /**\n   * Revokes token for a user issued before given time\n   */\n  async revokeUserToken(userID: string, before?: Date | string | null) {\n    return await this.revokeUsersToken([userID], before);\n  }\n\n  /**\n   * Revokes tokens for a list of users issued before given time\n   */\n  async revokeUsersToken(userIDs: string[], before?: Date | string | null) {\n    if (before === undefined) {\n      before = new Date().toISOString();\n    } else {\n      before = this._normalizeDate(before);\n    }\n\n    const users: PartialUserUpdate<StreamChatGenerics>[] = [];\n    for (const userID of userIDs) {\n      users.push({\n        id: userID,\n        set: <Partial<UserResponse<StreamChatGenerics>>>{\n          revoke_tokens_issued_before: before,\n        },\n      });\n    }\n\n    return await this.partialUpdateUsers(users);\n  }\n\n  /**\n   * getAppSettings - retrieves application settings\n   */\n  async getAppSettings() {\n    return await this.get<AppSettingsAPIResponse<StreamChatGenerics>>(this.baseURL + '/app');\n  }\n\n  /**\n   * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n   *\n   * @param {string} userID User ID. If user has no devices, it will error\n   * @param {TestPushDataInput} [data] Overrides for push templates/message used\n   *  IE: {\n        messageID: 'id-of-message', // will error if message does not exist\n        apnTemplate: '{}', // if app doesn't have apn configured it will error\n        firebaseTemplate: '{}', // if app doesn't have firebase configured it will error\n        firebaseDataTemplate: '{}', // if app doesn't have firebase configured it will error\n        skipDevices: true, // skip config/device checks and sending to real devices\n        pushProviderName: 'staging' // one of your configured push providers\n        pushProviderType: 'apn' // one of supported provider types\n      }\n  */\n  async testPushSettings(userID: string, data: TestPushDataInput = {}) {\n    return await this.post<CheckPushResponse>(this.baseURL + '/check_push', {\n      user_id: userID,\n      ...(data.messageID ? { message_id: data.messageID } : {}),\n      ...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n      ...(data.firebaseTemplate ? { firebase_template: data.firebaseTemplate } : {}),\n      ...(data.firebaseDataTemplate ? { firebase_data_template: data.firebaseDataTemplate } : {}),\n      ...(data.skipDevices ? { skip_devices: true } : {}),\n      ...(data.pushProviderName ? { push_provider_name: data.pushProviderName } : {}),\n      ...(data.pushProviderType ? { push_provider_type: data.pushProviderType } : {}),\n    });\n  }\n\n  /**\n   * testSQSSettings - Tests that the given or configured SQS configuration is valid\n   *\n   * @param {TestSQSDataInput} [data] Overrides SQS settings for testing if needed\n   *  IE: {\n        sqs_key: 'auth_key',\n        sqs_secret: 'auth_secret',\n        sqs_url: 'url_to_queue',\n      }\n   */\n  async testSQSSettings(data: TestSQSDataInput = {}) {\n    return await this.post<CheckSQSResponse>(this.baseURL + '/check_sqs', data);\n  }\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client', {\n      tags: ['connection', 'client'],\n    });\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    const closePromise = this.closeConnection(timeout);\n\n    for (const channel of Object.values(this.activeChannels)) {\n      channel._disconnect();\n    }\n    // ensure we no longer return inactive channels\n    this.activeChannels = {};\n    // reset client state\n    this.state = new ClientState();\n    // reset token manager\n    setTimeout(this.tokenManager.reset); // delay reseting to use token for disconnect calls\n\n    // close the WS connection\n    return closePromise;\n  };\n\n  /**\n   *\n   * @deprecated Please use client.disconnectUser instead.\n   *\n   * Disconnects the websocket and removes the user from client.\n   */\n  disconnect = this.disconnectUser;\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = () => {\n    if ((this._isUsingServerAuth() || this.node) && !this.options.allowServerSideConnect) {\n      console.warn(\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    this.anonymous = true;\n    this.userID = randomId();\n    const anonymousUser = {\n      id: this.userID,\n      anon: true,\n    } as UserResponse<StreamChatGenerics>;\n\n    this._setToken(anonymousUser, '');\n    this._setUser(anonymousUser);\n\n    return this._setupConnection();\n  };\n\n  /**\n   * @deprecated Please use connectAnonymousUser. Its naming is more consistent with its functionality.\n   */\n  setAnonymousUser = this.connectAnonymousUser;\n\n  /**\n   * setGuestUser - Setup a temporary guest user\n   *\n   * @param {UserResponse<StreamChatGenerics>} user Data about this user. IE {name: \"john\"}\n   *\n   * @return {ConnectAPIResponse<StreamChatGenerics>} Returns a promise that resolves when the connection is setup\n   */\n  async setGuestUser(user: UserResponse<StreamChatGenerics>) {\n    let response: { access_token: string; user: UserResponse<StreamChatGenerics> } | undefined;\n    this.anonymous = true;\n    try {\n      response = await this.post<\n        APIResponse & {\n          access_token: string;\n          user: UserResponse<StreamChatGenerics>;\n        }\n      >(this.baseURL + '/guest', { user });\n    } catch (e) {\n      this.anonymous = false;\n      throw e;\n    }\n    this.anonymous = false;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { created_at, updated_at, last_active, online, ...guestUser } = response.user;\n    return await this.connectUser(guestUser as UserResponse<StreamChatGenerics>, response.access_token);\n  }\n\n  /**\n   * createToken - Creates a token to authenticate this user. This function is used server side.\n   * The resulting token should be passed to the client side when the users registers or logs in.\n   *\n   * @param {string} userID The User ID\n   * @param {number} [exp] The expiration time for the token expressed in the number of seconds since the epoch\n   *\n   * @return {string} Returns a token\n   */\n  createToken(userID: string, exp?: number, iat?: number) {\n    if (this.secret == null) {\n      throw Error(`tokens can only be created server-side using the API Secret`);\n    }\n    const extra: { exp?: number; iat?: number } = {};\n\n    if (exp) {\n      extra.exp = exp;\n    }\n\n    if (iat) {\n      extra.iat = iat;\n    }\n\n    return JWTUserToken(this.secret, userID, extra, {});\n  }\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   * or\n   * client.on(event => {console.log(event.type)})\n   *\n   * @param {EventHandler<StreamChatGenerics> | string} callbackOrString  The event type to listen for (optional)\n   * @param {EventHandler<StreamChatGenerics>} [callbackOrNothing] The callback to call\n   *\n   * @return {{ unsubscribe: () => void }} Description\n   */\n  on(callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(eventType: string, callback: EventHandler<StreamChatGenerics>): { unsubscribe: () => void };\n  on(\n    callbackOrString: EventHandler<StreamChatGenerics> | string,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ): { unsubscribe: () => void } {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : (callbackOrString as EventHandler<StreamChatGenerics>);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n    this.logger('info', `Attaching listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key].push(callback);\n    return {\n      unsubscribe: () => {\n        this.logger('info', `Removing listener for ${key} event`, {\n          tags: ['event', 'client'],\n        });\n        this.listeners[key] = this.listeners[key].filter((el) => el !== callback);\n      },\n    };\n  }\n\n  /**\n   * off - Remove the event handler\n   *\n   */\n  off(callback: EventHandler<StreamChatGenerics>): void;\n  off(eventType: string, callback: EventHandler<StreamChatGenerics>): void;\n  off(\n    callbackOrString: EventHandler<StreamChatGenerics> | string,\n    callbackOrNothing?: EventHandler<StreamChatGenerics>,\n  ) {\n    const key = callbackOrNothing ? (callbackOrString as string) : 'all';\n    const callback = callbackOrNothing ? callbackOrNothing : (callbackOrString as EventHandler<StreamChatGenerics>);\n    if (!(key in this.listeners)) {\n      this.listeners[key] = [];\n    }\n\n    this.logger('info', `Removing listener for ${key} event`, {\n      tags: ['event', 'client'],\n    });\n    this.listeners[key] = this.listeners[key].filter((value) => value !== callback);\n  }\n\n  _logApiRequest(\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) {\n    this.logger('info', `client: ${type} - Request - ${url}`, {\n      tags: ['api', 'api_request', 'client'],\n      url,\n      payload: data,\n      config,\n    });\n  }\n\n  _logApiResponse<T>(type: string, url: string, response: AxiosResponse<T>) {\n    this.logger('info', `client:${type} - Response - url: ${url} > status ${response.status}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      response,\n    });\n  }\n\n  _logApiError(type: string, url: string, error: unknown) {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      tags: ['api', 'api_response', 'client'],\n      url,\n      error,\n    });\n  }\n\n  doAxiosRequest = async <T>(\n    type: string,\n    url: string,\n    data?: unknown,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } = {},\n  ): Promise<T> => {\n    await this.tokenManager.tokenReady();\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any /**TODO: generalize error types  */) {\n      e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n      this._logApiError(type, url, e);\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        /** connection_fallback depends on this token expiration logic */\n        if (e.response.data.code === chatCodes.TOKEN_EXPIRED && !this.tokenManager.isStatic()) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        throw e as AxiosError<APIErrorResponse>;\n      }\n    }\n  };\n\n  get<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('get', url, null, { params });\n  }\n\n  put<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('put', url, data);\n  }\n\n  post<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('post', url, data);\n  }\n\n  patch<T>(url: string, data?: unknown) {\n    return this.doAxiosRequest<T>('patch', url, data);\n  }\n\n  delete<T>(url: string, params?: AxiosRequestConfig['params']) {\n    return this.doAxiosRequest<T>('delete', url, null, { params });\n  }\n\n  sendFile(\n    url: string,\n    uri: string | NodeJS.ReadableStream | Buffer | File,\n    name?: string,\n    contentType?: string,\n    user?: UserResponse<StreamChatGenerics>,\n  ) {\n    const data = addFileToFormData(uri, name, contentType);\n    if (user != null) data.append('user', JSON.stringify(user));\n\n    return this.doAxiosRequest<SendFileAPIResponse>('post', url, data, {\n      headers: data.getHeaders ? data.getHeaders() : {}, // node vs browser\n      config: {\n        timeout: 0,\n        maxContentLength: Infinity,\n        maxBodyLength: Infinity,\n      },\n    });\n  }\n\n  errorFromResponse(response: AxiosResponse<APIErrorResponse>): ErrorFromResponse<APIErrorResponse> {\n    let err: ErrorFromResponse<APIErrorResponse>;\n    err = new ErrorFromResponse(`StreamChat error HTTP code: ${response.status}`);\n    if (response.data && response.data.code) {\n      err = new Error(`StreamChat error code ${response.data.code}: ${response.data.message}`);\n      err.code = response.data.code;\n    }\n    err.response = response;\n    err.status = response.status;\n    return err;\n  }\n\n  handleResponse<T>(response: AxiosResponse<T>) {\n    const data = response.data;\n    if (isErrorResponse(response)) {\n      throw this.errorFromResponse(response);\n    }\n    return data;\n  }\n\n  dispatchEvent = (event: Event<StreamChatGenerics>) => {\n    if (!event.received_at) event.received_at = new Date();\n\n    // client event handlers\n    const postListenerCallbacks = this._handleClientEvent(event);\n\n    // channel event handlers\n    const cid = event.cid;\n    const channel = cid ? this.activeChannels[cid] : undefined;\n    if (channel) {\n      channel._handleChannelEvent(event);\n    }\n\n    this._callClientListeners(event);\n\n    if (channel) {\n      channel._callChannelListeners(event);\n    }\n\n    postListenerCallbacks.forEach((c) => c());\n  };\n\n  handleEvent = (messageEvent: WebSocket.MessageEvent) => {\n    // dispatch the event to the channel listeners\n    const jsonString = messageEvent.data as string;\n    const event = JSON.parse(jsonString) as Event<StreamChatGenerics>;\n    this.dispatchEvent(event);\n  };\n\n  /**\n   * Updates the members and watchers of the currently active channels that contain this user\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  _updateMemberWatcherReferences = (user: UserResponse<StreamChatGenerics>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      /** search the members and watchers and update as needed... */\n      if (channel?.state) {\n        if (channel.state.members[user.id]) {\n          channel.state.members[user.id].user = user;\n        }\n        if (channel.state.watchers[user.id]) {\n          channel.state.watchers[user.id] = user;\n        }\n      }\n    }\n  };\n\n  /**\n   * @deprecated Please _updateMemberWatcherReferences instead.\n   * @private\n   */\n  _updateUserReferences = this._updateMemberWatcherReferences;\n\n  /**\n   * @private\n   *\n   * Updates the messages from the currently active channels that contain this user,\n   * with updated user object.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   */\n  _updateUserMessageReferences = (user: UserResponse<StreamChatGenerics>) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      const state = channel.state;\n\n      /** update the messages from this user. */\n      state?.updateUserMessages(user);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Deletes the messages from the currently active channels that contain this user\n   *\n   * If hardDelete is true, all the content of message will be stripped down.\n   * Otherwise, only 'message.type' will be set as 'deleted'.\n   *\n   * @param {UserResponse<StreamChatGenerics>} user\n   * @param {boolean} hardDelete\n   */\n  _deleteUserMessageReference = (user: UserResponse<StreamChatGenerics>, hardDelete = false) => {\n    const refMap = this.state.userChannelReferences[user.id] || {};\n\n    for (const channelID in refMap) {\n      const channel = this.activeChannels[channelID];\n      const state = channel.state;\n\n      /** deleted the messages from this user. */\n      state?.deleteUserMessages(user, hardDelete);\n    }\n  };\n\n  /**\n   * @private\n   *\n   * Handle following user related events:\n   * - user.presence.changed\n   * - user.updated\n   * - user.deleted\n   *\n   * @param {Event} event\n   */\n  _handleUserEvent = (event: Event<StreamChatGenerics>) => {\n    if (!event.user) {\n      return;\n    }\n\n    /** update the client.state with any changes to users */\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n      if (event.user.id === this.userID) {\n        const user = { ...(this.user || {}) };\n        const _user = { ...(this._user || {}) };\n\n        // Remove deleted properties from user objects.\n        for (const key in this.user) {\n          if (key in event.user || isOwnUserBaseProperty(key)) {\n            continue;\n          }\n\n          delete user[key];\n          delete _user[key];\n        }\n\n        /** Updating only available properties in _user object. */\n        for (const key in event.user) {\n          if (_user && key in _user) {\n            _user[key] = event.user[key];\n          }\n        }\n\n        // @ts-expect-error\n        this._user = { ..._user };\n        this.user = { ...user, ...event.user };\n      }\n\n      this.state.updateUser(event.user);\n      this._updateMemberWatcherReferences(event.user);\n    }\n\n    if (event.type === 'user.updated') {\n      this._updateUserMessageReferences(event.user);\n    }\n\n    if (event.type === 'user.deleted' && event.user.deleted_at && (event.mark_messages_deleted || event.hard_delete)) {\n      this._deleteUserMessageReference(event.user, event.hard_delete);\n    }\n  };\n\n  _handleClientEvent(event: Event<StreamChatGenerics>) {\n    const client = this;\n    const postListenerCallbacks = [];\n    this.logger('info', `client:_handleClientEvent - Received event of type { ${event.type} }`, {\n      tags: ['event', 'client'],\n      event,\n    });\n\n    if (event.type === 'user.presence.changed' || event.type === 'user.updated' || event.type === 'user.deleted') {\n      this._handleUserEvent(event);\n    }\n\n    if (event.type === 'health.check' && event.me) {\n      client.user = event.me;\n      client.state.updateUser(event.me);\n      client.mutedChannels = event.me.channel_mutes;\n      client.mutedUsers = event.me.mutes;\n    }\n\n    if (event.channel && event.type === 'notification.message_new') {\n      this._addChannelConfig(event.channel);\n    }\n\n    if (event.type === 'notification.channel_mutes_updated' && event.me?.channel_mutes) {\n      const currentMutedChannelIds: string[] = [];\n      const nextMutedChannelIds: string[] = [];\n\n      this.mutedChannels.forEach((mute) => mute.channel && currentMutedChannelIds.push(mute.channel.cid));\n      event.me.channel_mutes.forEach((mute) => mute.channel && nextMutedChannelIds.push(mute.channel.cid));\n\n      /** Set the unread count of un-muted channels to 0, which is the behaviour of backend */\n      currentMutedChannelIds.forEach((cid) => {\n        if (!nextMutedChannelIds.includes(cid) && this.activeChannels[cid]) {\n          this.activeChannels[cid].state.unreadCount = 0;\n        }\n      });\n\n      this.mutedChannels = event.me.channel_mutes;\n    }\n\n    if (event.type === 'notification.mutes_updated' && event.me?.mutes) {\n      this.mutedUsers = event.me.mutes;\n    }\n\n    if (event.type === 'notification.mark_read' && event.unread_channels === 0) {\n      const activeChannelKeys = Object.keys(this.activeChannels);\n      activeChannelKeys.forEach((activeChannelKey) => (this.activeChannels[activeChannelKey].state.unreadCount = 0));\n    }\n\n    if ((event.type === 'channel.deleted' || event.type === 'notification.channel_deleted') && event.cid) {\n      client.state.deleteAllChannelReference(event.cid);\n      this.activeChannels[event.cid]?._disconnect();\n\n      postListenerCallbacks.push(() => {\n        if (!event.cid) return;\n\n        delete this.activeChannels[event.cid];\n      });\n    }\n\n    return postListenerCallbacks;\n  }\n\n  _muteStatus(cid: string) {\n    let muteStatus;\n    for (let i = 0; i < this.mutedChannels.length; i++) {\n      const mute = this.mutedChannels[i];\n      if (mute.channel?.cid === cid) {\n        muteStatus = {\n          muted: mute.expires ? new Date(mute.expires).getTime() > new Date().getTime() : true,\n          createdAt: mute.created_at ? new Date(mute.created_at) : new Date(),\n          expiresAt: mute.expires ? new Date(mute.expires) : null,\n        };\n        break;\n      }\n    }\n\n    if (muteStatus) {\n      return muteStatus;\n    }\n\n    return {\n      muted: false,\n      createdAt: null,\n      expiresAt: null,\n    };\n  }\n\n  _callClientListeners = (event: Event<StreamChatGenerics>) => {\n    const client = this;\n    // gather and call the listeners\n    const listeners: Array<(event: Event<StreamChatGenerics>) => void> = [];\n    if (client.listeners.all) {\n      listeners.push(...client.listeners.all);\n    }\n    if (client.listeners[event.type]) {\n      listeners.push(...client.listeners[event.type]);\n    }\n\n    // call the event and send it to the listeners\n    for (const listener of listeners) {\n      listener(event);\n    }\n  };\n\n  recoverState = async () => {\n    this.logger('info', `client:recoverState() - Start of recoverState with connectionID ${this._getConnectionID()}`, {\n      tags: ['connection'],\n    });\n\n    const cids = Object.keys(this.activeChannels);\n    if (cids.length && this.recoverStateOnReconnect) {\n      this.logger('info', `client:recoverState() - Start the querying of ${cids.length} channels`, {\n        tags: ['connection', 'client'],\n      });\n\n      await this.queryChannels(\n        { cid: { $in: cids } } as ChannelFilters<StreamChatGenerics>,\n        { last_message_at: -1 },\n        { limit: 30 },\n      );\n\n      this.logger('info', 'client:recoverState() - Querying channels finished', { tags: ['connection', 'client'] });\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<StreamChatGenerics>);\n    } else {\n      this.dispatchEvent({\n        type: 'connection.recovered',\n      } as Event<StreamChatGenerics>);\n    }\n\n    this.wsPromise = Promise.resolve();\n    this.setUserPromise = Promise.resolve();\n  };\n\n  /**\n   * @private\n   */\n  async connect() {\n    if (!this.userID || !this._user) {\n      throw Error('Call connectUser or connectAnonymousUser before starting the connection');\n    }\n    if (!this.wsBaseURL) {\n      throw Error('Websocket base url not set');\n    }\n    if (!this.clientID) {\n      throw Error('clientID is not set');\n    }\n\n    if (!this.wsConnection && (this.options.warmUp || this.options.enableInsights)) {\n      this._sayHi();\n    }\n    // The StableWSConnection handles all the reconnection logic.\n    if (this.options.wsConnection && this.node) {\n      // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n      ((this.options.wsConnection as unknown) as StableWSConnection<StreamChatGenerics>).setClient(this);\n      this.wsConnection = (this.options.wsConnection as unknown) as StableWSConnection<StreamChatGenerics>;\n    } else {\n      this.wsConnection = new StableWSConnection<StreamChatGenerics>({\n        client: this,\n      });\n    }\n\n    try {\n      // if fallback is used before, continue using it instead of waiting for WS to fail\n      if (this.wsFallback) {\n        return await this.wsFallback.connect();\n      }\n\n      // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n      return await this.wsConnection.connect(\n        this.options.enableWSFallback ? this.defaultWSTimeoutWithFallback : this.defaultWSTimeout,\n      );\n    } catch (err) {\n      // run fallback only if it's WS/Network error and not a normal API error\n      // make sure browser is online before even trying the longpoll\n      if (this.options.enableWSFallback && isWSFailure(err) && isOnline()) {\n        this.logger('info', 'client:connect() - WS failed, fallback to longpoll', { tags: ['connection', 'client'] });\n        this.dispatchEvent({ type: 'transport.changed', mode: 'longpoll' });\n\n        this.wsConnection._destroyCurrentWSConnection();\n        this.wsConnection.disconnect().then(); // close WS so no retry\n        this.wsFallback = new WSConnectionFallback<StreamChatGenerics>({\n          client: this,\n        });\n        return await this.wsFallback.connect();\n      }\n\n      throw err;\n    }\n  }\n\n  /**\n   * Check the connectivity with server for warmup purpose.\n   *\n   * @private\n   */\n  _sayHi() {\n    const client_request_id = randomId();\n    const opts = { headers: { 'x-client-request-id': client_request_id } };\n    this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch((e) => {\n      if (this.options.enableInsights) {\n        postInsights('http_hi_failed', {\n          api_key: this.key,\n          err: e,\n          client_request_id,\n        });\n      }\n    });\n  }\n\n  /**\n   * queryUsers - Query users and watch user presence\n   *\n   * @param {UserFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n   * @param {UserSort<StreamChatGenerics>} sort Sort options, for instance [{last_active: -1}].\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_active: -1}, {created_at: 1}]\n   * @param {UserOptions} options Option object, {presence: true}\n   *\n   * @return {Promise<{ users: Array<UserResponse<StreamChatGenerics>> }>} User Query Response\n   */\n  async queryUsers(\n    filterConditions: UserFilters<StreamChatGenerics>,\n    sort: UserSort<StreamChatGenerics> = [],\n    options: UserOptions = {},\n  ) {\n    const defaultOptions = {\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    if (!this._hasConnectionID()) {\n      defaultOptions.presence = false;\n    }\n\n    // Return a list of users\n    const data = await this.get<APIResponse & { users: Array<UserResponse<StreamChatGenerics>> }>(\n      this.baseURL + '/users',\n      {\n        payload: {\n          filter_conditions: filterConditions,\n          sort: normalizeQuerySort(sort),\n          ...defaultOptions,\n          ...options,\n        },\n      },\n    );\n\n    this.state.updateUsers(data.users);\n\n    return data;\n  }\n\n  /**\n   * queryBannedUsers - Query user bans\n   *\n   * @param {BannedUsersFilters} filterConditions MongoDB style filter conditions\n   * @param {BannedUsersSort} sort Sort options [{created_at: 1}].\n   * @param {BannedUsersPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<BannedUsersResponse<StreamChatGenerics>>} Ban Query Response\n   */\n  async queryBannedUsers(\n    filterConditions: BannedUsersFilters = {},\n    sort: BannedUsersSort = [],\n    options: BannedUsersPaginationOptions = {},\n  ) {\n    // Return a list of user bans\n    return await this.get<BannedUsersResponse<StreamChatGenerics>>(this.baseURL + '/query_banned_users', {\n      payload: {\n        filter_conditions: filterConditions,\n        sort: normalizeQuerySort(sort),\n        ...options,\n      },\n    });\n  }\n\n  /**\n   * queryMessageFlags - Query message flags\n   *\n   * @param {MessageFlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {MessageFlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<MessageFlagsResponse<StreamChatGenerics>>} Message Flags Response\n   */\n  async queryMessageFlags(filterConditions: MessageFlagsFilters = {}, options: MessageFlagsPaginationOptions = {}) {\n    // Return a list of message flags\n    return await this.get<MessageFlagsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flags/message', {\n      payload: { filter_conditions: filterConditions, ...options },\n    });\n  }\n\n  /**\n   * queryChannels - Query channels\n   *\n   * @param {ChannelFilters<StreamChatGenerics>} filterConditions object MongoDB style filters\n   * @param {ChannelSort<StreamChatGenerics>} [sort] Sort options, for instance {created_at: -1}.\n   * When using multiple fields, make sure you use array of objects to guarantee field order, for instance [{last_updated: -1}, {created_at: 1}]\n   * @param {ChannelOptions} [options] Options object\n   * @param {ChannelStateOptions} [stateOptions] State options object. These options will only be used for state management and won't be sent in the request.\n   * - stateOptions.skipInitialization - Skips the initialization of the state for the channels matching the ids in the list.\n   *\n   * @return {Promise<{ channels: Array<ChannelAPIResponse<AStreamChatGenerics>>}> } search channels response\n   */\n  async queryChannels(\n    filterConditions: ChannelFilters<StreamChatGenerics>,\n    sort: ChannelSort<StreamChatGenerics> = [],\n    options: ChannelOptions = {},\n    stateOptions: ChannelStateOptions = {},\n  ) {\n    const defaultOptions: ChannelOptions = {\n      state: true,\n      watch: true,\n      presence: false,\n    };\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n    if (!this._hasConnectionID()) {\n      defaultOptions.watch = false;\n    }\n\n    // Return a list of channels\n    const payload = {\n      filter_conditions: filterConditions,\n      sort: normalizeQuerySort(sort),\n      ...defaultOptions,\n      ...options,\n    };\n\n    const data = await this.post<QueryChannelsAPIResponse<StreamChatGenerics>>(this.baseURL + '/channels', payload);\n\n    this.dispatchEvent({\n      type: 'channels.queried',\n      queriedChannels: {\n        channels: data.channels,\n        isLatestMessageSet: true,\n      },\n    });\n\n    return this.hydrateActiveChannels(data.channels, stateOptions);\n  }\n\n  hydrateActiveChannels(\n    channelsFromApi: ChannelAPIResponse<StreamChatGenerics>[] = [],\n    stateOptions: ChannelStateOptions = {},\n  ) {\n    const { skipInitialization, offlineMode = false } = stateOptions;\n\n    for (const channelState of channelsFromApi) {\n      this._addChannelConfig(channelState.channel);\n    }\n\n    const channels: Channel<StreamChatGenerics>[] = [];\n\n    for (const channelState of channelsFromApi) {\n      const c = this.channel(channelState.channel.type, channelState.channel.id);\n      c.data = channelState.channel;\n      c.offlineMode = offlineMode;\n      c.initialized = !offlineMode;\n\n      if (skipInitialization === undefined) {\n        c._initializeState(channelState, 'latest');\n      } else if (!skipInitialization.includes(channelState.channel.id)) {\n        c.state.clearMessages();\n        c._initializeState(channelState, 'latest');\n      }\n\n      channels.push(c);\n    }\n\n    if (!offlineMode) {\n      // If the channels are coming from server, then clear out the\n      // previously help offline channels.\n      for (const key in this.activeChannels) {\n        const channel = this.activeChannels[key];\n        if (channel.offlineMode) {\n          delete this.activeChannels[key];\n        }\n      }\n    }\n\n    return channels;\n  }\n\n  /**\n   * search - Query messages\n   *\n   * @param {ChannelFilters<StreamChatGenerics>} filterConditions MongoDB style filter conditions\n   * @param {MessageFilters<StreamChatGenerics> | string} query search query or object MongoDB style filters\n   * @param {SearchOptions<StreamChatGenerics>} [options] Option object, {user_id: 'tommaso'}\n   *\n   * @return {Promise<SearchAPIResponse<StreamChatGenerics>>} search messages response\n   */\n  async search(\n    filterConditions: ChannelFilters<StreamChatGenerics>,\n    query: string | MessageFilters<StreamChatGenerics>,\n    options: SearchOptions<StreamChatGenerics> = {},\n  ) {\n    if (options.offset && (options.sort || options.next)) {\n      throw Error(`Cannot specify offset with sort or next parameters`);\n    }\n    const payload: SearchPayload<StreamChatGenerics> = {\n      filter_conditions: filterConditions,\n      ...options,\n      sort: options.sort ? normalizeQuerySort<SearchMessageSortBase<StreamChatGenerics>>(options.sort) : undefined,\n    };\n    if (typeof query === 'string') {\n      payload.query = query;\n    } else if (typeof query === 'object') {\n      payload.message_filter_conditions = query;\n    } else {\n      throw Error(`Invalid type ${typeof query} for query parameter`);\n    }\n\n    // Make sure we wait for the connect promise if there is a pending one\n    await this.wsPromise;\n\n    return await this.get<SearchAPIResponse<StreamChatGenerics>>(this.baseURL + '/search', { payload });\n  }\n\n  /**\n   * setLocalDevice - Set the device info for the current client(device) that will be sent via WS connection automatically\n   *\n   * @param {BaseDeviceFields} device the device object\n   * @param {string} device.id device id\n   * @param {string} device.push_provider the push provider\n   *\n   */\n  setLocalDevice(device: BaseDeviceFields) {\n    if (\n      (this.wsConnection?.isConnecting && this.wsPromise) ||\n      ((this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) && this._hasConnectionID())\n    ) {\n      throw new Error('you can only set device before opening a websocket connection');\n    }\n\n    this.options.device = device;\n  }\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {PushProvider} push_provider the push provider\n   * @param {string} [userID] the user id (defaults to current user)\n   * @param {string} [push_provider_name] user provided push provider name for multi bundle support\n   *\n   */\n  async addDevice(id: string, push_provider: PushProvider, userID?: string, push_provider_name?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/devices', {\n      id,\n      push_provider,\n      ...(userID != null ? { user_id: userID } : {}),\n      ...(push_provider_name != null ? { push_provider_name } : {}),\n    });\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   *\n   * @param {string} [userID] User ID. Only works on serverside\n   *\n   * @return {Device<StreamChatGenerics>[]} Array of devices\n   */\n  async getDevices(userID?: string) {\n    return await this.get<APIResponse & { devices?: Device<StreamChatGenerics>[] }>(\n      this.baseURL + '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  }\n\n  /**\n   * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   *\n   */\n  async removeDevice(id: string, userID?: string) {\n    return await this.delete<APIResponse>(this.baseURL + '/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  }\n\n  /**\n   * getRateLimits - Returns the rate limits quota and usage for the current app, possibly filter for a specific platform and/or endpoints.\n   * Only available server-side.\n   *\n   * @param {object} [params] The params for the call. If none of the params are set, all limits for all platforms are returned.\n   * @returns {Promise<GetRateLimitsResponse>}\n   */\n  async getRateLimits(params?: {\n    android?: boolean;\n    endpoints?: EndpointName[];\n    ios?: boolean;\n    serverSide?: boolean;\n    web?: boolean;\n  }) {\n    const { serverSide, web, android, ios, endpoints } = params || {};\n    return this.get<GetRateLimitsResponse>(this.baseURL + '/rate_limits', {\n      server_side: serverSide,\n      web,\n      android,\n      ios,\n      endpoints: endpoints ? endpoints.join(',') : undefined,\n    });\n  }\n\n  _addChannelConfig({ cid, config }: ChannelResponse<StreamChatGenerics>) {\n    this.configs[cid] = config;\n  }\n\n  /**\n   * channel - Returns a new channel with the given type, id and custom data\n   *\n   * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter and provide the list of members.\n   * Make sure to await channel.create() or channel.watch() before accessing channel functions:\n   * ie. channel = client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n   * await channel.create() to assign an ID to channel\n   *\n   * @param {string} channelType The channel type\n   * @param {string | ChannelData<StreamChatGenerics> | null} [channelIDOrCustom]   The channel ID, you can leave this out if you want to create a conversation channel\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  channel(\n    channelType: string,\n    channelID?: string | null,\n    custom?: ChannelData<StreamChatGenerics>,\n  ): Channel<StreamChatGenerics>;\n  channel(channelType: string, custom?: ChannelData<StreamChatGenerics>): Channel<StreamChatGenerics>;\n  channel(\n    channelType: string,\n    channelIDOrCustom?: string | ChannelData<StreamChatGenerics> | null,\n    custom: ChannelData<StreamChatGenerics> = {} as ChannelData<StreamChatGenerics>,\n  ) {\n    if (!this.userID && !this._isUsingServerAuth()) {\n      throw Error('Call connectUser or connectAnonymousUser before creating a channel');\n    }\n\n    if (~channelType.indexOf(':')) {\n      throw Error(`Invalid channel group ${channelType}, can't contain the : character`);\n    }\n\n    // support channel(\"messaging\", null, {options})\n    // support channel(\"messaging\", undefined, {options})\n    // support channel(\"messaging\", \"\", {options})\n    if (channelIDOrCustom == null || channelIDOrCustom === '') {\n      return new Channel<StreamChatGenerics>(this, channelType, undefined, custom);\n    }\n\n    // support channel(\"messaging\", {options})\n    if (typeof channelIDOrCustom === 'object') {\n      return this.getChannelByMembers(channelType, channelIDOrCustom);\n    }\n\n    return this.getChannelById(channelType, channelIDOrCustom, custom);\n  }\n\n  /**\n   * It's a helper method for `client.channel()` method, used to create unique conversation or\n   * channel based on member list instead of id.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelByMembers = (channelType: string, custom: ChannelData<StreamChatGenerics>) => {\n    // Check if the channel already exists.\n    // Only allow 1 channel object per cid\n    const membersStr = [...(custom.members || [])].sort().join(',');\n    const tempCid = `${channelType}:!members-${membersStr}`;\n\n    if (!membersStr) {\n      throw Error('Please specify atleast one member when creating unique conversation');\n    }\n\n    // channel could exist in `activeChannels` list with either one of the following two keys:\n    // 1. cid - Which gets set on channel only after calling channel.query or channel.watch or channel.create\n    // 2. Sorted membersStr - E.g., \"messaging:amin,vishal\" OR \"messaging:amin,jaap,tom\"\n    //                        This is set when you create a channel, but haven't queried yet. After query,\n    //                        we will replace it with `cid`\n    for (const key in this.activeChannels) {\n      const channel = this.activeChannels[key];\n      if (channel.disconnected) {\n        continue;\n      }\n\n      if (key === tempCid) {\n        return channel;\n      }\n\n      if (key.indexOf(`${channelType}:!members-`) === 0) {\n        const membersStrInExistingChannel = Object.keys(channel.state.members).sort().join(',');\n        if (membersStrInExistingChannel === membersStr) {\n          return channel;\n        }\n      }\n    }\n\n    const channel = new Channel<StreamChatGenerics>(this, channelType, undefined, custom);\n\n    // For the time being set the key as membersStr, since we don't know the cid yet.\n    // In channel.query, we will replace it with 'cid'.\n    this.activeChannels[tempCid] = channel;\n    return channel;\n  };\n\n  /**\n   * Its a helper method for `client.channel()` method, used to channel given the id of channel.\n   *\n   * If the channel already exists in `activeChannels` list, then we simply return it, since that\n   * means the same channel was already requested or created.\n   *\n   * Otherwise we create a new instance of Channel class and return it.\n   *\n   * @private\n   *\n   * @param {string} channelType The channel type\n   * @param {string} [channelID] The channel ID\n   * @param {object} [custom]    Custom data to attach to the channel\n   *\n   * @return {channel} The channel object, initialize it using channel.watch()\n   */\n  getChannelById = (channelType: string, channelID: string, custom: ChannelData<StreamChatGenerics>) => {\n    if (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n      throw Error(`Invalid channel id ${channelID}, can't contain the : character`);\n    }\n\n    // only allow 1 channel object per cid\n    const cid = `${channelType}:${channelID}`;\n    if (cid in this.activeChannels && !this.activeChannels[cid].disconnected) {\n      const channel = this.activeChannels[cid];\n      if (Object.keys(custom).length > 0) {\n        channel.data = custom;\n        channel._data = custom;\n      }\n      return channel;\n    }\n    const channel = new Channel<StreamChatGenerics>(this, channelType, channelID, custom);\n    this.activeChannels[channel.cid] = channel;\n\n    return channel;\n  };\n\n  /**\n   * partialUpdateUser - Update the given user object\n   *\n   * @param {PartialUserUpdate<StreamChatGenerics>} partialUserObject which should contain id and any of \"set\" or \"unset\" params;\n   * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>} list of updated users\n   */\n  async partialUpdateUser(partialUserObject: PartialUserUpdate<StreamChatGenerics>) {\n    return await this.partialUpdateUsers([partialUserObject]);\n  }\n\n  /**\n   * upsertUsers - Batch upsert the list of users\n   *\n   * @param {UserResponse<StreamChatGenerics>[]} users list of users\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  async upsertUsers(users: UserResponse<StreamChatGenerics>[]) {\n    const userMap: { [key: string]: UserResponse<StreamChatGenerics> } = {};\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n      userMap[userObject.id] = userObject;\n    }\n\n    return await this.post<\n      APIResponse & {\n        users: { [key: string]: UserResponse<StreamChatGenerics> };\n      }\n    >(this.baseURL + '/users', { users: userMap });\n  }\n\n  /**\n   * @deprecated Please use upsertUsers() function instead.\n   *\n   * updateUsers - Batch update the list of users\n   *\n   * @param {UserResponse<StreamChatGenerics>[]} users list of users\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  updateUsers = this.upsertUsers;\n\n  /**\n   * upsertUser - Update or Create the given user object\n   *\n   * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  upsertUser(userObject: UserResponse<StreamChatGenerics>) {\n    return this.upsertUsers([userObject]);\n  }\n\n  /**\n   * @deprecated Please use upsertUser() function instead.\n   *\n   * updateUser - Update or Create the given user object\n   *\n   * @param {UserResponse<StreamChatGenerics>} userObject user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  updateUser = this.upsertUser;\n\n  /**\n   * partialUpdateUsers - Batch partial update of users\n   *\n   * @param {PartialUserUpdate<StreamChatGenerics>[]} users list of partial update requests\n   *\n   * @return {Promise<{ users: { [key: string]: UserResponse<StreamChatGenerics> } }>}\n   */\n  async partialUpdateUsers(users: PartialUserUpdate<StreamChatGenerics>[]) {\n    for (const userObject of users) {\n      if (!userObject.id) {\n        throw Error('User ID is required when updating a user');\n      }\n    }\n\n    return await this.patch<\n      APIResponse & {\n        users: { [key: string]: UserResponse<StreamChatGenerics> };\n      }\n    >(this.baseURL + '/users', { users });\n  }\n\n  async deleteUser(\n    userID: string,\n    params?: {\n      delete_conversation_channels?: boolean;\n      hard_delete?: boolean;\n      mark_messages_deleted?: boolean;\n    },\n  ) {\n    return await this.delete<\n      APIResponse & { user: UserResponse<StreamChatGenerics> } & {\n        task_id?: string;\n      }\n    >(this.baseURL + `/users/${userID}`, params);\n  }\n\n  /**\n   * restoreUsers - Restore soft deleted users\n   *\n   * @param {string[]} user_ids which users to restore\n   *\n   * @return {APIResponse} A task ID\n   */\n  async restoreUsers(user_ids: string[]) {\n    return await this.post<APIResponse>(this.baseURL + `/users/restore`, {\n      user_ids,\n    });\n  }\n\n  async reactivateUser(\n    userID: string,\n    options?: {\n      created_by_id?: string;\n      name?: string;\n      restore_messages?: boolean;\n    },\n  ) {\n    return await this.post<APIResponse & { user: UserResponse<StreamChatGenerics> }>(\n      this.baseURL + `/users/${userID}/reactivate`,\n      { ...options },\n    );\n  }\n\n  async deactivateUser(userID: string, options?: { created_by_id?: string; mark_messages_deleted?: boolean }) {\n    return await this.post<APIResponse & { user: UserResponse<StreamChatGenerics> }>(\n      this.baseURL + `/users/${userID}/deactivate`,\n      { ...options },\n    );\n  }\n\n  async exportUser(userID: string, options?: Record<string, string>) {\n    return await this.get<\n      APIResponse & {\n        messages: MessageResponse<StreamChatGenerics>[];\n        reactions: ReactionResponse<StreamChatGenerics>[];\n        user: UserResponse<StreamChatGenerics>;\n      }\n    >(this.baseURL + `/users/${userID}/export`, { ...options });\n  }\n\n  /** banUser - bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async banUser(targetUserID: string, options?: BanUserOptions<StreamChatGenerics>) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** unbanUser - revoke global ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async unbanUser(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.delete<APIResponse>(this.baseURL + '/moderation/ban', {\n      target_user_id: targetUserID,\n      ...options,\n    });\n  }\n\n  /** shadowBan - shadow bans a user from all channels\n   *\n   * @param {string} targetUserID\n   * @param {BanUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async shadowBan(targetUserID: string, options?: BanUserOptions<StreamChatGenerics>) {\n    return await this.banUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** removeShadowBan - revoke global shadow ban for a user\n   *\n   * @param {string} targetUserID\n   * @param {UnBanUserOptions} [options]\n   * @returns {Promise<APIResponse>}\n   */\n  async removeShadowBan(targetUserID: string, options?: UnBanUserOptions) {\n    return await this.unbanUser(targetUserID, {\n      shadow: true,\n      ...options,\n    });\n  }\n\n  /** muteUser - mutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [userID] Only used with serverside auth\n   * @param {MuteUserOptions<StreamChatGenerics>} [options]\n   * @returns {Promise<MuteUserResponse<StreamChatGenerics>>}\n   */\n  async muteUser(targetID: string, userID?: string, options: MuteUserOptions<StreamChatGenerics> = {}) {\n    return await this.post<MuteUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/mute', {\n      target_id: targetID,\n      ...(userID ? { user_id: userID } : {}),\n      ...options,\n    });\n  }\n\n  /** unmuteUser - unmutes a user\n   *\n   * @param {string} targetID\n   * @param {string} [currentUserID] Only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unmuteUser(targetID: string, currentUserID?: string) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unmute', {\n      target_id: targetID,\n      ...(currentUserID ? { user_id: currentUserID } : {}),\n    });\n  }\n\n  /** userMuteStatus - check if a user is muted or not, can be used after connectUser() is called\n   *\n   * @param {string} targetID\n   * @returns {boolean}\n   */\n  userMuteStatus(targetID: string) {\n    if (!this.user || !this.wsPromise) {\n      throw new Error('Make sure to await connectUser() first.');\n    }\n\n    for (let i = 0; i < this.mutedUsers.length; i += 1) {\n      if (this.mutedUsers[i].target.id === targetID) return true;\n    }\n    return false;\n  }\n\n  /**\n   * flagMessage - flag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * flagUser - flag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async flagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagMessage - unflag a message\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagMessageResponse<StreamChatGenerics>>(this.baseURL + '/moderation/unflag', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * unflagUser - unflag a user\n   * @param {string} targetID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async unflagUser(targetID: string, options: { user_id?: string } = {}) {\n    return await this.post<FlagUserResponse<StreamChatGenerics>>(this.baseURL + '/moderation/unflag', {\n      target_user_id: targetID,\n      ...options,\n    });\n  }\n\n  /**\n   * getCallToken - retrieves the auth token needed to join a call\n   *\n   * @param {string} callID\n   * @param {object} options\n   * @returns {Promise<GetCallTokenResponse>}\n   */\n  async getCallToken(callID: string, options: { user_id?: string } = {}) {\n    return await this.post<GetCallTokenResponse>(this.baseURL + `/calls/${callID}`, { ...options });\n  }\n\n  /**\n   * _queryFlags - Query flags.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagsResponse<StreamChatGenerics>>} Flags Response\n   */\n  async _queryFlags(filterConditions: FlagsFilters = {}, options: FlagsPaginationOptions = {}) {\n    // Return a list of flags\n    return await this.post<FlagsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/flags', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _queryFlagReports - Query flag reports.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {FlagReportsFilters} filterConditions MongoDB style filter conditions\n   * @param {FlagReportsPaginationOptions} options Option object, {limit: 10, offset:0}\n   *\n   * @return {Promise<FlagReportsResponse<StreamChatGenerics>>} Flag Reports Response\n   */\n  async _queryFlagReports(filterConditions: FlagReportsFilters = {}, options: FlagReportsPaginationOptions = {}) {\n    // Return a list of message flags\n    return await this.post<FlagReportsResponse<StreamChatGenerics>>(this.baseURL + '/moderation/reports', {\n      filter_conditions: filterConditions,\n      ...options,\n    });\n  }\n\n  /**\n   * _reviewFlagReport - review flag report\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} [id] flag report to review\n   * @param {string} [reviewResult] flag report review result\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @param {string} [options.review_details] custom information about review result\n   * @returns {Promise<ReviewFlagReportResponse>>}\n   */\n  async _reviewFlagReport(id: string, reviewResult: string, options: ReviewFlagReportOptions = {}) {\n    return await this.patch<ReviewFlagReportResponse<StreamChatGenerics>>(this.baseURL + `/moderation/reports/${id}`, {\n      review_result: reviewResult,\n      ...options,\n    });\n  }\n\n  /**\n   * _unblockMessage - unblocks message blocked by automod\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} targetMessageID\n   * @param {string} [options.user_id] currentUserID, only used with serverside auth\n   * @returns {Promise<APIResponse>}\n   */\n  async _unblockMessage(targetMessageID: string, options: { user_id?: string } = {}) {\n    return await this.post<APIResponse>(this.baseURL + '/moderation/unblock_message', {\n      target_message_id: targetMessageID,\n      ...options,\n    });\n  }\n\n  /**\n   * @deprecated use markChannelsRead instead\n   *\n   * markAllRead - marks all channels for this user as read\n   * @param {MarkAllReadOptions<StreamChatGenerics>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  markAllRead = this.markChannelsRead;\n\n  /**\n   * markChannelsRead - marks channels read -\n   * it accepts a map of cid:messageid pairs, if messageid is empty, the whole channel will be marked as read\n   *\n   * @param {MarkChannelsReadOptions <StreamChatGenerics>} [data]\n   *\n   * @return {Promise<APIResponse>}\n   */\n  async markChannelsRead(data: MarkChannelsReadOptions<StreamChatGenerics> = {}) {\n    await this.post<APIResponse>(this.baseURL + '/channels/read', { ...data });\n  }\n\n  createCommand(data: CreateCommandOptions<StreamChatGenerics>) {\n    return this.post<CreateCommandResponse<StreamChatGenerics>>(this.baseURL + '/commands', data);\n  }\n\n  getCommand(name: string) {\n    return this.get<GetCommandResponse<StreamChatGenerics>>(this.baseURL + `/commands/${name}`);\n  }\n\n  updateCommand(name: string, data: UpdateCommandOptions<StreamChatGenerics>) {\n    return this.put<UpdateCommandResponse<StreamChatGenerics>>(this.baseURL + `/commands/${name}`, data);\n  }\n\n  deleteCommand(name: string) {\n    return this.delete<DeleteCommandResponse<StreamChatGenerics>>(this.baseURL + `/commands/${name}`);\n  }\n\n  listCommands() {\n    return this.get<ListCommandsResponse<StreamChatGenerics>>(this.baseURL + `/commands`);\n  }\n\n  createChannelType(data: CreateChannelOptions<StreamChatGenerics>) {\n    const channelData = Object.assign({}, { commands: ['all'] }, data);\n    return this.post<CreateChannelResponse<StreamChatGenerics>>(this.baseURL + '/channeltypes', channelData);\n  }\n\n  getChannelType(channelType: string) {\n    return this.get<GetChannelTypeResponse<StreamChatGenerics>>(this.baseURL + `/channeltypes/${channelType}`);\n  }\n\n  updateChannelType(channelType: string, data: UpdateChannelOptions<StreamChatGenerics>) {\n    return this.put<UpdateChannelResponse<StreamChatGenerics>>(this.baseURL + `/channeltypes/${channelType}`, data);\n  }\n\n  deleteChannelType(channelType: string) {\n    return this.delete<APIResponse>(this.baseURL + `/channeltypes/${channelType}`);\n  }\n\n  listChannelTypes() {\n    return this.get<ListChannelResponse<StreamChatGenerics>>(this.baseURL + `/channeltypes`);\n  }\n\n  /**\n   * translateMessage - adds the translation to the message\n   *\n   * @param {string} messageId\n   * @param {string} language\n   *\n   * @return {MessageResponse<StreamChatGenerics>} Response that includes the message\n   */\n  async translateMessage(messageId: string, language: string) {\n    return await this.post<APIResponse & MessageResponse<StreamChatGenerics>>(\n      this.baseURL + `/messages/${messageId}/translate`,\n      { language },\n    );\n  }\n\n  /**\n   * _normalizeExpiration - transforms expiration value into ISO string\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   */\n  _normalizeExpiration(timeoutOrExpirationDate?: null | number | string | Date) {\n    let pinExpires: null | string = null;\n    if (typeof timeoutOrExpirationDate === 'number') {\n      const now = new Date();\n      now.setSeconds(now.getSeconds() + timeoutOrExpirationDate);\n      pinExpires = now.toISOString();\n    } else if (isString(timeoutOrExpirationDate)) {\n      pinExpires = timeoutOrExpirationDate;\n    } else if (timeoutOrExpirationDate instanceof Date) {\n      pinExpires = timeoutOrExpirationDate.toISOString();\n    }\n    return pinExpires;\n  }\n\n  /**\n   * _messageId - extracts string message id from either message object or message id\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string} errorText error message to report in case of message id absence\n   */\n  _validateAndGetMessageId(messageOrMessageId: string | { id: string }, errorText: string) {\n    let messageId: string;\n    if (typeof messageOrMessageId === 'string') {\n      messageId = messageOrMessageId;\n    } else {\n      if (!messageOrMessageId.id) {\n        throw Error(errorText);\n      }\n      messageId = messageOrMessageId.id;\n    }\n    return messageId;\n  }\n\n  /**\n   * pinMessage - pins the message\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {undefined|null|number|string|Date} timeoutOrExpirationDate expiration date or timeout. Use number type to set timeout in seconds, string or Date to set exact expiration date\n   * @param {undefined|string | { id: string }} [pinnedBy] who will appear as a user who pinned a message. Only for server-side use. Provide `undefined` when pinning message client-side\n   * @param {undefined|number|string|Date} pinnedAt date when message should be pinned. It affects the order of pinned messages. Use negative number to set relative time in the past, string or Date to set exact date of pin\n   */\n  pinMessage(\n    messageOrMessageId: string | { id: string },\n    timeoutOrExpirationDate?: null | number | string | Date,\n    pinnedBy?: string | { id: string },\n    pinnedAt?: number | string | Date,\n  ) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      ({\n        set: {\n          pinned: true,\n          pin_expires: this._normalizeExpiration(timeoutOrExpirationDate),\n          pinned_at: this._normalizeExpiration(pinnedAt),\n        },\n      } as unknown) as PartialMessageUpdate<StreamChatGenerics>,\n      pinnedBy,\n    );\n  }\n\n  /**\n   * unpinMessage - unpins the message that was previously pinned\n   * @param {string | { id: string }} messageOrMessageId message object or message id\n   * @param {string | { id: string }} [userId]\n   */\n  unpinMessage(messageOrMessageId: string | { id: string }, userId?: string | { id: string }) {\n    const messageId = this._validateAndGetMessageId(\n      messageOrMessageId,\n      'Please specify the message id when calling unpinMessage',\n    );\n    return this.partialUpdateMessage(\n      messageId,\n      ({\n        set: { pinned: false },\n      } as unknown) as PartialMessageUpdate<StreamChatGenerics>,\n      userId,\n    );\n  }\n\n  /**\n   * updateMessage - Update the given message\n   *\n   * @param {Omit<MessageResponse<StreamChatGenerics>, 'mentioned_users'> & { mentioned_users?: string[] }} message object, id needs to be specified\n   * @param {string | { id: string }} [userId]\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the message\n   */\n  async updateMessage(\n    message: UpdatedMessage<StreamChatGenerics>,\n    userId?: string | { id: string },\n    options?: { skip_enrich_url?: boolean },\n  ) {\n    if (!message.id) {\n      throw Error('Please specify the message id when calling updateMessage');\n    }\n\n    const clonedMessage: Message = Object.assign({}, message);\n    delete clonedMessage.id;\n\n    const reservedMessageFields: Array<ReservedMessageFields> = [\n      'command',\n      'created_at',\n      'html',\n      'latest_reactions',\n      'own_reactions',\n      'quoted_message',\n      'reaction_counts',\n      'reply_count',\n      'type',\n      'updated_at',\n      'user',\n      '__html',\n    ];\n\n    reservedMessageFields.forEach(function (item) {\n      if (clonedMessage[item] != null) {\n        delete clonedMessage[item];\n      }\n    });\n\n    if (userId != null) {\n      if (isString(userId)) {\n        clonedMessage.user_id = userId;\n      } else {\n        clonedMessage.user = {\n          id: userId.id,\n        } as UserResponse<StreamChatGenerics>;\n      }\n    }\n\n    /**\n     * Server always expects mentioned_users to be array of string. We are adding extra check, just in case\n     * SDK missed this conversion.\n     */\n    if (Array.isArray(clonedMessage.mentioned_users) && !isString(clonedMessage.mentioned_users[0])) {\n      clonedMessage.mentioned_users = clonedMessage.mentioned_users.map((mu) => ((mu as unknown) as UserResponse).id);\n    }\n\n    return await this.post<UpdateMessageAPIResponse<StreamChatGenerics>>(this.baseURL + `/messages/${message.id}`, {\n      message: clonedMessage,\n      ...options,\n    });\n  }\n\n  /**\n   * partialUpdateMessage - Update the given message id while retaining additional properties\n   *\n   * @param {string} id the message id\n   *\n   * @param {PartialUpdateMessage<StreamChatGenerics>}  partialMessageObject which should contain id and any of \"set\" or \"unset\" params;\n   *         example: {id: \"user1\", set:{text: \"hi\"}, unset:[\"color\"]}\n   * @param {string | { id: string }} [userId]\n   *\n   * @param {boolean} [options.skip_enrich_url] Do not try to enrich the URLs within message\n   *\n   * @return {{ message: MessageResponse<StreamChatGenerics> }} Response that includes the updated message\n   */\n  async partialUpdateMessage(\n    id: string,\n    partialMessageObject: PartialMessageUpdate<StreamChatGenerics>,\n    userId?: string | { id: string },\n    options?: { skip_enrich_url?: boolean },\n  ) {\n    if (!id) {\n      throw Error('Please specify the message id when calling partialUpdateMessage');\n    }\n    let user = userId;\n    if (userId != null && isString(userId)) {\n      user = { id: userId };\n    }\n    return await this.put<UpdateMessageAPIResponse<StreamChatGenerics>>(this.baseURL + `/messages/${id}`, {\n      ...partialMessageObject,\n      ...options,\n      user,\n    });\n  }\n\n  async deleteMessage(messageID: string, hardDelete?: boolean) {\n    let params = {};\n    if (hardDelete) {\n      params = { hard: true };\n    }\n    return await this.delete<APIResponse & { message: MessageResponse<StreamChatGenerics> }>(\n      this.baseURL + `/messages/${messageID}`,\n      params,\n    );\n  }\n\n  async getMessage(messageID: string) {\n    return await this.get<GetMessageAPIResponse<StreamChatGenerics>>(this.baseURL + `/messages/${messageID}`);\n  }\n\n  getUserAgent() {\n    return (\n      this.userAgent || `stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${process.env.PKG_VERSION}`\n    );\n  }\n\n  setUserAgent(userAgent: string) {\n    this.userAgent = userAgent;\n  }\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _enrichAxiosOptions(\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ): AxiosRequestConfig {\n    const token = this._getToken();\n    const authorization = token ? { Authorization: token } : undefined;\n    let signal: AbortSignal | null = null;\n    if (this.nextRequestAbortController !== null) {\n      signal = this.nextRequestAbortController.signal;\n      this.nextRequestAbortController = null;\n    }\n\n    if (!options.headers?.['x-client-request-id']) {\n      options.headers = {\n        ...options.headers,\n        'x-client-request-id': randomId(),\n      };\n    }\n\n    return {\n      params: {\n        user_id: this.userID,\n        connection_id: this._getConnectionID(),\n        api_key: this.key,\n        ...options.params,\n      },\n      headers: {\n        ...authorization,\n        'stream-auth-type': this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n      },\n      ...(signal ? { signal } : {}),\n      ...options.config,\n    };\n  }\n\n  _getToken() {\n    if (!this.tokenManager || this.anonymous) return null;\n\n    return this.tokenManager.getToken();\n  }\n\n  _startCleaning() {\n    const that = this;\n    if (this.cleaningIntervalRef != null) {\n      return;\n    }\n    this.cleaningIntervalRef = setInterval(() => {\n      // call clean on the channel, used for calling the stop.typing event etc.\n      for (const channel of Object.values(that.activeChannels)) {\n        channel.clean();\n      }\n    }, 500);\n  }\n\n  /**\n   * encode ws url payload\n   * @private\n   * @returns json string\n   */\n  _buildWSPayload = (client_request_id?: string) => {\n    return JSON.stringify({\n      user_id: this.userID,\n      user_details: this._user,\n      device: this.options.device,\n      client_request_id,\n    });\n  };\n\n  verifyWebhook(requestBody: string, xSignature: string) {\n    return !!this.secret && CheckSignature(requestBody, this.secret, xSignature);\n  }\n\n  /** getPermission - gets the definition for a permission\n   *\n   * @param {string} name\n   * @returns {Promise<PermissionAPIResponse>}\n   */\n  getPermission(name: string) {\n    return this.get<PermissionAPIResponse>(`${this.baseURL}/permissions/${name}`);\n  }\n\n  /** createPermission - creates a custom permission\n   *\n   * @param {CustomPermissionOptions} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  createPermission(permissionData: CustomPermissionOptions) {\n    return this.post<APIResponse>(`${this.baseURL}/permissions`, {\n      ...permissionData,\n    });\n  }\n\n  /** updatePermission - updates an existing custom permission\n   *\n   * @param {string} id\n   * @param {Omit<CustomPermissionOptions, 'id'>} permissionData the permission data\n   * @returns {Promise<APIResponse>}\n   */\n  updatePermission(id: string, permissionData: Omit<CustomPermissionOptions, 'id'>) {\n    return this.put<APIResponse>(`${this.baseURL}/permissions/${id}`, {\n      ...permissionData,\n    });\n  }\n\n  /** deletePermission - deletes a custom permission\n   *\n   * @param {string} name\n   * @returns {Promise<APIResponse>}\n   */\n  deletePermission(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/permissions/${name}`);\n  }\n\n  /** listPermissions - returns the list of all permissions for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listPermissions() {\n    return this.get<PermissionsAPIResponse>(`${this.baseURL}/permissions`);\n  }\n\n  /** createRole - creates a custom role\n   *\n   * @param {string} name the new role name\n   * @returns {Promise<APIResponse>}\n   */\n  createRole(name: string) {\n    return this.post<APIResponse>(`${this.baseURL}/roles`, { name });\n  }\n\n  /** listRoles - returns the list of all roles for this application\n   *\n   * @returns {Promise<APIResponse>}\n   */\n  listRoles() {\n    return this.get<APIResponse>(`${this.baseURL}/roles`);\n  }\n\n  /** deleteRole - deletes a custom role\n   *\n   * @param {string} name the role name\n   * @returns {Promise<APIResponse>}\n   */\n  deleteRole(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/roles/${name}`);\n  }\n\n  /** sync - returns all events that happened for a list of channels since last sync\n   * @param {string[]} channel_cids list of channel CIDs\n   * @param {string} last_sync_at last time the user was online and in sync. RFC3339 ie. \"2020-05-06T15:05:01.207Z\"\n   * @param {SyncOptions} options See JSDoc in the type fields for more info\n   *\n   * @returns {Promise<SyncResponse>}\n   */\n  sync(channel_cids: string[], last_sync_at: string, options: SyncOptions = {}) {\n    return this.post<SyncResponse>(`${this.baseURL}/sync`, {\n      channel_cids,\n      last_sync_at,\n      ...options,\n    });\n  }\n\n  /**\n   * sendUserCustomEvent - Send a custom event to a user\n   *\n   * @param {string} targetUserID target user id\n   * @param {UserCustomEvent} event for example {type: 'friendship-request'}\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async sendUserCustomEvent(targetUserID: string, event: UserCustomEvent) {\n    return await this.post<APIResponse>(`${this.baseURL}/users/${targetUserID}/event`, {\n      event,\n    });\n  }\n\n  createBlockList(blockList: BlockList) {\n    return this.post<APIResponse>(`${this.baseURL}/blocklists`, blockList);\n  }\n\n  listBlockLists() {\n    return this.get<APIResponse & { blocklists: BlockListResponse[] }>(`${this.baseURL}/blocklists`);\n  }\n\n  getBlockList(name: string) {\n    return this.get<APIResponse & { blocklist: BlockListResponse }>(`${this.baseURL}/blocklists/${name}`);\n  }\n\n  updateBlockList(name: string, data: { words: string[] }) {\n    return this.put<APIResponse>(`${this.baseURL}/blocklists/${name}`, data);\n  }\n\n  deleteBlockList(name: string) {\n    return this.delete<APIResponse>(`${this.baseURL}/blocklists/${name}`);\n  }\n\n  exportChannels(request: Array<ExportChannelRequest>, options: ExportChannelOptions = {}) {\n    const payload = { channels: request, ...options };\n    return this.post<APIResponse & ExportChannelResponse>(`${this.baseURL}/export_channels`, payload);\n  }\n\n  exportUsers(request: ExportUsersRequest) {\n    return this.post<APIResponse & ExportUsersResponse>(`${this.baseURL}/export/users`, request);\n  }\n\n  exportChannel(request: ExportChannelRequest, options?: ExportChannelOptions) {\n    return this.exportChannels([request], options);\n  }\n\n  getExportChannelStatus(id: string) {\n    return this.get<APIResponse & ExportChannelStatusResponse>(`${this.baseURL}/export_channels/${id}`);\n  }\n\n  /**\n   * createSegment - Creates a Campaign Segment\n   *\n   * @param {SegmentData} params Segment data\n   *\n   * @return {Segment} The Created Segment\n   */\n  async createSegment(params: SegmentData) {\n    const { segment } = await this.post<{ segment: Segment }>(this.baseURL + `/segments`, { segment: params });\n    return segment;\n  }\n\n  /**\n   * querySegments - Query Campaign Segments\n   *\n   *\n   * @return {Segment[]} Segments\n   */\n  async querySegments(filters: SegmentFilters, options: SegmentQueryOptions = {}) {\n    return await this.get<{\n      segments: Segment[];\n    }>(this.baseURL + `/segments`, {\n      payload: {\n        filter_conditions: filters,\n        ...options,\n      },\n    });\n  }\n\n  /**\n   * updateSegment - Update a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   * @param {Partial<SegmentData>} params Segment data\n   *\n   * @return {Segment} Updated Segment\n   */\n  async updateSegment(id: string, params: Partial<SegmentData>) {\n    const { segment } = await this.put<{ segment: Segment }>(this.baseURL + `/segments/${id}`, { segment: params });\n    return segment;\n  }\n\n  /**\n   * deleteSegment - Delete a Campaign Segment\n   *\n   * @param {string} id Segment ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteSegment(id: string) {\n    return this.delete<APIResponse>(this.baseURL + `/segments/${id}`);\n  }\n\n  /**\n   * createCampaign - Creates a Campaign\n   *\n   * @param {CampaignData} params Campaign data\n   *\n   * @return {Campaign} The Created Campaign\n   */\n  async createCampaign(params: CampaignData) {\n    const { campaign } = await this.post<{ campaign: Campaign }>(this.baseURL + `/campaigns`, { campaign: params });\n    return campaign;\n  }\n\n  /**\n   * queryCampaigns - Query Campaigns\n   *\n   *\n   * @return {Campaign[]} Campaigns\n   */\n  async queryCampaigns(filters: CampaignFilters, options: CampaignQueryOptions = {}) {\n    return await this.get<{\n      campaigns: Campaign[];\n      segments: Record<string, Segment>;\n      channels?: Record<string, ChannelResponse<StreamChatGenerics>>;\n      users?: Record<string, UserResponse<StreamChatGenerics>>;\n    }>(this.baseURL + `/campaigns`, {\n      payload: {\n        filter_conditions: filters,\n        ...options,\n      },\n    });\n  }\n\n  /**\n   * updateCampaign - Update a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {Partial<CampaignData>} params Campaign data\n   *\n   * @return {Campaign} Updated Campaign\n   */\n  async updateCampaign(id: string, params: Partial<CampaignData>) {\n    const { campaign } = await this.put<{ campaign: Campaign }>(this.baseURL + `/campaigns/${id}`, {\n      campaign: params,\n    });\n    return campaign;\n  }\n\n  /**\n   * deleteCampaign - Delete a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Promise<APIResponse>} The Server Response\n   */\n  async deleteCampaign(id: string, params: DeleteCampaignOptions = {}) {\n    return this.delete<APIResponse>(this.baseURL + `/campaigns/${id}`, params);\n  }\n\n  /**\n   * scheduleCampaign - Schedule a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {{scheduledFor: number}} params Schedule params\n   *\n   * @return {Campaign} Scheduled Campaign\n   */\n  async scheduleCampaign(id: string, params: { scheduledFor: number }) {\n    const { scheduledFor } = params;\n    const { campaign } = await this.patch<{ campaign: Campaign }>(this.baseURL + `/campaigns/${id}/schedule`, {\n      scheduled_for: scheduledFor,\n    });\n    return campaign;\n  }\n\n  /**\n   * stopCampaign - Stop a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Stopped Campaign\n   */\n  async stopCampaign(id: string) {\n    const { campaign } = await this.patch<{ campaign: Campaign }>(this.baseURL + `/campaigns/${id}/stop`);\n    return campaign;\n  }\n\n  /**\n   * resumeCampaign - Resume a Campaign\n   *\n   * @param {string} id Campaign ID\n   *\n   * @return {Campaign} Resumed Campaign\n   */\n  async resumeCampaign(id: string) {\n    const { campaign } = await this.patch<{ campaign: Campaign }>(this.baseURL + `/campaigns/${id}/resume`);\n    return campaign;\n  }\n\n  /**\n   * testCampaign - Test a Campaign\n   *\n   * @param {string} id Campaign ID\n   * @param {{users: string[]}} params Test params\n   *\n   * @return {TestCampaignResponse} Test campaign response\n   */\n  async testCampaign(id: string, params: { users: string[] }) {\n    const { users } = params;\n    return await this.post<APIResponse & TestCampaignResponse>(this.baseURL + `/campaigns/${id}/test`, { users });\n  }\n\n  /**\n   * queryRecipients - Query Campaign Recipient Results\n   *\n   *\n   * @return {Recipient[]} Recipients\n   */\n  async queryRecipients(filters: RecipientFilters, options: RecipientQueryOptions = {}) {\n    return await this.get<{\n      campaigns: Record<string, Campaign>;\n      recipients: Recipient[];\n      segments: Record<string, Segment>;\n      channels?: Record<string, ChannelResponse<StreamChatGenerics>>;\n      users?: Record<string, UserResponse<StreamChatGenerics>>;\n    }>(this.baseURL + `/recipients`, {\n      payload: {\n        filter_conditions: filters,\n        ...options,\n      },\n    });\n  }\n\n  /**\n   * enrichURL - Get OpenGraph data of the given link\n   *\n   * @param {string} url link\n   * @return {OGAttachment} OG Attachment\n   */\n  async enrichURL(url: string) {\n    return this.get<APIResponse & OGAttachment>(this.baseURL + `/og`, { url });\n  }\n\n  /**\n   * getTask - Gets status of a long running task\n   *\n   * @param {string} id Task ID\n   *\n   * @return {TaskStatus} The task status\n   */\n  async getTask(id: string) {\n    return this.get<APIResponse & TaskStatus>(`${this.baseURL}/tasks/${id}`);\n  }\n\n  /**\n   * deleteChannels - Deletes a list of channel\n   *\n   * @param {string[]} cids Channel CIDs\n   * @param {boolean} [options.hard_delete] Defines if the channel is hard deleted or not\n   *\n   * @return {DeleteChannelsResponse} Result of the soft deletion, if server-side, it holds the task ID as well\n   */\n  async deleteChannels(cids: string[], options: { hard_delete?: boolean } = {}) {\n    return await this.post<APIResponse & DeleteChannelsResponse>(this.baseURL + `/channels/delete`, {\n      cids,\n      ...options,\n    });\n  }\n\n  /**\n   * deleteUsers - Batch Delete Users\n   *\n   * @param {string[]} user_ids which users to delete\n   * @param {DeleteUserOptions} options Configuration how to delete users\n   *\n   * @return {APIResponse} A task ID\n   */\n  async deleteUsers(user_ids: string[], options: DeleteUserOptions) {\n    if (options?.user !== 'soft' && options?.user !== 'hard') {\n      throw new Error('Invalid delete user options. user must be one of [soft hard]');\n    }\n    if (options.messages !== undefined && options.messages !== 'soft' && options.messages !== 'hard') {\n      throw new Error('Invalid delete user options. messages must be one of [soft hard]');\n    }\n    if (options.conversations !== undefined && options.conversations !== 'soft' && options.conversations !== 'hard') {\n      throw new Error('Invalid delete user options. conversations must be one of [soft hard]');\n    }\n    return await this.post<APIResponse & TaskResponse>(this.baseURL + `/users/delete`, {\n      user_ids,\n      ...options,\n    });\n  }\n\n  /**\n   * _createImportURL - Create an Import upload url.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} filename filename of uploaded data\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImportURL(filename: string) {\n    return await this.post<APIResponse & CreateImportURLResponse>(this.baseURL + `/import_urls`, {\n      filename,\n    });\n  }\n\n  /**\n   * _createImport - Create an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} path path of uploaded data\n   * @param {CreateImportOptions} options import options\n   * @return {APIResponse & CreateImportResponse} An ImportTask\n   */\n  async _createImport(path: string, options: CreateImportOptions = { mode: 'upsert' }) {\n    return await this.post<APIResponse & CreateImportResponse>(this.baseURL + `/imports`, {\n      path,\n      ...options,\n    });\n  }\n\n  /**\n   * _getImport - Get an Import Task.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {string} id id of Import Task\n   *\n   * @return {APIResponse & GetImportResponse} An ImportTask\n   */\n  async _getImport(id: string) {\n    return await this.get<APIResponse & GetImportResponse>(this.baseURL + `/imports/${id}`);\n  }\n\n  /**\n   * _listImports - Lists Import Tasks.\n   *\n   * Note: Do not use this.\n   * It is present for internal usage only.\n   * This function can, and will, break and/or be removed at any point in time.\n   *\n   * @private\n   * @param {ListImportsPaginationOptions} options pagination options\n   *\n   * @return {APIResponse & ListImportsResponse} An ImportTask\n   */\n  async _listImports(options: ListImportsPaginationOptions) {\n    return await this.get<APIResponse & ListImportsResponse>(this.baseURL + `/imports`, options);\n  }\n\n  /**\n   * upsertPushProvider - Create or Update a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderConfig} configuration of the provider you want to create or update\n   *\n   * @return {APIResponse & PushProviderUpsertResponse} A push provider\n   */\n  async upsertPushProvider(pushProvider: PushProviderConfig) {\n    return await this.post<APIResponse & PushProviderUpsertResponse>(this.baseURL + `/push_providers`, {\n      push_provider: pushProvider,\n    });\n  }\n\n  /**\n   * deletePushProvider - Delete a push provider\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @param {PushProviderID} type and foreign id of the push provider to be deleted\n   *\n   * @return {APIResponse} An API response\n   */\n  async deletePushProvider({ type, name }: PushProviderID) {\n    return await this.delete<APIResponse>(this.baseURL + `/push_providers/${type}/${name}`);\n  }\n\n  /**\n   * listPushProviders - Get all push providers in the app\n   *\n   * Note: Works only for v2 push version is enabled on app settings.\n   *\n   * @return {APIResponse & PushProviderListResponse} A push provider\n   */\n  async listPushProviders() {\n    return await this.get<APIResponse & PushProviderListResponse>(this.baseURL + `/push_providers`);\n  }\n\n  /**\n   * creates an abort controller that will be used by the next HTTP Request.\n   */\n  createAbortControllerForNextRequest() {\n    return (this.nextRequestAbortController = new AbortController());\n  }\n\n  /**\n   * commits a pending message, making it visible in the channel and for other users\n   * @param id the message id\n   *\n   * @return {APIResponse & MessageResponse} The message\n   */\n  async commitMessage(id: string) {\n    return await this.post<APIResponse & MessageResponse>(this.baseURL + `/messages/${id}/commit`);\n  }\n}\n", "export const EVENT_MAP = {\n  'channel.created': true,\n  'channel.deleted': true,\n  'channel.hidden': true,\n  'channel.kicked': true,\n  'channel.muted': true,\n  'channel.truncated': true,\n  'channel.unmuted': true,\n  'channel.updated': true,\n  'channel.visible': true,\n  'health.check': true,\n  'member.added': true,\n  'member.removed': true,\n  'member.updated': true,\n  'message.deleted': true,\n  'message.new': true,\n  'message.read': true,\n  'message.updated': true,\n  'notification.added_to_channel': true,\n  'notification.channel_deleted': true,\n  'notification.channel_mutes_updated': true,\n  'notification.channel_truncated': true,\n  'notification.invite_accepted': true,\n  'notification.invite_rejected': true,\n  'notification.invited': true,\n  'notification.mark_read': true,\n  'notification.message_new': true,\n  'notification.mutes_updated': true,\n  'notification.removed_from_channel': true,\n  'reaction.deleted': true,\n  'reaction.new': true,\n  'reaction.updated': true,\n  'typing.start': true,\n  'typing.stop': true,\n  'user.banned': true,\n  'user.deleted': true,\n  'user.presence.changed': true,\n  'user.unbanned': true,\n  'user.unread_message_reminder': true,\n  'user.updated': true,\n  'user.watching.start': true,\n  'user.watching.stop': true,\n\n  // local events\n  'channels.queried': true,\n  'connection.changed': true,\n  'connection.recovered': true,\n  'transport.changed': true,\n};\n", "import { PermissionObject } from './types';\n\ntype RequiredPermissionObject = Required<PermissionObject>;\n\nexport const Allow = 'Allow';\nexport const Deny = 'Deny';\nexport const AnyResource = ['*'];\nexport const AnyRole = ['*'];\nexport const MaxPriority = 999;\nexport const MinPriority = 1;\n\n// deprecated permission object class, you should use the new permission system v2 and use permissions\n// defined in BuiltinPermissions to configure your channel types\n\nexport class Permission {\n  name: RequiredPermissionObject['name'];\n  action: RequiredPermissionObject['action'];\n  owner: RequiredPermissionObject['owner'];\n  priority: RequiredPermissionObject['priority'];\n  resources: RequiredPermissionObject['resources'];\n  roles: RequiredPermissionObject['roles'];\n  constructor(\n    name: string,\n    priority: number,\n    resources = AnyResource,\n    roles = AnyRole,\n    owner = false,\n    action: RequiredPermissionObject['action'] = Allow,\n  ) {\n    this.name = name;\n    this.action = action;\n    this.owner = owner;\n    this.priority = priority;\n    this.resources = resources;\n    this.roles = roles;\n  }\n}\n\n// deprecated\nexport const AllowAll = new Permission('Allow all', MaxPriority, AnyResource, AnyRole, false, Allow);\n\n// deprecated\nexport const DenyAll = new Permission('Deny all', MinPriority, AnyResource, AnyRole, false, Deny);\n\nexport type Role = 'admin' | 'user' | 'guest' | 'anonymous' | 'channel_member' | 'channel_moderator' | string;\n\nexport const BuiltinRoles = {\n  Admin: 'admin',\n  Anonymous: 'anonymous',\n  ChannelMember: 'channel_member',\n  ChannelModerator: 'channel_moderator',\n  Guest: 'guest',\n  User: 'user',\n};\n\nexport const BuiltinPermissions = {\n  AddLinks: 'Add Links',\n  BanUser: 'Ban User',\n  CreateChannel: 'Create Channel',\n  CreateMessage: 'Create Message',\n  CreateReaction: 'Create Reaction',\n  DeleteAnyAttachment: 'Delete Any Attachment',\n  DeleteAnyChannel: 'Delete Any Channel',\n  DeleteAnyMessage: 'Delete Any Message',\n  DeleteAnyReaction: 'Delete Any Reaction',\n  DeleteOwnAttachment: 'Delete Own Attachment',\n  DeleteOwnChannel: 'Delete Own Channel',\n  DeleteOwnMessage: 'Delete Own Message',\n  DeleteOwnReaction: 'Delete Own Reaction',\n  ReadAnyChannel: 'Read Any Channel',\n  ReadOwnChannel: 'Read Own Channel',\n  RunMessageAction: 'Run Message Action',\n  UpdateAnyChannel: 'Update Any Channel',\n  UpdateAnyMessage: 'Update Any Message',\n  UpdateMembersAnyChannel: 'Update Members Any Channel',\n  UpdateMembersOwnChannel: 'Update Members Own Channel',\n  UpdateOwnChannel: 'Update Own Channel',\n  UpdateOwnMessage: 'Update Own Message',\n  UploadAttachment: 'Upload Attachment',\n  UseFrozenChannel: 'Send messages and reactions to frozen channels',\n};\n"],
  "mappings": "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",
  "names": ["fromByteArray", "len", "i", "len2", "_typeof", "_regeneratorRuntime", "exports", "define", "self", "value", "next", "key", "isBuffer", "isString", "isFunction", "axios", "require_axios", "require_browser", "obj", "self", "self", "_setPrototypeOf", "o", "p", "self", "_getPrototypeOf", "o", "_construct", "Parent", "args", "Class", "_wrapNativeSuper", "Class", "isString", "arrayOrString", "isMapStringCallback", "callback", "map", "res", "k", "len", "length", "charAt", "kValue", "mappedValue", "encodeBase64", "data", "fromByteArray", "Uint8Array", "char", "charCodeAt", "decodeBase64", "s", "e", "w", "String", "fromCharCode", "L", "i", "b", "c", "x", "l", "a", "r", "A", "ChannelState", "channel", "isUpToDate", "msgArray", "msg", "result", "filter", "message", "id", "removed", "user", "_updateUserMessages", "messages", "m", "messageSets", "forEach", "set", "parentId", "threads", "pinnedMessages", "hardDelete", "_deleteUserMessages", "cid", "created_at", "deleted_at", "latest_reactions", "mentioned_users", "own_reactions", "parent_id", "reply_count", "status", "thread_participants", "type", "updated_at", "_channel", "watcher_count", "typing", "read", "initMessages", "pending_messages", "mutedUsers", "watchers", "members", "membership", "unreadCount", "last_message_at", "state", "Date", "find", "isCurrent", "index", "findIndex", "isLatest", "newMessage", "timestampChanged", "addIfDoesNotExist", "messageSetToAddToIfDoesNotExist", "addMessagesSorted", "__html", "html", "pinned_at", "newMessages", "initializing", "findTargetMessageSet", "messagesToAdd", "targetMessageSetIndex", "isFromShadowBannedUser", "shadowed", "isMessageFormatted", "formatMessage", "getClient", "updateUserReference", "getTime", "parentID", "show_in_channel", "_addToMessageList", "thread", "threadMessages", "messageSet", "addPinnedMessage", "pinnedMessage", "removeMessageFromArray", "reaction", "enforce_unique", "messageWithReaction", "_updateMessage", "_addOwnReactionToMessage", "ownReactions", "_removeOwnReactionFromMessage", "userID", "user_id", "push", "item", "parseMessage", "toString", "updatedMessages", "quoted_message_id", "quoted_message", "attachments", "updateFunc", "pinned", "msgIndex", "messageSetIndex", "findMessageSetIndex", "sortBy", "addMessageToList", "messageArr", "messageArrayLength", "concat", "messageTime", "messageIsNewest", "left", "middle", "right", "Math", "floor", "splice", "messageToRemove", "isRemoved", "filteredMessages", "latestMessages", "now", "Object", "entries", "lastEvent", "receivedAt", "received_at", "dispatchEvent", "_regeneratorRuntime", "messageId", "parentMessageId", "limit", "switchedToMessageSet", "loadedMessageThread", "messageIdToFind", "switchToMessageSet", "query", "id_around", "getReplies", "undefined", "currentMessages", "messages1", "messages2", "some", "m1", "m2", "overlappingMessageSetIndices", "_", "areMessageSetsOverlap", "mergeTargetMessageSetIndex", "mergeSourceMessageSetIndices", "target", "sources", "indexOf", "overlappingMessageSetIndex", "logChatPromiseExecution", "promise", "name", "then", "catch", "error", "console", "warn", "sleep", "Promise", "setTimeout", "isFunction", "value", "prototype", "call", "Function", "chatCodes", "TOKEN_EXPIRED", "WS_CLOSED_SUCCESS", "isReadableStream", "obj", "readable", "_read", "isBuffer", "constructor", "isFileWebAPI", "uri", "window", "File", "isOwnUser", "total_unread_count", "isBlobWebAPI", "Blob", "isOwnUserBaseProperty", "property", "ownUserBaseProperties", "channel_mutes", "devices", "mutes", "unread_channels", "unread_count", "invisible", "roles", "addFileToFormData", "contentType", "FormData", "append", "split", "reverse", "normalizeQuerySort", "sort", "sortFields", "sortArr", "Array", "isArray", "field", "direction", "retryInterval", "numberOfFailures", "max", "min", "random", "randomId", "generateUUIDv4", "hex", "bytes", "padStart", "getRandomBytes", "subarray", "getRandomValuesWithMathRandom", "pow", "byteLength", "getRandomValues", "crypto", "bind", "msCrypto", "convertErrorToJson", "err", "jsonObj", "getOwnPropertyNames", "key", "getOwnPropertyDescriptor", "isOnline", "nav", "navigator", "onLine", "addConnectionEventListeners", "cb", "addEventListener", "removeConnectionEventListeners", "removeEventListener", "Channel", "client", "options", "watch", "presence", "event", "listeners", "all", "listener", "Error", "baseURL", "validTypeRe", "validIDRe", "test", "_client", "_data", "initialized", "offlineMode", "lastTypingEvent", "isTyping", "disconnected", "configs", "post", "_channelURL", "sendMessageResponse", "sendFile", "url", "delete", "_checkInitialized", "offset", "next", "payload", "filter_conditions", "message_filter_conditions", "wsPromise", "get", "filterConditions", "messageID", "keys", "reactionType", "channelData", "updateMessage", "reserved", "_update", "update", "patch", "coolDownInterval", "cooldown", "accept_invite", "reject_invite", "add_members", "add_moderators", "assign_roles", "invites", "remove_members", "demote_moderators", "opts", "channel_cid", "_muteStatus", "formData", "message_id", "form_data", "getConfig", "typing_events", "diff", "lastKeyStroke", "sendEvent", "messageSlice", "slice", "read_events", "resolve", "stopTyping", "clean", "defaultOptions", "_hasConnectionID", "combined", "logger", "tags", "response", "messageIds", "ids", "join", "last_read", "silent", "userMuteStatus", "own_capabilities", "includes", "muteStatus", "muted", "lastRead", "count", "_countMessageAsUnread", "queryURL", "membersStr", "member", "tempChannelCid", "activeChannels", "_addChannelConfig", "_initializeState", "queriedChannels", "channels", "isLatestMessageSet", "targetUserID", "banUser", "userId", "clearHistory", "clear_history", "unbanUser", "shadowBan", "removeShadowBan", "callbackOrString", "callbackOrNothing", "unsubscribe", "el", "channelState", "unread_messages", "_extendEventWithOwnReactions", "hard_delete", "removeMessage", "addMessageSorted", "removeQuotedMessageReferences", "removePinnedMessage", "ownMessage", "isThreadMessage", "truncated_at", "truncatedAt", "createdAt", "clearMessages", "hidden", "addReaction", "removeReaction", "_isUsingServerAuth", "clientState", "addPinnedMessages", "pinned_messages", "watcher", "reduce", "acc", "findMessage", "setIsUpToDate", "ClientState", "users", "userChannelReferences", "updateUser", "channelID", "InsightMetrics", "connectionStartTimestamp", "wsTotalFailures", "wsConsecutiveFailures", "instanceClientId", "postInsights", "insightType", "insights", "maxAttempts", "axios", "buildWsFatalInsight", "connection", "buildWsBaseInsight", "ready_state", "ws", "readyState", "_buildUrl", "api_key", "start_ts", "insightMetrics", "end_ts", "auth_type", "getAuthType", "token", "tokenManager", "user_details", "_user", "device", "client_id", "connectionID", "ws_details", "ws_consecutive_failures", "ws_total_failures", "request_id", "requestID", "online", "user_agent", "userAgent", "instance_client_id", "buildWsSuccessAfterFailureInsight", "isCloseEvent", "code", "isErrorEvent", "StableWSConnection", "qs", "encodeURIComponent", "_buildWSPayload", "getToken", "wsBaseURL", "getUserAgent", "_log", "_setHealth", "isHealthy", "_reconnect", "interval", "wsID", "JSON", "parse", "isResolved", "rejectPromise", "_errorFromWSEvent", "resolvePromise", "scheduleNextPing", "handleEvent", "scheduleConnectionCheck", "reason", "wasClean", "consecutiveFailures", "totalFailures", "isConnecting", "healthy", "isWSFailure", "statusCode", "StatusCode", "connectionOpen", "reject", "healthCheckTimeoutRef", "clearTimeout", "clientID", "send", "stringify", "pingInterval", "connectionCheckTimeoutRef", "connectionCheckTimeout", "isDisconnected", "onlineStatusChanged", "extra", "level", "timeout", "_connect", "healthCheck", "isStatic", "refreshToken", "_waitForHealthy", "race", "clearInterval", "removeAllListeners", "isClosedPromise", "close", "OPEN", "onclose", "enableWSFallback", "isTokenReady", "tokenReady", "loadToken", "_setupConnectionPromise", "wsURL", "WebSocket", "onopen", "onerror", "onmessage", "connection_id", "enableInsights", "_destroyCurrentWSConnection", "recoverState", "JWTUserToken", "apiSecret", "extraData", "jwtOptions", "TypeError", "algorithm", "noTimestamp", "JWTServerToken", "server", "jwt", "sign", "UserFromToken", "fragments", "b64Payload", "DevToken", "CheckSignature", "body", "secret", "signature", "Buffer", "from", "hash", "createHmac", "digest", "TokenManager", "tokenOrProvider", "validateToken", "tokenProvider", "loadTokenPromise", "anon", "tokenUserId", "APIErrorCodes", "retryable", "isAPIError", "isErrorRetryable", "isConnectionIDError", "isErrorResponse", "ConnectionState", "WSConnectionFallback", "_setState", "Closed", "cancelToken", "cancel", "connect", "params", "config", "retry", "CancelToken", "source", "doAxiosRequest", "replace", "_req", "Connected", "events", "isCancel", "Disconnected", "reconnect", "Connecting", "json", "_poll", "_onlineStatusChanged", "Init", "ErrorFromResponse", "StreamChat", "secretOrOptions", "wsConnection", "wsFallback", "Boolean", "_getConnectionID", "userTokenOrProvider", "setUserPromise", "node", "allowServerSideConnect", "anonymous", "setTokenPromise", "_setToken", "_setUser", "openConnection", "persistUserOnConnectionFailure", "closeConnection", "disconnectUser", "connectUser", "setTokenOrProvider", "cleaningIntervalRef", "disconnect", "_startCleaning", "before", "toISOString", "closePromise", "values", "_disconnect", "reset", "anonymousUser", "_setupConnection", "connectAnonymousUser", "requestConfig", "_enrichAxiosOptions", "_logApiRequest", "axiosInstance", "put", "_logApiResponse", "handleResponse", "client_request_id", "headers", "_logApiError", "postListenerCallbacks", "_handleClientEvent", "_handleChannelEvent", "_callClientListeners", "_callChannelListeners", "messageEvent", "jsonString", "refMap", "_updateMemberWatcherReferences", "updateUserMessages", "deleteUserMessages", "_updateUserMessageReferences", "mark_messages_deleted", "_deleteUserMessageReference", "cids", "recoverStateOnReconnect", "queryChannels", "$in", "channelType", "custom", "tempCid", "membersStrInExistingChannel", "upsertUsers", "upsertUser", "markChannelsRead", "mutedChannels", "inputOptions", "browser", "withCredentials", "warmUp", "httpsAgent", "https", "Agent", "keepAlive", "keepAliveMsecs", "create", "setBaseURL", "process", "env", "STREAM_LOCAL_TEST_RUN", "STREAM_LOCAL_TEST_HOST", "defaultWSTimeoutWithFallback", "defaultWSTimeout", "apn_config", "p12_cert", "updateAppSettings", "revoke_tokens_issued_before", "_normalizeDate", "revokeUsersToken", "userIDs", "partialUpdateUsers", "apnTemplate", "apn_template", "firebaseTemplate", "firebase_template", "firebaseDataTemplate", "firebase_data_template", "skipDevices", "skip_devices", "pushProviderName", "push_provider_name", "pushProviderType", "push_provider_type", "last_active", "guestUser", "access_token", "exp", "iat", "getHeaders", "maxContentLength", "Infinity", "maxBodyLength", "errorFromResponse", "_handleUserEvent", "me", "currentMutedChannelIds", "nextMutedChannelIds", "mute", "activeChannelKeys", "activeChannelKey", "deleteAllChannelReference", "expires", "expiresAt", "_sayHi", "setClient", "mode", "updateUsers", "stateOptions", "hydrateActiveChannels", "channelsFromApi", "skipInitialization", "push_provider", "serverSide", "web", "android", "ios", "endpoints", "server_side", "channelIDOrCustom", "getChannelByMembers", "getChannelById", "partialUserObject", "userMap", "userObject", "user_ids", "target_user_id", "shadow", "targetID", "target_id", "currentUserID", "targetMessageID", "target_message_id", "callID", "reviewResult", "review_result", "commands", "language", "timeoutOrExpirationDate", "pinExpires", "setSeconds", "getSeconds", "messageOrMessageId", "errorText", "pinnedBy", "pinnedAt", "_validateAndGetMessageId", "partialUpdateMessage", "pin_expires", "_normalizeExpiration", "clonedMessage", "reservedMessageFields", "mu", "partialMessageObject", "hard", "_getToken", "authorization", "Authorization", "signal", "nextRequestAbortController", "that", "setInterval", "requestBody", "xSignature", "permissionData", "channel_cids", "last_sync_at", "blockList", "request", "exportChannels", "segment", "filters", "campaign", "scheduledFor", "scheduled_for", "conversations", "filename", "path", "pushProvider", "AbortController", "_instance", "EVENT_MAP", "Allow", "Deny", "AnyResource", "AnyRole", "MaxPriority", "MinPriority", "Permission", "priority", "resources", "owner", "action", "AllowAll", "DenyAll", "BuiltinRoles", "Admin", "Anonymous", "ChannelMember", "ChannelModerator", "Guest", "User", "BuiltinPermissions", "AddLinks", "BanUser", "CreateChannel", "CreateMessage", "CreateReaction", "DeleteAnyAttachment", "DeleteAnyChannel", "DeleteAnyMessage", "DeleteAnyReaction", "DeleteOwnAttachment", "DeleteOwnChannel", "DeleteOwnMessage", "DeleteOwnReaction", "ReadAnyChannel", "ReadOwnChannel", "RunMessageAction", "UpdateAnyChannel", "UpdateAnyMessage", "UpdateMembersAnyChannel", "UpdateMembersOwnChannel", "UpdateOwnChannel", "UpdateOwnMessage", "UploadAttachment", "UseFrozenChannel"]
}
